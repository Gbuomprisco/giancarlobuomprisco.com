{"pageProps":{"post":{"readingTime":"2 min read","live":true,"title":"Better code with Typescript aliases","date":"2020-07-26T00:00:00.322Z","slug":"better-code-with-typescript-aliases","content":"<p>If you've ever worked with Typescript, you surely know what <code>type aliases</code> are for. They helps us create aliases of more complex types, for example arrays of interfaces, union types, etc.</p>\n<p>One less-known way they can be leveraged is by simply describing values of primitive types based on their format.</p>\n<p>This can accelerate the understanding of a codebase, reduce confusion, and deepen the insights gathered from just reading the types of your code.</p>\n<p>For example, we have a DTO with two properties. This is how it would normally be written:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDto</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  lastEdited<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Limitations of simple typing</h3>\n<p>The above is OK, and generally understandable, but can be better. Suppose it's your first day on a new codebase, and you know nothing about it.</p>\n<p>You see the above DTO, but you're trying to understand what it is and what actual formats it expects from you:</p>\n<ul>\n<li>you don't know what's the format of <code>ID</code></li>\n<li>you don't know the format of <code>lastEdited</code>. Is it a Unix timestamp, or a Julian day? Or the amount of days since Earth was created? Who knows.</li>\n</ul>\n<p>So why not describe what theses values are with <code>type aliases</code>?</p>\n<h3>Aliasing primitive types based on their format</h3>\n<p>We can define the types in a global typings file, so they can be reused across the project.</p>\n<p>Let's assume that the fields above are, as commonly happen to be, a UUID and a Unix timestamp.</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">UUID</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UnixTimestamp</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>And then, we can assign them to our DTO:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDto</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">;</span>\n  lastEdited<span class=\"token operator\">:</span> UnixTimestamp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>In my opinion, the above conveys a lot more information than before, and it's certainly more useful to both existing members and newcomers.</p>\n<h3>Type Aliases as shortcuts</h3>\n<p>Type aliases are also useful to shortcut some common type combinations:</p>\n<p>Converting inline interfaces to the <code>Record</code> alias:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> myObject<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> property<span class=\"token operator\">:</span> <span class=\"token string\">'key'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// can also be written</span>\n<span class=\"token keyword\">const</span> myObject<span class=\"token operator\">:</span> Record<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> property<span class=\"token operator\">:</span> <span class=\"token string\">'key'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The <code>Record</code> type aliases can also be aliased into more granular types:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">StringObject</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UnknownObject</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AnyObject</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> stringObject<span class=\"token operator\">:</span> StringObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> property<span class=\"token operator\">:</span> <span class=\"token string\">'key'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> anyObject<span class=\"token operator\">:</span> AnyObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span>\n  hello<span class=\"token operator\">:</span> <span class=\"token string\">\"world\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Aliases are great, sometime forgotten feature in  Typescript. Hopefully, this will article will give you some ideas of how you can leverage them in your project!</p>\n<hr>\n<p><em>If you enjoyed this article, follow me on <a href=\"https://twitter.com/gc_psk\">Twitter</a></em></p>\n","coverImage":"/assets/images/posts/typescript-aliases.webp","collection":"typescript"},"series":[],"morePosts":[{"readingTime":"2 min read","live":true,"title":"Build Typescript libraries for the browser with Nx","date":"2020-07-25T00:00:00.322Z","slug":"build-typescript-libraries-for-the-browser-with-nx","coverImage":"/assets/images/posts/typescript-libraries-with-nx.webp","collection":"typescript","excerpt":"This article shows how to set up your Webpack configuration to build Typescript libraries with Nx"},{"readingTime":"5 min read","live":true,"title":"Enforce your team coding style with Prettier and TsLint","date":"2019-04-17T00:00:00.322Z","slug":"enforce-your-team-style-with-prettier-and-tslint","coverImage":"/assets/images/posts/enforce-team-coding-style.gif","collection":"typescript","excerpt":"Using TsLint to enforce your team coding style"},{"readingTime":"10 min read","live":true,"title":"Writing scalable Typescript","date":"2019-04-05T00:00:00.322Z","slug":"writing-scalabale-typescript","coverImage":"/assets/images/posts/writing-scalable-typescript.jpeg","collection":"typescript","excerpt":"Let’s explore in detail how to write clean, safe, enterprise-grade Typescript code"}]},"__N_SSG":true}