{"pageProps":{"post":{"readingTime":"3 min read","title":"Setters vs ngOnChanges: which one is better?","date":"2020-07-30T00:00:00.322Z","slug":"setters-vs-ng-on-changes","content":"<p>Getting notified about an Angular component's property changes is normally done in 2 ways:</p>\n<ul>\n<li>adding a setter to the property</li>\n<li>using the <code>ngOnChanges</code> lifecycle hook</li>\n</ul>\n<p>But... is there a best practice?</p>\n<p>This discussion recently came up with my colleagues while trying to establish a standard practice in our codebase. We tried to find objective arguments to understand which one is better.</p>\n<p>As usual, the answer depends on the scenario.</p>\n<h2>Style</h2>\n<p>Style is very much a subjective factor, but using a setter is hands-down my favorite approach. Let's take a look at a common scenario:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> subject$ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Input</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject$<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>It's succinct, type-safe, and encourages the usage of Observables. Not much to dislike, imho.</p>\n<p>But can you <strong>not</strong> add a getter?</p>\n<p>Yes. It turns out, Angular does not check the previous value by invoking the getter on the property, but stores its value in its component's logical view.</p>\n<p>If you're interested in reading the source code where this happens, <a href=\"https://github.com/angular/angular/blob/d1ea1f4c7f3358b730b0d94e65b00bc28cae279c/packages/core/src/render3/bindings.ts#L50\">check this out</a>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnChanges</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Input</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> subject$ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">ngOnChanges</span><span class=\"token punctuation\">(</span>changes<span class=\"token operator\">:</span> SimpleChanges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// changes.name.currentValue is typed as `any`</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject$<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>changes<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>currentValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The <code>ngOnChanges</code> lifecycle hook, on the contrary, it's not as nice (in my opinion) - and most importantly, is weakly typed.</p>\n<p>Also - it's worth to mention that using setters usually takes less code, which is always a good thing.</p>\n<h2>Performance</h2>\n<p>Does performance change much? At first, we thought that <code>ngOnChanges</code> would be more efficient as being part of Angular's lifecycle hooks, and therefore being aware of when a property changed.</p>\n<p>It turns out, though, that Angular <strong>does only change a property when the binding is a new instance</strong>. Of course, we're taking into account the change detection being <code>OnPush</code>.</p>\n<p>Performance-wise, according to my tests, there isn't a better way, and shouldn't be a factor when deciding which way to go with.</p>\n<h2>Dealing with multiple Inputs</h2>\n<p>The situation changes when taking into account changes on multiple inputs:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnChanges</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Input</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Input</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> username$ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">ngOnChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> email <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> SimpleChanges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span>currentValue <span class=\"token operator\">||</span> email<span class=\"token punctuation\">.</span>currentValue<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username$<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>In this case, it's fairly straightforward and simpler to receive all the inputs at once.</p>\n<p>But because this situation is pretty uncommon, and sometimes a sign of a <em>code-smell</em>, you'll find yourselves wanting to use the setter the majority of the time.</p>\n<p>At the end of the day, remember that this decision is always up to you and your team's preferences.</p>\n<p><em>Thank you for reading, I hope you enjoyed this article. If you did, consider follow me on <a href=\"https://twitter.com/gc_psk\">Twitter</a> or sign up to the Newsletter using the form below!</em></p>\n","coverImage":"/assets/images/posts/setters-vs-on-changes.png","collection":"angular"},"morePosts":[{"readingTime":"3 min read","title":"Benchmarking Angular 12 with Webpack 5","date":"2021-05-14T00:00:00.322Z","slug":"webpack-5-angular12","coverImage":"/assets/images/posts/benchmarking-webpack-5.png","collection":"angular","excerpt":"Angular 12 has been released and with it the much awaited Webpack 5 upgrade. In this post I benchmarked the bundle-size and compilation speed against the previous version"},{"readingTime":"5 min read","title":"Principles for creating libraries with Nx and Angular","date":"2021-02-07T00:00:00.322Z","slug":"how-to-organize-nx-modules-with-angular","coverImage":"/assets/images/posts/organize-nx-modules-ngrx.png","collection":"angular","excerpt":"Working with Nx may be confusing. This article explains how I create Nx libraries and the principles behind my motivations"},{"readingTime":"3 min read","title":"Where to put your Angular models?","date":"2020-08-03T00:00:00.322Z","slug":"angular-where-to-put-models","ogImage":{"url":"/assets/images/posts/where-put-angular-models.png"},"coverImage":"/assets/images/posts/where-put-angular-models.png","collection":"angular","excerpt":"Organizing entities and models in your Angular app may be hard. This article explains where to put your entities and what mistakes to watch out for"},{"readingTime":"5 min read","title":"Using the Intersection Observer API with Angular","date":"2020-08-01T00:00:00.322Z","slug":"intersection-observer-with-angular","coverImage":"/assets/images/posts/intersection-observer.png","collection":"angular","excerpt":"This article shows how to build a directive with Angular that uses the Intersection Observer API to check when an element becomes visible on the page"},{"readingTime":"3 min read","title":"Async Rendering with a single Rx Operator","date":"2020-07-11T00:00:00.322Z","slug":"async-rendering-with-a-single-rx-operator","coverImage":"/assets/images/posts/async-rendering.png","collection":"angular","excerpt":"Increase your app rendering performance with this simple Rx operator"},{"readingTime":"9 min read","title":"Building Scalable Multi-Platform Projects with Angular and Nx","date":"2019-08-25T00:00:00.322Z","slug":"building-scalable-multi-platform-projects-with-angular-and-nx","ogImage":{"url":"https://cdn-images-1.medium.com/max/1600/0*erZf_hQ4V3MLHSyf"},"coverImage":"https://cdn-images-1.medium.com/max/1600/0*erZf_hQ4V3MLHSyf","collection":"angular","excerpt":"Building a scalable multi-platform monorepo application with Angular and Nx"}]},"__N_SSG":true}