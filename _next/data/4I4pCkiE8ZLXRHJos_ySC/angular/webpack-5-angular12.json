{"pageProps":{"post":{"readingTime":"2 min read","live":true,"title":"Benchmarking Angular 12 with Webpack 5","date":"2021-05-14T00:00:00.322Z","slug":"webpack-5-angular12","content":"<p><strong>Angular 12</strong> has just been released! Yay!</p>\n<p>This is a particularly long-awaited release due to the CLI using Webpack 5 by default, which comes with improved performance and tree-shaking - or at least that's the promise.</p>\n<p>That means, faster and smaller builds. Who doesn't like that?</p>\n<p>I took the time to benchmark 2 apps I work on, one small and another medium-sized: read on to see the results.</p>\n<p><strong>Notice:</strong>: The results can differ wildly given your setup and applications, so please don't take this benchmarks too seriously.</p>\n<p>Actually, I'd love to know what your results will end up being!</p>\n<h3>Setup</h3>\n<p>The tests have been done on a Macbook Pro 2018 i7 2.2Ghz 32Gb RAM - using Node v16.</p>\n<ul>\n<li>The Webpack 4 builds are built using Angular 11.2.12.</li>\n<li>The Webpack 5 builds are built using Angular 12.0.0.</li>\n</ul>\n<h2>Webpack 5 vs Webpack 4: Small Application benchmark</h2>\n<h3>Development Build Time</h3>\n<p>The following graph shows the results for the <strong>initial</strong> development build time.</p>\n<ul>\n<li>Webpack 4: 30.1 seconds</li>\n<li>Webpack 5: 32.9 seconds</li>\n</ul>\n<p>As you can see, the new Webpack version falls behind nearly 3 seconds - which is a bit of a bummer.</p>\n<h3>Production Build Time</h3>\n<p>The following graph shows the results for the production build time. The version 5 makes up for falling behind in the development build.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bar-chart\"><code class=\"language-bar-chart\">Version, Time in Seconds\nWebpack 4,58.1\nWebpack 5,51.8</code></pre></div>\n<ul>\n<li>Webpack 4: 58.1 seconds</li>\n<li>Webpack 5: 51.8 seconds</li>\n</ul>\n<p>I was positively impressed by this one, 7 seconds is pretty noticeable.</p>\n<h3>Production Bundle Size</h3>\n<p>The following graph shows the results for the total production bundle size.</p>\n<p>That means, we take into account the total size of all the initial assets (main, styles, polyfills, runtime).</p>\n<p>The total size is <strong>not</strong> gzipped.</p>\n<ul>\n<li>Webpack 4: 833.29kb</li>\n<li>Webpack 5: 830.19kb</li>\n</ul>\n<p>Webpack 5 wins the production race - although maybe not by as much as we'd all hoped!</p>\n<h2>Webpack 5 vs Webpack 4: Large Application benchmark</h2>\n<h3>Development Build Time</h3>\n<ul>\n<li>Webpack 4: 74 seconds</li>\n<li>Webpack 5: 84.5 seconds</li>\n</ul>\n<p>10 seconds longer for starting the development build is unfortunately a lot more.</p>\n<h3>Production Build Time</h3>\n<p>The following graph shows the results for the production build time. The version 5 makes up for falling behind in the development build.</p>\n<ul>\n<li>Webpack 4: 1 minute 37 seconds</li>\n<li>Webpack 5: 1 minute 34 seconds</li>\n</ul>\n<h3>Production Bundle Size</h3>\n<ul>\n<li>Webpack 4: 1.961Mb</li>\n<li>Webpack 5: 1.970Mb</li>\n</ul>\n<hr>\n<p>If you want, do shoot me an email and let me know what your results will look like!</p>\n<p><em>If you enjoyed this article, follow me on <a href=\"https://twitter.com/gc_psk\">Twitter</a></em></p>\n","coverImage":"/assets/images/posts/benchmarking-webpack-5.webp","collection":"angular"},"morePosts":[{"readingTime":"5 min read","live":true,"title":"Principles for creating libraries with Nx and Angular","date":"2021-02-07T00:00:00.322Z","slug":"how-to-organize-nx-modules-with-angular","coverImage":"/assets/images/posts/organize-nx-modules-ngrx.webp","collection":"angular","excerpt":"Working with Nx may be confusing. This article explains how I create Nx libraries and the principles behind my motivations"},{"readingTime":"3 min read","live":true,"title":"Where to put your Angular models?","date":"2020-08-03T00:00:00.322Z","slug":"angular-where-to-put-models","ogImage":{"url":"/assets/images/posts/where-put-angular-models.png"},"coverImage":"/assets/images/posts/where-put-angular-models.webp","collection":"angular","excerpt":"Organizing entities and models in your Angular app may be hard. This article explains where to put your entities and what mistakes to watch out for"},{"readingTime":"5 min read","live":true,"title":"Using the Intersection Observer API with Angular","date":"2020-08-01T00:00:00.322Z","slug":"intersection-observer-with-angular","coverImage":"/assets/images/posts/intersection-observer.webp","collection":"angular","excerpt":"This article shows how to build a directive with Angular that uses the Intersection Observer API to check when an element becomes visible on the page"},{"readingTime":"3 min read","live":true,"title":"Setters vs ngOnChanges: which one is better?","date":"2020-07-30T00:00:00.322Z","slug":"setters-vs-ng-on-changes","coverImage":"/assets/images/posts/setters-vs-on-changes.webp","collection":"angular","excerpt":"Listening to Input changes can be done in different ways. But which one should you use?"},{"readingTime":"3 min read","live":true,"title":"Async Rendering with a single Rx Operator","date":"2020-07-11T00:00:00.322Z","slug":"async-rendering-with-a-single-rx-operator","coverImage":"/assets/images/posts/async-rendering.webp","collection":"angular","excerpt":"Increase your app rendering performance with this simple Rx operator"},{"readingTime":"9 min read","live":true,"title":"Building Scalable Multi-Platform Projects with Angular andÂ Nx","date":"2019-08-25T00:00:00.322Z","slug":"building-scalable-multi-platform-projects-with-angular-and-nx","ogImage":{"url":"https://cdn-images-1.medium.com/max/1600/0*erZf_hQ4V3MLHSyf"},"coverImage":"https://cdn-images-1.medium.com/max/1600/0*erZf_hQ4V3MLHSyf","collection":"angular","excerpt":"Building a scalable multi-platform monorepo application with Angular and Nx"}]},"__N_SSG":true}