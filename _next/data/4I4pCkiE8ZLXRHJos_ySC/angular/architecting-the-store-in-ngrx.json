{"pageProps":{"post":{"readingTime":"10 min read","live":true,"title":"Architecting the Store in NGRX","date":"2019-05-05T00:00:00.322Z","slug":"architecting-the-store-in-ngrx","content":"<p>This is the second article of a series that aims to explain in detail a step-by-step approach to building an Angular application with NGRX.</p>\n<p>In <a href=\"https://medium.com/r/?url=https%3A%2F%2Fitnext.io%2Fstate-management-with-ngrx-introduction-1aae0803e988\">the first article of this series</a>, I wrote a small overview of all the concepts surrounding the NGRX platform.</p>\n<p>If you have never worked with NGRX, or have never done something in-depth with, I’d really recommend you read it.</p>\n<h3>NGRX 8</h3>\n<p>In the previous article, the concepts were explained using the current NGRX version. In order to keep the articles up to date, from now on I will introduce and explain the same concepts using the latest features released in NGRX version 8. There’s some really cool stuff out!</p>\n<p>In particular, we will look at how to create:</p>\n<ul>\n<li>actions with <code>createAction</code></li>\n<li>reducers with <code>createReducer</code></li>\n<li>effects with <code>createEffect</code> (in the next article)</li>\n</ul>\n<h3>What is this article about?</h3>\n<p>In this article instead, we will explore the process of building the entities that make up our store and will be setting up the entity adapter, the actions, and the reducers for each entity.</p>\n<p>As a follow up to one of my previous articles about <a href=\"https://medium.com/r/?url=https%3A%2F%2Fitnext.io%2Fbuilding-an-enterprise-grade-angular-project-structure-f5be32533ba3\">creating a scalable folders structure</a>, we will see an example of creating store modules as service modules imported by our domain module.</p>\n<p>We will build an application that retrieves live crypto prices from <a href=\"https://medium.com/r/?url=https%3A%2F%2Fcoincap.io\">Coincap</a>** and displays them in a customizable dashboard.</p>\n<p>We will call this demo application <em>Cryptofolio,</em> which I hope to publish at the end of this series.</p>\n<p><em>** I explored various websites for fetching live prices and Coincap was by far the easiest and clearer provider. Kudos to the team!</em></p>\n<h2>Setting up Angular and NGRX</h2>\n<p>Let’s see how to set up an Angular application and NGRX.</p>\n<h3>Angular CLI Workspace</h3>\n<p>The first thing you may want to do is to create a new application with Angular CLI and add the routing and style parameters.</p>\n<p><code>ng new &#x3C;app> --routing --style=scss</code></p>\n<h3>NGRX</h3>\n<p>Let’s install all the libraries needed to work with NGRX:</p>\n<p><code>npm i @ngrx/store @ngrx/effects @ngrx/entity</code></p>\n<p>And you’re pretty much all set!</p>\n<h2>Project’s Folder Structure</h2>\n<p>Let’s take a brief look at the project structure I opted for:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*ZTWoVjCnGCJMMNUzxcdcUw.png\" alt=\"\"></p>\n<ul>\n<li><strong>What’s in store</strong>?\nEvery folder in <code>store</code> is an Angular Service Module that simply sets up the NGRX store and effects for the Dashboard Module, which is a domain module where our application’s smart components are placed.</li>\n</ul>\n<p>Let’s take a look at the <code>DashboardStoreModule</code> which is still very simple:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">NgModule</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        StoreModule<span class=\"token punctuation\">.</span><span class=\"token function\">forFeature</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dashboard'</span><span class=\"token punctuation\">,</span> dashboardReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// will import effects</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token comment\">// will import providers</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DashboardStoreModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The <code>DashboardModule</code> will then import <code>DashboardStoreModule</code> and the other store modules:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">NgModule</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    declarations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token comment\">// components</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// store service modules_ DashboardStoreModule,</span>\n        PricesStoreModule<span class=\"token punctuation\">,</span>\n        AssetsStoreModule<span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">// other modules</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    exports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>RouterModule<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DashboardModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li><strong>Where is DashboardModule imported?</strong>\nThe <code>DashboardModule</code> is a lazy-loaded module, so we do not import it from anywhere in our application, but instead, we reference it in our routing module configuration.</li>\n</ul>\n<p>In order to make lazy-loaded feature modules work with NGRX, we need to call the forRoot method, although with empty values, for both the <code>StoreModule</code> and the <code>EffectsModule</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">NgModule</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    declarations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppComponent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// other modules,</span>\n        StoreModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> metaReducers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        EffectsModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    bootstrap<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppComponent<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>Store Entities</h2>\n<p>In order to architect the store, we need to first analyze our data structures.</p>\n<p>As I mentioned above, the application will feature a <strong>dashboard</strong> with <strong>tiles</strong>, and each widget will contain cryptocurrency price tickers. In order to retrieve to display the <strong>prices</strong>, we first need to load the <strong>assets (cryptocurrencies)</strong>.</p>\n<p>We then have 4 different entities that we will use to build our fairly simple store:</p>\n<ul>\n<li>a dashboard that contains tiles (or widgets)</li>\n<li>a list of assets (cryptocurrencies)</li>\n<li>a price (for each asset subscribed)</li>\n</ul>\n<h3>Flat vs Nested Store</h3>\n<p>We have two ways of building the store:</p>\n<ul>\n<li>a nested structure, by directly adding prices to the assets store</li>\n<li>a flat structure, where assets and prices are separated into two separate objects and are only related based on the asset ID</li>\n</ul>\n<p>I personally prefer a flat structure. </p>\n<p><strong>Why?</strong> I have, mistakenly, opted for nested structures in the past and I found the following issues:</p>\n<ul>\n<li>by adding a price directly to an asset, we’d be changing the original interface of the entity</li>\n<li>deeper, nested structures are more difficult to query</li>\n</ul>\n<p>In this simple example, it doesn’t really affect greatly performance or complexity. However, if you plan on building a big application with a complex state, you will quickly see how the selectors and the store complexity creeping up as a result of a nested structure.</p>\n<p>My advice is to keep the store as a flat structure of objects and keep the relations between them using unique values.</p>\n<h2>Dashboard Store</h2>\n<p>For simplicity, we will keep the dashboard fairly minimal. We only need two things from a widget:</p>\n<ul>\n<li>a tile ID</li>\n<li>an asset ID</li>\n</ul>\n<p>In order to build this part of the store, we will use <code>@ngrx/entity</code> .</p>\n<h3>Tile class</h3>\n<p>Let’s first create a class named <code>Tile</code> that represents the model of our state:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tile</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> id <span class=\"token operator\">=</span> <span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> assetId<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Of course, unless a tile is preloaded with an asset ID, the asset ID won’t be defined until the user decides which asset to display, which is why we mark as possibly <code>undefined</code>.</p>\n<h3>Dashboard Adapter</h3>\n<p>We move on and proceed to create the adapter for our state. Our state will simply be an entity state with a collection of tiles:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> dashboardAdapter<span class=\"token operator\">:</span> EntityAdapter<span class=\"token operator\">&#x3C;</span>Tile<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createEntityAdapter</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>\n    Tile\n<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Dashboard Actions</h3>\n<p>In order to create our actions, we will be using the new factory provided by NGRX 8 called <code>createAction</code> .</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> DashboardActionTypes <span class=\"token punctuation\">{</span>\n    AddTile <span class=\"token operator\">=</span> <span class=\"token string\">'[Dashboard] ADD_TILE'</span><span class=\"token punctuation\">,</span>\n    RemoveTile <span class=\"token operator\">=</span> <span class=\"token string\">'[Dashboard] REMOVE_TILE'</span><span class=\"token punctuation\">,</span>\n    UpdateTile <span class=\"token operator\">=</span> <span class=\"token string\">'[Dashboard] UPDATE_TILE'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> addTile <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span>\n    DashboardActionTypes<span class=\"token punctuation\">.</span>AddTile<span class=\"token punctuation\">,</span> <span class=\"token comment\">// action name</span>\n    <span class=\"token generic-function\"><span class=\"token function\">props</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> payload<span class=\"token operator\">:</span> Tile <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// action payload type</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> removeTile <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span>\n    DashboardActionTypes<span class=\"token punctuation\">.</span>RemoveTile<span class=\"token punctuation\">,</span>\n    <span class=\"token generic-function\"><span class=\"token function\">props</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> payload<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> updateTile <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span>\n    DashboardActionTypes<span class=\"token punctuation\">.</span>UpdateTile<span class=\"token punctuation\">,</span>\n    <span class=\"token generic-function\"><span class=\"token function\">props</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> payload<span class=\"token operator\">:</span> Tile <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>To summarise the code, we have created 3 actions:</p>\n<ul>\n<li><code>addTile</code> whose payload is a <code>Tile</code> class</li>\n<li><code>removeTile</code> which only receives a string as payload, which is the ID</li>\n<li><code>updateTile</code> which also receives a <code>Tile</code> class</li>\n</ul>\n<p>Notice that <code>props</code> is a function that gets imported from <code>@ngrx/store</code> and gets called as a second argument.</p>\n<h3>Dashboard Reducer</h3>\n<p>In order to build the dashboard reducer, we will use the new factory method called <code>createReducer</code> that takes the following arguments:</p>\n<ul>\n<li>the first argument is the initial state, that we created using the entity adapter</li>\n<li>all the following arguments are the reducer functions for each action, that we define using the function <code>on</code> also imported from <code>@ngrx/store</code> </li>\n<li>we use the entity adapter methods in order to add, remove and update the dashboard’s tiles</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// we create the state by adding an empty tile_</span>\n\n<span class=\"token keyword\">const</span> emptyTile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> dashboardAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span>\n    emptyTile<span class=\"token punctuation\">,</span>\n    dashboardAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">getInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> dashboardReducerFn <span class=\"token operator\">=</span> <span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span>\n    initialState<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">on</span><span class=\"token punctuation\">(</span>addTile<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> dashboardAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">on</span><span class=\"token punctuation\">(</span>removeTile<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> dashboardAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">removeOne</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">on</span><span class=\"token punctuation\">(</span>updateTile<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> payload<span class=\"token operator\">:</span> Tile <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> dashboardAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">updateOne</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> payload<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> changes<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> assetId<span class=\"token operator\">:</span> payload<span class=\"token punctuation\">.</span>assetId <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            state\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">dashboardReducer</span><span class=\"token punctuation\">(</span>\n    state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span>\n    action<span class=\"token operator\">:</span> Action\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> EntityState<span class=\"token operator\">&#x3C;</span>Tile<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">dashboardReducerFn</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>We import the reducer in the <code>DashboardStoreModule</code> :</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">NgModule</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n         StoreModule<span class=\"token punctuation\">.</span><span class=\"token function\">forFeature</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dashboard'</span><span class=\"token punctuation\">,</span> dashboardReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// more</span>\n</code></pre></div>\n<h2>Assets Store</h2>\n<p>As we are going to receive the list of assets using Coincap’s API, we’re just going to replicate their interface:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Asset</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    rank<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">symbol</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    supply<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    maxSupply<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    marketCapUsd<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    volumeUsd24Hr<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    priceUsd<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    changePercent24Hr<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    vwap24Hr<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Assets Actions</h3>\n<p>In order to fetch the assets, we will need to perform an HTTP request to Coincap’s API. The HTTP action will be going through the effect method we’re going to define in the next article. </p>\n<p>What’s important to notice here is the way I’ve broken up the assets’ <em>actions</em>:</p>\n<ul>\n<li><strong>getAssetsRequestStarted:</strong>\naction that gets dispatched when the request starts</li>\n<li><strong>getAssetsRequestSuccess:</strong>\naction that gets dispatched when the request succeeded (no error actions in this case for simplicity, but you should always create them)</li>\n<li><strong>addAssets:</strong>\naction that will only be used by the reducer, which is a command to add assets to the store</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> AssetsActionsTypes <span class=\"token punctuation\">{</span>\n    GetAssetsRequestStarted <span class=\"token operator\">=</span> <span class=\"token string\">'[Assets API] GET_ASSETS_REQUEST_STARTED'</span><span class=\"token punctuation\">,</span>\n    GetAssetsRequestSuccess <span class=\"token operator\">=</span> <span class=\"token string\">'[Assets API] GET_ASSETS_REQUEST_SUCCESS'</span><span class=\"token punctuation\">,</span>\n    AddAssets <span class=\"token operator\">=</span> <span class=\"token string\">'[Assets] ADD_ASSETS'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getAssetsRequestStarted <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span>\n    AssetsActionsTypes<span class=\"token punctuation\">.</span>GetAssetsRequestStarted<span class=\"token punctuation\">,</span>\n    <span class=\"token generic-function\"><span class=\"token function\">props</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> payload<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getAssetsRequestSuccess <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span>\n    AssetsActionsTypes<span class=\"token punctuation\">.</span>GetAssetsRequestSuccess<span class=\"token punctuation\">,</span>\n    <span class=\"token generic-function\"><span class=\"token function\">props</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> payload<span class=\"token operator\">:</span> Asset<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> addAssets <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span>\n    AssetsActionsTypes<span class=\"token punctuation\">.</span>AddAssets<span class=\"token punctuation\">,</span>\n    <span class=\"token generic-function\"><span class=\"token function\">props</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> payload<span class=\"token operator\">:</span> Asset<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Assets Reducer and Adapter</h3>\n<p>The only reducer function reacting to the <em>addAssets</em> action will simply add all the assets to the store once they get fetched.</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// adapter</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> assetsAdapter<span class=\"token operator\">:</span> EntityAdapter<span class=\"token operator\">&#x3C;</span>Asset<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createEntityAdapter</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>Asset<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">selectId</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>asset<span class=\"token operator\">:</span> Asset<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> asset<span class=\"token punctuation\">.</span>id\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// reducer</span>\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> assetsAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">getInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> assetsReducerFn <span class=\"token operator\">=</span> <span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span>\n    initialState<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">on</span><span class=\"token punctuation\">(</span>addAssets<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> assetsAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">assetsReducer</span><span class=\"token punctuation\">(</span>\n    state<span class=\"token operator\">:</span> EntityState<span class=\"token operator\">&#x3C;</span>Asset<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    action<span class=\"token operator\">:</span> Action\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">assetsReducerFn</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>Prices Store</h2>\n<p>The prices returned by Coincap’s API are very simple and are just objects with the key of an asset and its relative price. As such, we have a very simple store for prices.</p>\n<h3>Prices Actions</h3>\n<p>We will be creating 3 actions:</p>\n<ul>\n<li><strong>addPrice</strong>:\naction for updating the store once a price is received</li>\n<li><strong>createPriceSubscription</strong>:\naction for creating a subscription</li>\n<li><strong>closePriceSubscription</strong>:\naction for closing a subscription</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> PricesActionsTypes <span class=\"token punctuation\">{</span>\n    AddPrice <span class=\"token operator\">=</span> <span class=\"token string\">'[Prices Store] ADD_PRICE'</span><span class=\"token punctuation\">,</span>\n    CreatePriceSubscription <span class=\"token operator\">=</span> <span class=\"token string\">'[Prices Stream] CREATE_PRICE_SUBSCRIPTION'</span><span class=\"token punctuation\">,</span>\n    ClosePriceSubscription <span class=\"token operator\">=</span> <span class=\"token string\">'[Prices Stream] CLOSE_PRICE_SUBSCRIPTION'</span><span class=\"token punctuation\">,</span>\n    PriceReceived <span class=\"token operator\">=</span> <span class=\"token string\">'[Prices Stream] PRICE_RECEIVED'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> addPrice <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span>\n    PricesActionsTypes<span class=\"token punctuation\">.</span>AddPrice<span class=\"token punctuation\">,</span>\n    <span class=\"token generic-function\"><span class=\"token function\">props</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> payload<span class=\"token operator\">:</span> Price <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> createPriceSubscription <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span>\n    PricesActionsTypes<span class=\"token punctuation\">.</span>CreatePriceSubscription<span class=\"token punctuation\">,</span>\n    <span class=\"token generic-function\"><span class=\"token function\">props</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> payload<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> closePriceSubscription <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span>\n    PricesActionsTypes<span class=\"token punctuation\">.</span>ClosePriceSubscription\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> priceReceived <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span>\n    PricesActionsTypes<span class=\"token punctuation\">.</span>PriceReceived<span class=\"token punctuation\">,</span>\n    <span class=\"token generic-function\"><span class=\"token function\">props</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> payload<span class=\"token operator\">:</span> Price <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Prices Reducer</h3>\n<p>As the prices returned by Coincap’s real-time API are simply a key with the asset and its price, we really don’t need to do much with the entity framework.</p>\n<p>Indeed, for each price received, we simply set the key with the asset ID in our store and its price by spreading the price objects with the new payload.</p>\n<p>If it doesn’t exist, it gets created, otherwise, it gets overwritten with its newest value.</p>\n<p>Imagine our state is:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">{ &#x26;quot;bitcoin&#x26;quot;: &#x26;quot;some price&#x26;quot; };</code></pre></div>\n<p>And our payload from the WebSocket’s stream is:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">{ &#x26;quot;ethereum&#x26;quot;: &#x26;quot;another price&#x26;quot; }</code></pre></div>\n<p>This will simply become:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">{\n    &#x26;quot;bitcoin&#x26;quot;: &#x26;quot;some price&#x26;quot;,\n    &#x26;quot;ethereum&#x26;quot;: &#x26;quot;another price&#x26;quot;\n};</code></pre></div>\n<p>And here is the code with one simple action:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> initialState<span class=\"token operator\">:</span> PriceState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pricesReducerFn <span class=\"token operator\">=</span> <span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span>\n    initialState<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">on</span><span class=\"token punctuation\">(</span>addPrice<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pricesReducer</span><span class=\"token punctuation\">(</span>\n    state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span>\n    action<span class=\"token operator\">:</span> Action\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> PriceState <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">pricesReducerFn</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>An overview of the Store</h2>\n<p>Let’s take a look at the store with some data:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*3U_DkFj1rvw_cCxWyAph4g.png\" alt=\"\"></p>\n<p>Type caption for image (optional)</p>\n<ul>\n<li>We have fetched 5 assets</li>\n<li>We have one, empty tile</li>\n<li>We have no prices, as the tile has not been subscribed to an asset</li>\n</ul>\n<h2>Takeaways</h2>\n<ul>\n<li>Lay out your application entities and analyze how they relate between each other in order to have a clear understanding of what the store’s structure could look like</li>\n<li>Use NGRX Entity! It’s a great tool to reduce the boilerplate of your reducers</li>\n<li>Separate your UI modules from the store using Store Service Modules</li>\n<li>Prefer a flat structure over a nested one</li>\n<li>Keep actions clear and granular, distinguish between commands and events</li>\n</ul>\n<hr>\n<p>In the next article, we're going to build the effects that are responsible for fetching assets and prices from Coincap’s API.</p>\n<p>Read it at the link below:\n<a href=\"https://medium.com/r/?url=https%3A%2F%2Fitnext.io%2Fbuilding-side-effects-in-ngrx-deb0d856096d\">Building Side Effects in NGRX</a></p>\n<hr>\n<p>Hope you enjoyed the article and send me a message if you agree, disagree, or would do anything differently!</p>\n","ogImage":{"url":"https://cdn-images-1.medium.com/max/1600/1*CYmnppaZkh7OcF1IRH15jQ.png"},"coverImage":"https://cdn-images-1.medium.com/max/1600/1*CYmnppaZkh7OcF1IRH15jQ.png","collection":"angular"},"morePosts":[{"readingTime":"2 min read","live":true,"title":"Benchmarking Angular 12 with Webpack 5","date":"2021-05-14T00:00:00.322Z","slug":"webpack-5-angular12","coverImage":"/assets/images/posts/benchmarking-webpack-5.webp","collection":"angular","excerpt":"Angular 12 has been released and with it the much awaited Webpack 5 upgrade. In this post I benchmarked the bundle-size and compilation speed against the previous version"},{"readingTime":"5 min read","live":true,"title":"Principles for creating libraries with Nx and Angular","date":"2021-02-07T00:00:00.322Z","slug":"how-to-organize-nx-modules-with-angular","coverImage":"/assets/images/posts/organize-nx-modules-ngrx.webp","collection":"angular","excerpt":"Working with Nx may be confusing. This article explains how I create Nx libraries and the principles behind my motivations"},{"readingTime":"3 min read","live":true,"title":"Where to put your Angular models?","date":"2020-08-03T00:00:00.322Z","slug":"angular-where-to-put-models","ogImage":{"url":"/assets/images/posts/where-put-angular-models.png"},"coverImage":"/assets/images/posts/where-put-angular-models.webp","collection":"angular","excerpt":"Organizing entities and models in your Angular app may be hard. This article explains where to put your entities and what mistakes to watch out for"},{"readingTime":"5 min read","live":true,"title":"Using the Intersection Observer API with Angular","date":"2020-08-01T00:00:00.322Z","slug":"intersection-observer-with-angular","coverImage":"/assets/images/posts/intersection-observer.webp","collection":"angular","excerpt":"This article shows how to build a directive with Angular that uses the Intersection Observer API to check when an element becomes visible on the page"},{"readingTime":"3 min read","live":true,"title":"Setters vs ngOnChanges: which one is better?","date":"2020-07-30T00:00:00.322Z","slug":"setters-vs-ng-on-changes","coverImage":"/assets/images/posts/setters-vs-on-changes.webp","collection":"angular","excerpt":"Listening to Input changes can be done in different ways. But which one should you use?"},{"readingTime":"3 min read","live":true,"title":"Async Rendering with a single Rx Operator","date":"2020-07-11T00:00:00.322Z","slug":"async-rendering-with-a-single-rx-operator","coverImage":"/assets/images/posts/async-rendering.webp","collection":"angular","excerpt":"Increase your app rendering performance with this simple Rx operator"}]},"__N_SSG":true}