{"pageProps":{"post":{"readingTime":"9 min read","live":true,"title":"Building Scalable Multi-Platform Projects with Angular and Nx","date":"2019-08-25T00:00:00.322Z","slug":"building-scalable-multi-platform-projects-with-angular-and-nx","content":"<p>This article is a follow-up from my previous thought that I wrote on <a href=\"https://medium.com/r/?url=https%3A%2F%2Fitnext.io%2Fbuilding-an-enterprise-grade-angular-project-structure-f5be32533ba3%3Fsource%3D---------19------------------\">building enterprise-scale projects in Angular</a>.</p>\n<p>In the previous article, monorepos and Nx were mentioned but I had not yet had the pleasure to try them out. It was clear, that although the structure mentioned was decent enough for a single project targeting a single platform, it would have fallen short for sharing code with other projects.</p>\n<h3>Monorepos to the rescue</h3>\n<p>In the past few months, I have been working on multiple projects — some with a high degree of complexity; one of my projects required me to <strong>write an application that needs to be able to run on multiple platforms</strong>, which is one of the reasons why I felt the previous article needed an update:</p>\n<ul>\n<li>I want to ship a single project for multiple devices (mobile, desktop) sharing as much code as possible</li>\n<li>I want my project’s <em>API</em> to share models with the client applications, in the same workspace</li>\n<li>I want <em>SSR</em> (Server-Side Rendering) because, well, it’s 2019</li>\n</ul>\n<h3>What this article is about</h3>\n<p>Let’s face it - Building scalable projects is hard. I’m sure you had a similar conversation at least once in your career: </p>\n<ul>\n<li><strong>You</strong>: Hey, where should we place these functions? It’s getting messy 🤔</li>\n<li><strong>Colleague</strong>: Oh, just create (yet another) folder “utils” and put it there 😐</li>\n<li><strong>You</strong>: Okay… 🙄</li>\n</ul>\n<p>In the first part of this article, <strong>we’re going to discuss how Nx helps structure your applications</strong>, and how we can leverage it to build insanely scalable projects.</p>\n<p>In the second part, we take a more hands-on approach: <strong>a step-by-step guide on setting up an Angular application</strong> that is server-side rendered with NestJS, sharing code with a mobile Ionic application. It took some time for me to get it all right, so I want to help you (and future me) to do it effortlessly.</p>\n<h2>Tech Stack</h2>\n<p>In order to do this, I will be using the following technologies:</p>\n<ul>\n<li><a href=\"https://medium.com/r/?url=https%3A%2F%2Fnx.dev%2Fangular\"><strong>Nx Workspaces</strong></a>: without a doubt the best tool to manage monorepos with <em>Angular</em> projects. <em>Nx</em> augments the CLI and allows us to easily build multiple apps in the same repository with ease</li>\n<li><strong>Ionic/xplat:</strong> Ionic is an awesome mobile framework for building cross-platform apps. Thanks to <a href=\"https://medium.com/r/?url=https%3A%2F%2Fnstudio.io%2Fxplat\">xPlat</a>, we will be able to easily create an Ionic app that integrates with <em>Nx</em></li>\n<li><a href=\"https://medium.com/r/?url=https%3A%2F%2Fnestjs.com%2F\"><strong>NestJS</strong></a>: a progressive <em>NodeJS</em> framework inspired by <em>Angular</em></li>\n</ul>\n<h2>Introduction to Nx Workspaces</h2>\n<p>There are two reasons why you may want to use <em>Nx</em>: </p>\n<ul>\n<li>you work with multiple teams and multiple projects that can share code together</li>\n<li>or, you are obsessed with code organization like I am!</li>\n</ul>\n<p>Jokes aside, <em>Nx</em> is a wonderful tool that <strong>helps to organize code in a scalable fashion</strong>; even if you’re not planning on writing the next Facebook, the goodies provided by the <a href=\"https://medium.com/r/?url=https%3A%2F%2Fnrwl.io\">Nrwl</a> team are enough of a reason for me to kickstart my projects with <em>Nx</em>.</p>\n<h3>Applications</h3>\n<p>Nx is a tool to create extensible mono-repository projects. If you have used the Angular CLI, <em>Nx</em> will look familiar, but with some differences.</p>\n<p>Every application will be created within a folder called <code>/apps</code>, including your e2e tests project. For example, you may create apps written in <em>Angular</em>, <em>React</em>, <em>Ionic</em>, <em>Nativescript</em>, <em>Express</em>, <em>NestJS</em>, etc.</p>\n<p>Or, <strong>all of them at once</strong>, sharing code!</p>\n<h3>Libraries</h3>\n<p>Your libraries, instead, will be placed within the folder <code>/libs</code>.</p>\n<p>What exactly are they, though? Of course, small reusable pieces of code than any application within our workspace can use; but as <em>Nx</em> also says, <strong>libraries are smaller units of code with a well-defined API</strong>.</p>\n<p>Libraries are ideal for sharing <strong>Angular Entities</strong> and <strong>Typescript Entities.</strong> For example:</p>\n<ul>\n<li>It is likely that you will want to share the same interfaces between front-end and back-end. Creating a lib called <code>models</code> will allow all your applications to access the same models without having to rewrite them twice</li>\n<li>Your applications will likely make use of lots of components, pipes, directives, and services that will be common between all your applications: tests, mobile, front-office, back-office, etc.</li>\n</ul>\n<h3>Anatomy of an Nx Workspace</h3>\n<p>The project structure below is the starting point of any Nx project:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;workspace name&#x26;gt;/\n├── apps/\n│   ├── myapp/\n│   │   ├── src/\n│   │   │   ├── app/\n│   │   │   ├── assets/\n│   │   │   ├── environments/\n│   │   │   ├── favicon.ico\n│   │   │   ├── index.html\n│   │   │   ├── main.ts\n│   │   │   ├── polyfills.ts\n│   │   │   ├── styles.scss\n│   │   │   └── test.ts\n│   │   ├── browserslist\n│   │   ├── jest.config.js\n│   │   ├── tsconfig.app.json\n│   │   ├── tsconfig.json\n│   │   ├── tsconfig.spec.json\n│   │   └── tslint.json\n│   └── myapp-e2e/\n│       ├── src/\n│       │   ├── fixtures/\n│       │   │   └── example.json\n│       │   ├── integration/\n│       │   │   └── app.spec.ts\n│       │   ├── plugins/\n│       │   │   └── index.ts\n│       │   └── support/\n│       │       ├── app.po.ts\n│       │       ├── commands.ts\n│       │       └── index.ts\n│       ├── cypress.json\n│       ├── tsconfig.e2e.json\n│       ├── tsconfig.json\n│       └── tslint.json\n├── libs/\n├── tools/\n├── README.md\n├── angular.json\n├── nx.json\n├── package.json\n├── tsconfig.json\n└── tslint.json</code></pre></div>\n<h2>Working with Nx: Creating Applications</h2>\n<p>Now that I (may have) convinced you to use <em>Nx</em> and <em>Angular</em>, I am going to show you, step-by-step, how to set up a dream tech-stack that I described above.</p>\n<h3>Creating a new Nx Workspace with Angular and Nest</h3>\n<p>We will start with a few commands that will kickstart our project structure thanks to <em>Nx</em> until we will have a working monorepo project with the latest Angular version and <em>NestJS</em> as <em>NodeJs</em> framework.</p>\n<p>The following command will generate a working monorepo project with the latest Angular version and NestJS as Server-Side Node framework:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2400/1*uhEP6aleLqbeyXYuptXvWg.png\" alt=\"\"></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ new workspace --preset=&#x26;quot;angular-nest&#x26;quot; --appName=&#x26;quot;nx-angular-ssr&#x26;quot; --style=&#x26;quot;scss&#x26;quot; --collection=[@nrwl/workspace](https://medium.com/r/?url=http%3A%2F%2Ftwitter.com%2Fnrwl%2Fworkspace &#x26;quot;Twitter profile for @nrwl/workspace&#x26;quot;)</code></pre></div>\n<p>The command line will prompt what style preprocessor you like, I’d recommend choosing <em>SCSS</em>. \nSit tight, it will take a while. Nx will create a workspace in a folder named <code>workspace</code>.</p>\n<h2>API and Server-Side Rendering</h2>\n<p>NestJS provides an awesome CLI plugin in order to automatically prepare the application for server-side rendering.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*4A3J6f6vjWzOPYGtfijqKQ.png\" alt=\"\"></p>\n<p>Run the following command in the Nx workspace:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ ng add @nestjs/ng-universal</code></pre></div>\n<p>When the command line prompts for the application name, enter <code>nx-angular-ssr</code>. The plugin will create a folder named <code>server</code>, but we already have a server application, so we will ignore that (that means, you can delete it). As expected, we need to do some changes.</p>\n<h3>Importing Angular’s Universal Module</h3>\n<p>The first thing to do is to import Angular Universal in our Nest application: to do that, we open the file <code>apps/api/app/app.module.ts</code> and we paste the following code to the imports array of the <code>AppModule</code> class:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\">AngularUniversalModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  viewsPath<span class=\"token operator\">:</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dist/browser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  bundle<span class=\"token operator\">:</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../server/main'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  liveReload<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Of course, don’t forget to import <code>AngularUniversalModule</code> and <code>join</code>.</p>\n<h3>Fixing the environments` path</h3>\n<p>We need to apply a small change to the <code>angular.json</code> configuration. Unfortunately, the path to the environments files is incorrect, so we patch it according to the real path, which is <code>apps/nx-angular-ssr/src/environments</code> as shown in the image below:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*BJqLeuogbRK5Er5qzy6Tug.png\" alt=\"\"></p>\n<h3>Adjust Webpack’s configuration</h3>\n<p>The last thing we need to adjust is the server’s Webpack configuration. Open the file <code>webpack.server.config</code> and replace the content with the following snippet:</p>\n<p>And at this point, it’s all done! We only need to build and run our application.</p>\n<h3>Run the Server-Rendered Angular app Wih Nest JS</h3>\n<p>The NestJS plugin added some useful command to build and run the application. We first need to build the SSR application by running:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ npm run build:ssr</code></pre></div>\n<p>And then, we’re able to serve it:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ npm run serve:ssr</code></pre></div>\n<p>Open your browser at <code>http://localhost:3333</code> and there is your server-rendered <em>Angular</em> application powered by <em>NestJS</em>!</p>\n<h2>Adding an Ionic application with xPlat</h2>\n<p><a href=\"https://medium.com/r/?url=https%3A%2F%2Fnstudio.io%2Fxplat%2Fgetting-started%2Fgetting-started\">xPlat</a> is a tool that extends Nx Workspaces with a set of generators that help kickstart projects written in <em>Electron</em>, <em>NativeScript</em>, and <em>Ionic</em>. In our case, we want to use it for generating a mobile application written using Ionic.</p>\n<h3>Generating an Ionic app</h3>\n<p>In order to generate applications using xPlat, we need to install it first. Run this CLI command in your workspace root:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">ng add @nstudio/xplat</code></pre></div>\n<p>You will be prompted what sort of application you want to use:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">[] Electron\n[] NativeScript\n[-] Ionic</code></pre></div>\n<p>In our case, we will choose Ionic for Angular projects (which will be asked in the next step).</p>\n<p>We will then generate our application using the following command:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ ng generate app</code></pre></div>\n<p>The CLI will prompt us for some configuration. Here are my choices below:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*vUwvmpVe47N9wcoIV-ehAA.png\" alt=\"\"></p>\n<p>When the CLI asks for the folder where the app will be located, enter an empty space, and it will be automatically placed within <code>apps</code>.</p>\n<h3>Adding Capacitor</h3>\n<p><em>Capacitor</em> is <em>Ionic’s</em> framework to build cross-platform applications. For some reason, it did not automatically get added, so we install it manually:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ npm i --save-dev @capacitor/core</code></pre></div>\n<h3>Running the app</h3>\n<p>We will run the application in the same way we run any other CLI application. The only thing to notice is that <em>xPlat</em> prefixed the name of our application with the prefix <code>ionic-</code>.</p>\n<p>Run the following command in order to run the Ionic app in the browser:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ ng serve ionic-mobile</code></pre></div>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*nrXO1F4fbIGGgTP_95RsEA.png\" alt=\"\"></p>\n<h3>Sharing Code</h3>\n<p>Now that the app is set-up and running, we want to start sharing code between our applications. An example of ideal code-sharing would be our state-management modules or a UI component library.</p>\n<p>As we said earlier, all the code that we plan to share across the applications will be added as a library under the folder <code>libs</code>. The application generated by xPlat already sets up the paths for us to import libraries using virtual paths, but I wasn’t too happy with it.</p>\n<p>The default virtual path in the tsconfig.json is set-up as follows:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;quot;@workspace/*&#x26;quot;: [&#x26;quot;../../libs/*&#x26;quot;]</code></pre></div>\n<p>Unfortunately, this makes us have to also write the whole path to the <code>src/lib/index.ts</code> barrel file, which is inconvenient. As a result, I decided to add the following paths in order to access the UI library more quickly:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;quot;paths&#x26;quot;: {\n    ...other paths,\n    &#x26;quot;@workspace/ui&#x26;quot;: [&#x26;quot;../../libs/ui/src/index.ts&#x26;quot;],\n    &#x26;quot;@workspace/ui/*&#x26;quot;: [&#x26;quot;../../libs/ui/src/*&#x26;quot;]\n}</code></pre></div>\n<p>Once that’s done, I open the file <code>home.module.ts</code> in our mobile application and import the UI library’s module:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">// other imports...\nimport { UiModule } from &#x26;#39;@workspace/ui&#x26;#39;;\n\n@NgModule({\n  imports: [SharedModule, HomeRoutingModule, UiModule],\n  declarations: [HomeComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class HomeModule {}</code></pre></div>\n<p>Our home route in the Ionic application has now access to the components developed in parallel with the other platforms!</p>\n<h3>Not just Ionic</h3>\n<p>As we said, <em>xPlat</em> also allows you to build for other platforms, such as <em>NativeScript</em> and <em>Electron</em> (and who know what else in the future!). </p>\n<p>As a result, the code could be shared between even more applications.</p>\n<h2>Final Words</h2>\n<p>Building a large project, able to share code and scale across multiple teams is surely no easy feat.</p>\n<p>Monorepo architectures allow us to work in parallel and easily share code, and Nx makes managing the monorepo a much easier job than it would be otherwise.</p>\n<p>This article showed you an example of how we can achieve a dream tech-stack with awesome technologies such as <em>NestJS</em> and <em>Ionic</em>, accelerate processes, maximize code reusability and organize a scalable project structure thanks to <em>Nx.</em></p>\n<h3>References and Related Reading</h3>\n<ul>\n<li><a href=\"https://medium.com/r/?url=https%3A%2F%2Fnx.dev%2Fangular\">Nx</a></li>\n<li><a href=\"https://medium.com/r/?url=https%3A%2F%2Fnstudio.io%2Fxplat\">XPlat</a></li>\n<li><a href=\"https://medium.com/r/?url=https%3A%2F%2Fblog.nrwl.io%2Fmisconceptions-about-monorepos-monorepo-monolith-df1250d4b03c\">Misconceptions about Monorepos: Monorepo != Monolith</a> by Victor Savkin</li>\n</ul>\n<p>If you need any clarifications, or if you think something is unclear or wrong, do please leave a comment!</p>\n","ogImage":{"url":"https://cdn-images-1.medium.com/max/1600/0*erZf_hQ4V3MLHSyf"},"coverImage":"https://cdn-images-1.medium.com/max/1600/0*erZf_hQ4V3MLHSyf","collection":"angular"},"morePosts":[{"readingTime":"2 min read","live":true,"title":"Benchmarking Angular 12 with Webpack 5","date":"2021-05-14T00:00:00.322Z","slug":"webpack-5-angular12","coverImage":"/assets/images/posts/benchmarking-webpack-5.webp","collection":"angular","excerpt":"Angular 12 has been released and with it the much awaited Webpack 5 upgrade. In this post I benchmarked the bundle-size and compilation speed against the previous version"},{"readingTime":"5 min read","live":true,"title":"Principles for creating libraries with Nx and Angular","date":"2021-02-07T00:00:00.322Z","slug":"how-to-organize-nx-modules-with-angular","coverImage":"/assets/images/posts/organize-nx-modules-ngrx.webp","collection":"angular","excerpt":"Working with Nx may be confusing. This article explains how I create Nx libraries and the principles behind my motivations"},{"readingTime":"3 min read","live":true,"title":"Where to put your Angular models?","date":"2020-08-03T00:00:00.322Z","slug":"angular-where-to-put-models","ogImage":{"url":"/assets/images/posts/where-put-angular-models.png"},"coverImage":"/assets/images/posts/where-put-angular-models.webp","collection":"angular","excerpt":"Organizing entities and models in your Angular app may be hard. This article explains where to put your entities and what mistakes to watch out for"},{"readingTime":"5 min read","live":true,"title":"Using the Intersection Observer API with Angular","date":"2020-08-01T00:00:00.322Z","slug":"intersection-observer-with-angular","coverImage":"/assets/images/posts/intersection-observer.webp","collection":"angular","excerpt":"This article shows how to build a directive with Angular that uses the Intersection Observer API to check when an element becomes visible on the page"},{"readingTime":"3 min read","live":true,"title":"Setters vs ngOnChanges: which one is better?","date":"2020-07-30T00:00:00.322Z","slug":"setters-vs-ng-on-changes","coverImage":"/assets/images/posts/setters-vs-on-changes.webp","collection":"angular","excerpt":"Listening to Input changes can be done in different ways. But which one should you use?"},{"readingTime":"3 min read","live":true,"title":"Async Rendering with a single Rx Operator","date":"2020-07-11T00:00:00.322Z","slug":"async-rendering-with-a-single-rx-operator","coverImage":"/assets/images/posts/async-rendering.webp","collection":"angular","excerpt":"Increase your app rendering performance with this simple Rx operator"}]},"__N_SSG":true}