{"pageProps":{"post":{"live":true,"readingTime":"5 min read","title":"Enforce your team coding style with Prettier and TsLint","date":"2019-04-17T00:00:00.322Z","slug":"enforce-your-team-style-with-prettier-and-tslint","coverImage":"/assets/images/posts/enforce-team-coding-style.gif","collection":{"name":"Typescript","primaryColor":"#358ef1","primaryColorLight":"#358ef175","contrastColor":"#fff","logo":"/assets/images/collections/typescript.png"},"excerpt":"Using TsLint to enforce your team coding style","content":"\nA project’s coding style is the first and most noticeable trait that a new senior hire will be looking at while browsing the codebase for the first time. \n\nOn the surface, that’s because it is probably the simplest way to evaluate a codebase at a glance. On a deeper level, that’s because good programmers just simply love tidiness, simplicity and coherence. These three simple aspects will make or break your hire first impression with your project and company as a whole.\n\nObviously, while attracting people who will be excited to work on your codebase is important, keeping your codebase clean and coherent goes a long way for a project’s overall longevity and success. \n\nThe list of reasons of why having a clean and consistent codebase is paramount is simply fairly known and documented, but to me these are the most important ones:\n\n*   working with a familiar codebase means working faster and better\n*   having a consistent codebase helps new hires get up to speed faster\n*   having a consistent codebase makes refactoring and maintenance easier\n*   …\n\n## Developer Experience (DX) Matters 🤓\n\nNever more than today, developers can enjoy an unparalleled developer experience. Especially in the Front End world, the improvements to DX have been too important to ignore: static checking, conditional typing, smarter IDEs, linters, automated testing frameworks, and so on. \n\nIf there is something that makes a team inefficient and unmotivated, that is definitely a bad DX.\n\nIt is an architect/manager’s job to make DX a critical part of the development processes of a team for a number of reasons:\n\n*   keep technology stack clean and performant for the current team, and new hires\n*   keep team happy and motivated. Your team’s morale is as important as the quality of your product\n\nWhile a good DX is a broad and vast topic, what I what to talk about in this article is one of the pillars of good code: coding guidelines. \n\nWhile community-wide guidelines are important and serve as a standard indicator of best practices — I tend to give more importance to what a team thinks of a certain style, and not the community as a whole. The team always comes first — but in the same time every decision taken against community standards should be logical and documented. A (good) new hire will eventually question such decisions.\n\nTo me, **coding guidelines are a set of rules every member of the team agrees to follow and respect**. As this is certainly most important in the beginning of a project, the tools available today, like Prettier and TsLint, allow a project to be conformant to a coding guideline at any stage.\n\n## Prettier + TsLint = tidiness, simplicity & coherence\n\nAs I pointed out before, tidiness, simplicity and coherence are 3 things every developer cares about. How do Prettier and TsLint help with that?\n\n*   Tidiness: thanks to TsLint rules (or EsLint if you use JS), which are ideally agreed by all your team, developers will be warned when a rule is violated\n*   Simplicity: by adding Prettier as a pre-commit hook, you remove the responsibility of taking care of certain formatting details from developers, who can instead focus on the stuff that matters\n*   Coherence: thanks to automatic formatting, all the codebase looks the same, no matter who writes it\n\nAs nowadays most teams use _PR_ and code reviews, another important thing to mention is that, in my experience, most of the comments often regard code-style rather than actual potential mistakes or bugs. This is frustrating, because not only it is time lost to review it, but also to fix it.\n\nThe issue is, code reviewers **should** point those mistakes out, but ideally they **shouldn’t have to**.\n\nAnd the only way to avoid time lost on trivial matters, is to having an effortless set-up that takes almost all formatting responsibility from the committers.\n\n### How to set up Prettier and TsLint ⚙️\n\nSetting up Prettier and TsLint is quite straightforward. First of all, we install these two packages:\n\nnpm install --save-dev prettier tslint-config-prettier\n\nIf you kickstarted your project using your framework’s CLI, then you will likely already have created a _tslint.json_ file in your project. If you don’t, create it and simply add the following content:\n\n```json\n{\n  \"extends\": [\"tslint:recommended\", \"tslint-config-prettier\"]\n}\n```\n\nIf you instead have do have it already, simply “tslint-config-prettier” to the _extends_ property just like in the above snippet. This is needed in order to make Prettier and TsLint work nicely together.\n\nAfter that — it’s time to setup Prettier. In order to create the configuration file, we can use various file formats such as _JSON_, _JS_, _YAML_ or _TOML_ — but I like _YAML_, so go ahead and create a file in your root (i.e. where your _package.json_ is located) and name it _.prettierrc. _\n\nHere is a simple _.prettierrc_ file with options I tend to use:\n\n```yaml\ntabWidth: 4\nsingleQuote: _true\n_bracketSpacing: _true\n_printWidth: 80\n```\n\nFor the list of all the available options, head to [Prettier’s website](https://medium.com/r/?url=https%3A%2F%2Fprettier.io%2Fdocs%2Fen%2Foptions.html).\n\nThis is great, but how exactly is this simple? It’s not, so let’s simplify this for your team.\n\nYou have 3 options:\n\n*   create a [pre-commit hook](https://medium.com/r/?url=https%3A%2F%2Fprettier.io%2Fdocs%2Fen%2Fprecommit.html) as described on Prettier’s website\n*   set up your IDE (if you use WebStorm [use a watcher](https://medium.com/r/?url=https%3A%2F%2Fprettier.io%2Fdocs%2Fen%2Fwebstorm.html), or if you use VSCode [use a plugin](https://medium.com/r/?url=https%3A%2F%2Fprettier.io%2Fdocs%2Fen%2Feditors.html))\n*   … something even better, use both! It’s a great feeling for a developer to have the feeling of always committing something correct, but also to have instant feedback of a clean, formatted file.\n\n### Takeaways ⭐️\n\n*   DX is important — make sure your team is happy\n*   Coding style is important — make sure your whole team agrees with it\n*   Use Prettier and TsLint (or EsLint) for working better and faster\n","tags":["typescript"]},"content":{"compiledSource":"var c=Object.defineProperty,d=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var p=(t,a,n)=>a in t?c(t,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[a]=n,e=(t,a)=>{for(var n in a||(a={}))i.call(a,n)&&p(t,n,a[n]);if(s)for(var n of s(a))r.call(a,n)&&p(t,n,a[n]);return t},l=(t,a)=>d(t,u(a));var m=(t,a)=>{var n={};for(var o in t)i.call(t,o)&&a.indexOf(o)<0&&(n[o]=t[o]);if(t!=null&&s)for(var o of s(t))a.indexOf(o)<0&&r.call(t,o)&&(n[o]=t[o]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var o=n,{components:t}=o,a=m(o,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),a),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"A project\\u2019s coding style is the first and most noticeable trait that a new senior hire will be looking at while browsing the codebase for the first time.\\xA0\"),mdx(\"p\",null,\"On the surface, that\\u2019s because it is probably the simplest way to evaluate a codebase at a glance. On a deeper level, that\\u2019s because good programmers just simply love tidiness, simplicity and coherence. These three simple aspects will make or break your hire first impression with your project and company as a whole.\"),mdx(\"p\",null,\"Obviously, while attracting people who will be excited to work on your codebase is important, keeping your codebase clean and coherent goes a long way for a project\\u2019s overall longevity and success.\\xA0\"),mdx(\"p\",null,\"The list of reasons of why having a clean and consistent codebase is paramount is simply fairly known and documented, but to me these are the most important ones:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"working with a familiar codebase means working faster and better\"),mdx(\"li\",{parentName:\"ul\"},\"having a consistent codebase helps new hires get up to speed faster\"),mdx(\"li\",{parentName:\"ul\"},\"having a consistent codebase makes refactoring and maintenance easier\"),mdx(\"li\",{parentName:\"ul\"},\"\\u2026\")),mdx(\"h2\",null,\"Developer Experience (DX)\\xA0Matters \\u{1F913}\"),mdx(\"p\",null,\"Never more than today, developers can enjoy an unparalleled developer experience. Especially in the Front End world, the improvements to DX have been too important to ignore: static checking, conditional typing, smarter IDEs, linters, automated testing frameworks, and so on.\\xA0\"),mdx(\"p\",null,\"If there is something that makes a team inefficient and unmotivated, that is definitely a bad DX.\"),mdx(\"p\",null,\"It is an architect/manager\\u2019s job to make DX a critical part of the development processes of a team for a number of reasons:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"keep technology stack clean and performant for the current team, and new hires\"),mdx(\"li\",{parentName:\"ul\"},\"keep team happy and motivated. Your team\\u2019s morale is as important as the quality of your product\")),mdx(\"p\",null,\"While a good DX is a broad and vast topic, what I what to talk about in this article is one of the pillars of good code: coding guidelines.\\xA0\"),mdx(\"p\",null,\"While community-wide guidelines are important and serve as a standard indicator of best practices\\u200A\\u2014\\u200AI tend to give more importance to what a team thinks of a certain style, and not the community as a whole. The team always comes first\\u200A\\u2014\\u200Abut in the same time every decision taken against community standards should be logical and documented. A (good) new hire will eventually question such decisions.\"),mdx(\"p\",null,\"To me, \",mdx(\"strong\",{parentName:\"p\"},\"coding guidelines are a set of rules every member of the team agrees to follow and respect\"),\". As this is certainly most important in the beginning of a project, the tools available today, like Prettier and TsLint, allow a project to be conformant to a coding guideline at any stage.\"),mdx(\"h2\",null,\"Prettier + TsLint = tidiness, simplicity & coherence\"),mdx(\"p\",null,\"As I pointed out before, tidiness, simplicity and coherence are 3 things every developer cares about. How do Prettier and TsLint help with that?\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Tidiness: thanks to TsLint rules (or EsLint if you use JS), which are ideally agreed by all your team, developers will be warned when a rule is violated\"),mdx(\"li\",{parentName:\"ul\"},\"Simplicity: by adding Prettier as a pre-commit hook, you remove the responsibility of taking care of certain formatting details from developers, who can instead focus on the stuff that matters\"),mdx(\"li\",{parentName:\"ul\"},\"Coherence: thanks to automatic formatting, all the codebase looks the same, no matter who writes it\")),mdx(\"p\",null,\"As nowadays most teams use \",mdx(\"em\",{parentName:\"p\"},\"PR\"),\" and code reviews, another important thing to mention is that, in my experience, most of the comments often regard code-style rather than actual potential mistakes or bugs. This is frustrating, because not only it is time lost to review it, but also to fix it.\"),mdx(\"p\",null,\"The issue is, code reviewers \",mdx(\"strong\",{parentName:\"p\"},\"should\"),\" point those mistakes out, but ideally they \",mdx(\"strong\",{parentName:\"p\"},\"shouldn\\u2019t have to\"),\".\"),mdx(\"p\",null,\"And the only way to avoid time lost on trivial matters, is to having an effortless set-up that takes almost all formatting responsibility from the committers.\"),mdx(\"h3\",null,\"How to set up Prettier and\\xA0TsLint \\u2699\\uFE0F\"),mdx(\"p\",null,\"Setting up Prettier and TsLint is quite straightforward. First of all, we install these two packages:\"),mdx(\"p\",null,\"npm install --save-dev prettier tslint-config-prettier\"),mdx(\"p\",null,\"If you kickstarted your project using your framework\\u2019s CLI, then you will likely already have created a \",mdx(\"em\",{parentName:\"p\"},\"tslint.json\"),\" file in your project. If you don\\u2019t, create it and simply add the following content:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"extends\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"tslint:recommended\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"tslint-config-prettier\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"If you instead have do have it already, simply \\u201Ctslint-config-prettier\\u201D to the \",mdx(\"em\",{parentName:\"p\"},\"extends\"),\" property just like in the above snippet. This is needed in order to make Prettier and TsLint work nicely together.\"),mdx(\"p\",null,\"After that\\u200A\\u2014\\u200Ait\\u2019s time to setup Prettier. In order to create the configuration file, we can use various file formats such as \",mdx(\"em\",{parentName:\"p\"},\"JSON\"),\", \",mdx(\"em\",{parentName:\"p\"},\"JS\"),\", \",mdx(\"em\",{parentName:\"p\"},\"YAML\"),\" or \",mdx(\"em\",{parentName:\"p\"},\"TOML\"),\"\\u200A\\u2014\\u200Abut I like \",mdx(\"em\",{parentName:\"p\"},\"YAML\"),\", so go ahead and create a file in your root (i.e. where your \",mdx(\"em\",{parentName:\"p\"},\"package.json\"),\" is located) and name it\\xA0\",mdx(\"em\",{parentName:\"p\"},\".prettierrc.\\xA0\")),mdx(\"p\",null,\"Here is a simple\\xA0\",mdx(\"em\",{parentName:\"p\"},\".prettierrc\"),\" file with options I tend to use:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-yaml\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-yaml\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token key atrule\"}),\"tabWidth\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"4\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token key atrule\"}),\"singleQuote\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),` _true\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token key atrule\"}),\"_bracketSpacing\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),` _true\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token key atrule\"}),\"_printWidth\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"80\"),`\n`))),mdx(\"p\",null,\"For the list of all the available options, head to \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://medium.com/r/?url=https%3A%2F%2Fprettier.io%2Fdocs%2Fen%2Foptions.html\"}),\"Prettier\\u2019s website\"),\".\"),mdx(\"p\",null,\"This is great, but how exactly is this simple? It\\u2019s not, so let\\u2019s simplify this for your team.\"),mdx(\"p\",null,\"You have 3 options:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"create a \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://medium.com/r/?url=https%3A%2F%2Fprettier.io%2Fdocs%2Fen%2Fprecommit.html\"}),\"pre-commit hook\"),\" as described on Prettier\\u2019s website\"),mdx(\"li\",{parentName:\"ul\"},\"set up your IDE (if you use WebStorm \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://medium.com/r/?url=https%3A%2F%2Fprettier.io%2Fdocs%2Fen%2Fwebstorm.html\"}),\"use a watcher\"),\", or if you use VSCode \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://medium.com/r/?url=https%3A%2F%2Fprettier.io%2Fdocs%2Fen%2Feditors.html\"}),\"use a plugin\"),\")\"),mdx(\"li\",{parentName:\"ul\"},\"\\u2026 something even better, use both! It\\u2019s a great feeling for a developer to have the feeling of always committing something correct, but also to have instant feedback of a clean, formatted file.\")),mdx(\"h3\",null,\"Takeaways \\u2B50\\uFE0F\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"DX is important\\u200A\\u2014\\u200Amake sure your team is happy\"),mdx(\"li\",{parentName:\"ul\"},\"Coding style is important\\u200A\\u2014\\u200Amake sure your whole team agrees with it\"),mdx(\"li\",{parentName:\"ul\"},\"Use Prettier and TsLint (or EsLint) for working better and faster\")))}MDXContent.isMDXComponent=!0;\n","scope":{}},"series":[],"morePosts":[{"live":true,"readingTime":"3 min read","title":"Streamline your code with Typescript assertions","date":"2021-10-30T00:00:00.322Z","slug":"streamline-your-code-with-typescript-assertions","collection":{"name":"Typescript","primaryColor":"#358ef1","primaryColorLight":"#358ef175","contrastColor":"#fff","logo":"/assets/images/collections/typescript.png"}}],"moreArticles":[{"live":true,"readingTime":"2 min read","title":"Better code with Typescript aliases","date":"2020-07-26T00:00:00.322Z","slug":"better-code-with-typescript-aliases","coverImage":"/assets/images/posts/typescript-aliases.webp","collection":{"name":"Typescript","primaryColor":"#358ef1","primaryColorLight":"#358ef175","contrastColor":"#fff","logo":"/assets/images/collections/typescript.png"},"tags":["typescript","programming"]},{"live":true,"readingTime":"2 min read","title":"Build Typescript libraries for the browser with Nx","date":"2020-07-25T00:00:00.322Z","slug":"build-typescript-libraries-for-the-browser-with-nx","coverImage":"/assets/images/posts/typescript-libraries-with-nx.webp","collection":{"name":"Typescript","primaryColor":"#358ef1","primaryColorLight":"#358ef175","contrastColor":"#fff","logo":"/assets/images/collections/typescript.png"},"excerpt":"This article shows how to set up your Webpack configuration to build Typescript libraries with Nx","tags":["typescript","nx"]},{"live":true,"readingTime":"10 min read","title":"Writing scalable Typescript","date":"2019-04-05T00:00:00.322Z","slug":"writing-scalabale-typescript","coverImage":"/assets/images/posts/writing-scalable-typescript.jpeg","collection":{"name":"Typescript","primaryColor":"#358ef1","primaryColorLight":"#358ef175","contrastColor":"#fff","logo":"/assets/images/collections/typescript.png"},"excerpt":"Let’s explore in detail how to write clean, safe, enterprise-grade Typescript code","tags":["typescript"]}],"type":1},"__N_SSG":true}