{"pageProps":{"post":{"live":true,"readingTime":"10 min read","title":"Writing scalable Typescript","date":"2019-04-05T00:00:00.322Z","slug":"writing-scalabale-typescript","coverImage":"/assets/images/posts/writing-scalable-typescript.jpeg","collection":{"name":"Typescript","primaryColor":"#358ef1","primaryColorLight":"#358ef175","contrastColor":"#fff","logo":"/assets/images/collections/typescript.png"},"excerpt":"Let’s explore in detail how to write clean, safe, enterprise-grade Typescript code","content":"\n#### Let’s explore in detail how to write clean, safe, enterprise-grade Typescript code\n\nBefore we get started, I want to give my checklist for “scalable code”; in the case of this article, Typescript code:\n\n*   it is clean, well-formatted, readable code\n*   it is well-designed, consistent and predictable\n*   it is easy to extend\n*   last but not least, it is bug-free\n\nSince its introduction, Typescript has helped us solve some of the biggest problems with the Javascript ecosystem thanks to its tooling and its powerful static analysis.\n\nIn my experience, though, many teams **only leverage a very small part** of the features that Typescript provides us.\n\nSome argue that:\n\n*   it is time-consuming\n*   typing our code does not reduce its bugs\n*   it’s harder and more difficult for junior developers to get started with\n\nAnd I am not here to prove them wrong. Cause thing is, they may be right.\n\nBut Typescript doesn’t have to be scary, and in my opinion, writing code using it properly largely outweighs the cons mentioned above.\n\nIn this article, I want to discuss and explore the best tooling and practices to **make Typescript worth our time**.\n\n## Use Linters and Formatters\n\nAs stated above, we want our Typescript code to be clean, well-formatted and readable.\n\nIn one [of my previous articles](https://medium.com/r/?url=https%3A%2F%2Fitnext.io%2Fenforce-your-team-coding-style-with-prettier-and-tslint-9faac5016ce7), I wrote a guide for setting up _Prettier_ and _TsLint_ in order to keep our code consistent for the whole team. As I may be repeating myself too often, I won’t go too much in detail in regards to why and how to set up these tools. \n\nInstead, I want to focus on the impact of the benefits to your team from using these tools.\n\nWhether you’re using EsLint, TsLint, Prettier or all of them, I can’t stress enough that providing consistency to our codebases is one of the most impactful things in terms of productivity for an efficient team. \n\nA familiar codebase:\n\n*   is easier to read and work with\n*   is easier to understand and get started with\n*   is easier to modify\n*   is easier to review\n*   reduces frictions within a team\n\nAnd anyone who’s worked in this industry long enough knows far too well how important the last point is. \n\nFor a business, frictions, and misunderstandings among colleagues are worst than bad code and worse than bugs. \n\nAnd programmers happen to care about formatting quite a lot.\n\nBy reducing to the minimum the amount of time spent arguing on code reviews, meetings, and calls, we make the business more efficient as a result. \n\nThe time spent reviewing where a semicolon is positioned is instead spent checking that the business logic of the code is correct, or that the performance of a function is optimal. That’s what a code review should be.\n\n> A happy team is a team is an efficient one. Keep your Typescript clean with linters and formatters.\n\n## Use Strict Compiler options\n\nOne of Typescript’s biggest help comes from enabling its strict mode compiler. In order to enable strict mode, you just need to change the compiler options file located in your `tsconfig.json`:\n\n```\n\"compilerOptions\": {\n    ... // more\n    \"strict\": true\n}\n```\n\nBy enabling this option, as a result of the other strict options will also be enabled by default.\n\n### Strict Null Checks\n\nA strict compiler will help us catch possible errors that may happen at runtime.\n\n`strictNullChecks` is, in my opinion, the most important option to make your compiler help you prevent such errors. \n\nIn conjunction with correct typing, this option will warn us when we are trying to access a possibly `null` or `undefined` value.\n\nThis is probably one of the most common causes of runtime errors in our applications, and we can finally get help to avoid them as much as possible.\n\nIf you have a been a Javascript developer for more than 2 hours before reading this article, you may have seen this in your console:\n\n> _Uncaught TypeError: Cannot read property ‘property’ of undefined_\n\nOh, I have. **Thousands of times**.\n\nBut… not so much lately, thanks to Typescript.\n\nSo how exactly does `strictNullChecks` help us? \n\n![](https://cdn-images-1.medium.com/max/1600/1*SuRzMd87h2lH9tqgyNKj_w.png)\n\nLet’s break down this example:\n\n*   we have some boolean called `x`\n*   we have a declared function `logger`\n*   we want to call `logger` with a variable called `msg`  that could also be undefined\n\nAnd the compiler is, rightly and gently, letting me know that if `logger` accepts an argument that I type as string, then I can only pass an argument that is only and always a string.\n\nIf I type logger’s _msg_ argument  as a string, then I cannot call String’s methods.\n\n![](https://cdn-images-1.medium.com/max/1600/1*kQLu2mtugqhAWYJpM61JiQ.png)\n\nThese examples look as trivial and extremely simple, but it’s incredibly common to find similar situations in professional codebases. \n\nThe good thing is, `strictNullChecks` helps us in much more contrived scenarios.\n\n## Type well, Type often\n\n### Honest typing\n\nSome of you may be thinking if the term “honest” is due to my limited English skills or if there’s more to it. What’s honest typing?\n\n*   Say we have a back-end API that returns the price object of a financial product\n*   Not all responses contain an _ask price_ or a _bid price_\n\n```typescript\n{\n    \"correlationId\": \"123\",\n    \"askPrice\": 1213.45,\n    \"bidPrice\": undefined\n}\n```\n\nLet’s create a Typescript interface for this:\n\n```typescript\ninterface Price {\n    correlationId: string;\n    askPrice: number;\n    bidPrice: number;\n}\n```\n\nIs that correct? Certainly not. \n\nI have heard several reasons why programmers won’t fully type nullable values:\n\n> I’m lazy, the compiler will complain\n\n> 98% of times it’s not undefined\n\n> “I have no idea what that does“\n\nWe want to tell the compiler that `askPrice` and `bidPrice` might be `undefined`. The compiler, as a result, will warn us when we’re trying to access these properties without checking the type or if they exist beforehand.\n\n```typescript\ninterface Price {\n    correlationId: string;\n    askPrice?: number;\n    bidPrice?: number;\n}\n\n// or\n\ninterface Price {\n    correlationId: string;\n    askPrice: number | undefined;\n    bidPrice: number | undefined;\n}\n```\n\nThat means **the compiler helps us avoid runtime errors** when that 2% of times do happen.\n\nHonest typing also helps our new coworkers or users of our libraries to fully understand the domain entities of the application. \n\nThere’s literally no reason why your client-side entities shouldn’t fully and strictly be typed as their back-end counterparts.\n\n### no implicit any\n\nAs we have seen in the previous paragraph, honest and rigorous typing plays a fundamental role in ensuring our code behaves in a correct way.\n\nHonest typing is related to the option _noImplicitAny._\n\nLet’s consider the following snippet:\n\n![](https://cdn-images-1.medium.com/max/1600/1*q5cL6jF2ICpRbWkPKWhpFw.png)\n\nThe compiler has no idea what `x` and `y` are, and in some situations, it cannot figure it out on its own.\n\n> Don’t be lazy, and **type your code**. \n\nThere are situations where the compiler can figure it out without us explicitly adding a type, but in these cases, you need to consider whether adding the type increases or decreases the readability of your code.\n\n## Clean Typescript Code\n\n### Use predictable naming conventions\n\nWhile linters and formatters make great allies in ensuring consistency across our codebases, there are some things that they still cannot help with: naming.\n\nUse predictable naming conventions your team can understand is fundamental in ensuring cleanliness, consistency, and clarity.\n\nConsider the following snippet, which is a scenario I encounter far too often:\n\n![](https://cdn-images-1.medium.com/max/1600/1*jAvSp7tyXSfZmhe_ZNzE-Q.png)\n\nObviously, **I am not saying naming is easy**. It’s not. \n\nBut if you follow the most basic principles, you’re still ahead of many. Some things I’d feel suggesting are:\n\n*   if your method does not return anything, never prefix it with _get_\n*   if your method returns something, never prefix it with _set_\n*   ideally, don’t set and get in the same method…\n*   if your method is returning a boolean, consider prefixing it with _is_ or _should (isThisThingVisible, shouldShowError, etc.)_\n*   don’t name your variables with their type\n*   if you’re using a DSL from a different library or framework, stick with their conventions. For example, if you declare an observable with _RxJS_, make sure to suffix it with the dollar symbol ($)\n\n### Use Aliases\n\nLet’s be honest, no one likes seeing relative imports all over the place in our Typescript code. Using the paths aliases functionality in Typescript is a great way for making the imports nicer and shorter.\n\nHow do aliases work?\n\nWe define the `paths` configuration in our `tsconfig.json` . See the below example:\n\n![](https://cdn-images-1.medium.com/max/1600/1*_1zVUzTV4cmAwS_p8Ki9fw.png)\n\nAnd then, I can access all my interfaces from `@core/interfaces` and (if you prefer even shorter access), all my enums from `enums.`\n\n![](https://cdn-images-1.medium.com/max/1600/1*_VwO_1qoi2i1aoU0mTfaVw.png)\n\n### Prefer horizontal reading\n\nThis is someone not everyone may be on the same page with me, but that I greatly believe impacts the overall readability of your code.\n\nI love to keep my lines code between 80 (perfect) and 120 lines of code, depending on how my team feels about it. \n\nLet’s see the difference with one of my projects’ snippets. In the following image, the horizontal length is set to 120.\n\n![](https://cdn-images-1.medium.com/max/1600/1*HuZwRELp053NnZV_wWChEA.png)\n\nIn the image below, it is instead set to 80.\n\n![](https://cdn-images-1.medium.com/max/1600/1*bAg9o5s4LXTRnYLE0zUnjw.png)\n\nWhich one would you say it is easier to read and modify?\n\n> 💡**Pro tip**: Use Prettier to automatically wrap code for you\n\n### Arrow functions are cool but don’t overuse them\n\nI love arrow-functions. And I use them pretty often too. But I see them abused from time to time.\n\nArrow functions are perfect for small expressions, but for longer and more complex ones, I’d much rather create a function block. \n\nSometimes I see pretty convoluted expressions just for the sake of using an arrow function. \n\nLet’s see the difference between a long expression with an arrow function:\n\n![](https://cdn-images-1.medium.com/max/1600/1*SX0FtvRe_HRsUAWcMTBs6g.png)\n\nAnd without an arrow function:\n\n![](https://cdn-images-1.medium.com/max/1600/1*EzXx8gQCcuhglxaQl2vAbQ.png)\n\nIt is totally possible to still use an arrow function and wrap the expression on the next line, but I feel it adds complexity when I happen to refactor the code, for example, if I need to add a variable in the expression. \n\nIf you wrap it with an arrow function which is perfectly fine, make sure that the piece of code is unlikely to be changed anytime soon.\n\n### Use logical spacing\n\nJust like in Medium, white space, although not too much, can impact readability. \n\nThe same happens with our code: we want to add spacing where it makes sense.\n\nSome code just feels like a wall of text without any logical separation. This is not an easy task, as everyone might just feel different about it, and a lot of it probably depends on everyone’s preferences.\n\nI’d say there are two main reasons for adding spaces:\n\n*   logical reasons, as it concerns the logic behind our code\n*   design reasons, as it concerns how easy the code is to read\n\nI won’t talk about the design reasons behind it as this just feels too subjective. Personally, I just try to follow these simple guidelines:\n\n*   group variables declarations logically\n*   keep one white space between your return statement and the function body\n\nIf we are building two different objects with two separate groups of constants, chances are we want to add a space between them. For example:\n\n```typescript\nconst name = \"..\";\nconst surname = \"..\";\nconst player = { name, surname };\n\n// logical break\nconst teamName = \"..\";\nconst teamId = \"..\";\nconst team = { teamName, teamId };\n\nreturn { player, team };\n```\n\n### Break complex expressions down\n\nIt is pretty easy to end up with various long and complex expressions in our code. \n\nI‘d recommend to break down long expressions into groups of variables and separate methods. \n\n*   If a condition has more than 2 or 3 expressions, you should consider to break it down\n*   if a condition contains magic strings and numbers, you should consider extracting the expression into a method\n\nLet’s see a scenario where we have two possibly undefined objects that I am sure you see every day:\n\n```typescript\nexecute() {\n    if (price && price.canExecute && user && user.hasPermissions && service.status === 1) {\n    return priceService.execute(price);\n    }\n}\n```\n\nMaybe it’s my poor sight, but I can’t read that! Let’s refactor this:\n\n```typescript\nexecute() {\n    const STATUS_CODE_UP = 1;\n    const isServiceDown = service.status !== STATUS_CODE_UP;\n\n    if (isServiceDown) {\n        return;\n    }\n\n    if (!price.canExecute || !user.hasPermissions) {\n        return;\n    }\n\n    return priceService.execute(price);\n}\n```\n\nOk, I can read this, but now just feels too long. Let’s refactor again:\n\n```typescript\nconst STATUS_CODE_UP = 1; // ideally imported from another file\n\nget isServiceUp() {\n    return service.status === STATUS_CODE_UP;\n}\n\nget canExecute() {\n    if (!price || !user) {\n        return;\n    }\n\n    return price.canExecute && user.hasPermissions;\n}\n\nexecute() {\n   const canExecute = this.isServiceUp && this.canExecute;\n   return canExecute && priceService.execute(price);\n}\n```\n\nThat feels better!\n\n## Takeaways\n\n*   Lint and Format your code before it gets pushed\n*   Be rigorous with your code, enable `strict` mode\n*   Type well, and type often. Don’t use _any,_ use generics and _unknown_ instead\n*   Make sure your code is as readable as possible by following industry standards\n","tags":["typescript"]},"content":{"compiledSource":"var l=Object.defineProperty,d=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var i=(a,n,t)=>n in a?l(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))p.call(n,t)&&i(a,t,n[t]);if(o)for(var t of o(n))r.call(n,t)&&i(a,t,n[t]);return a},c=(a,n)=>d(a,u(n));var m=(a,n)=>{var t={};for(var s in a)p.call(a,s)&&n.indexOf(s)<0&&(t[s]=a[s]);if(a!=null&&o)for(var s of o(a))n.indexOf(s)<0&&r.call(a,s)&&(t[s]=a[s]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var s=t,{components:a}=s,n=m(s,[\"components\"]);return mdx(MDXLayout,c(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"h4\",null,\"Let\\u2019s explore in detail how to write clean, safe, enterprise-grade Typescript code\"),mdx(\"p\",null,\"Before we get started, I want to give my checklist for \\u201Cscalable code\\u201D; in the case of this article, Typescript code:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"it is clean, well-formatted, readable code\"),mdx(\"li\",{parentName:\"ul\"},\"it is well-designed, consistent and predictable\"),mdx(\"li\",{parentName:\"ul\"},\"it is easy to extend\"),mdx(\"li\",{parentName:\"ul\"},\"last but not least, it is bug-free\")),mdx(\"p\",null,\"Since its introduction, Typescript has helped us solve some of the biggest problems with the Javascript ecosystem thanks to its tooling and its powerful static analysis.\"),mdx(\"p\",null,\"In my experience, though, many teams \",mdx(\"strong\",{parentName:\"p\"},\"only leverage a very small part\"),\" of the features that Typescript provides us.\"),mdx(\"p\",null,\"Some argue that:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"it is time-consuming\"),mdx(\"li\",{parentName:\"ul\"},\"typing our code does not reduce its bugs\"),mdx(\"li\",{parentName:\"ul\"},\"it\\u2019s harder and more difficult for junior developers to get started with\")),mdx(\"p\",null,\"And I am not here to prove them wrong. Cause thing is, they may be right.\"),mdx(\"p\",null,\"But Typescript doesn\\u2019t have to be scary, and in my opinion, writing code using it properly largely outweighs the cons mentioned above.\"),mdx(\"p\",null,\"In this article, I want to discuss and explore the best tooling and practices to \",mdx(\"strong\",{parentName:\"p\"},\"make Typescript worth our time\"),\".\"),mdx(\"h2\",null,\"Use Linters and Formatters\"),mdx(\"p\",null,\"As stated above, we want our Typescript code to be clean, well-formatted and readable.\"),mdx(\"p\",null,\"In one \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://medium.com/r/?url=https%3A%2F%2Fitnext.io%2Fenforce-your-team-coding-style-with-prettier-and-tslint-9faac5016ce7\"}),\"of my previous articles\"),\", I wrote a guide for setting up \",mdx(\"em\",{parentName:\"p\"},\"Prettier\"),\" and \",mdx(\"em\",{parentName:\"p\"},\"TsLint\"),\" in order to keep our code consistent for the whole team. As I may be repeating myself too often, I won\\u2019t go too much in detail in regards to why and how to set up these tools.\\xA0\"),mdx(\"p\",null,\"Instead, I want to focus on the impact of the benefits to your team from using these tools.\"),mdx(\"p\",null,\"Whether you\\u2019re using EsLint, TsLint, Prettier or all of them, I can\\u2019t stress enough that providing consistency to our codebases is one of the most impactful things in terms of productivity for an efficient team.\\xA0\"),mdx(\"p\",null,\"A familiar codebase:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"is easier to read and work with\"),mdx(\"li\",{parentName:\"ul\"},\"is easier to understand and get started with\"),mdx(\"li\",{parentName:\"ul\"},\"is easier to modify\"),mdx(\"li\",{parentName:\"ul\"},\"is easier to review\"),mdx(\"li\",{parentName:\"ul\"},\"reduces frictions within a team\")),mdx(\"p\",null,\"And anyone who\\u2019s worked in this industry long enough knows far too well how important the last point is.\\xA0\"),mdx(\"p\",null,\"For a business, frictions, and misunderstandings among colleagues are worst than bad code and worse than bugs.\\xA0\"),mdx(\"p\",null,\"And programmers happen to care about formatting quite a lot.\"),mdx(\"p\",null,\"By reducing to the minimum the amount of time spent arguing on code reviews, meetings, and calls, we make the business more efficient as a result.\\xA0\"),mdx(\"p\",null,\"The time spent reviewing where a semicolon is positioned is instead spent checking that the business logic of the code is correct, or that the performance of a function is optimal. That\\u2019s what a code review should be.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"A happy team is a team is an efficient one. Keep your Typescript clean with linters and formatters.\")),mdx(\"h2\",null,\"Use Strict Compiler\\xA0options\"),mdx(\"p\",null,\"One of Typescript\\u2019s biggest help comes from enabling its strict mode compiler. In order to enable strict mode, you just need to change the compiler options file located in your \",mdx(\"inlineCode\",{parentName:\"p\"},\"tsconfig.json\"),\":\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-unknown\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-unknown\"}),`&quot;compilerOptions&quot;: {\n    ... // more\n    &quot;strict&quot;: true\n}`))),mdx(\"p\",null,\"By enabling this option, as a result of the other strict options will also be enabled by default.\"),mdx(\"h3\",null,\"Strict Null\\xA0Checks\"),mdx(\"p\",null,\"A strict compiler will help us catch possible errors that may happen at runtime.\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"strictNullChecks\"),\" is, in my opinion, the most important option to make your compiler help you prevent such errors.\\xA0\"),mdx(\"p\",null,\"In conjunction with correct typing, this option will warn us when we are trying to access a possibly \",mdx(\"inlineCode\",{parentName:\"p\"},\"null\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"undefined\"),\" value.\"),mdx(\"p\",null,\"This is probably one of the most common causes of runtime errors in our applications, and we can finally get help to avoid them as much as possible.\"),mdx(\"p\",null,\"If you have a been a Javascript developer for more than 2 hours before reading this article, you may have seen this in your console:\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"em\",{parentName:\"p\"},\"Uncaught TypeError: Cannot read property \\u2018property\\u2019 of undefined\"))),mdx(\"p\",null,\"Oh, I have. \",mdx(\"strong\",{parentName:\"p\"},\"Thousands of times\"),\".\"),mdx(\"p\",null,\"But\\u2026 not so much lately, thanks to Typescript.\"),mdx(\"p\",null,\"So how exactly does \",mdx(\"inlineCode\",{parentName:\"p\"},\"strictNullChecks\"),\" help us?\\xA0\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/1600/1*SuRzMd87h2lH9tqgyNKj_w.png\",alt:null}))),mdx(\"p\",null,\"Let\\u2019s break down this example:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"we have some boolean called \",mdx(\"inlineCode\",{parentName:\"li\"},\"x\")),mdx(\"li\",{parentName:\"ul\"},\"we have a declared function \",mdx(\"inlineCode\",{parentName:\"li\"},\"logger\")),mdx(\"li\",{parentName:\"ul\"},\"we want to call \",mdx(\"inlineCode\",{parentName:\"li\"},\"logger\"),\" with a variable called \",mdx(\"inlineCode\",{parentName:\"li\"},\"msg\"),\"  that could also be undefined\")),mdx(\"p\",null,\"And the compiler is, rightly and gently, letting me know that if \",mdx(\"inlineCode\",{parentName:\"p\"},\"logger\"),\" accepts an argument that I type as string, then I can only pass an argument that is only and always a string.\"),mdx(\"p\",null,\"If I type logger\\u2019s \",mdx(\"em\",{parentName:\"p\"},\"msg\"),\" argument  as a string, then I cannot call String\\u2019s methods.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/1600/1*kQLu2mtugqhAWYJpM61JiQ.png\",alt:null}))),mdx(\"p\",null,\"These examples look as trivial and extremely simple, but it\\u2019s incredibly common to find similar situations in professional codebases.\\xA0\"),mdx(\"p\",null,\"The good thing is, \",mdx(\"inlineCode\",{parentName:\"p\"},\"strictNullChecks\"),\" helps us in much more contrived scenarios.\"),mdx(\"h2\",null,\"Type well, Type\\xA0often\"),mdx(\"h3\",null,\"Honest typing\"),mdx(\"p\",null,\"Some of you may be thinking if the term \\u201Chonest\\u201D is due to my limited English skills or if there\\u2019s more to it. What\\u2019s honest typing?\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Say we have a back-end API that returns the price object of a financial product\"),mdx(\"li\",{parentName:\"ul\"},\"Not all responses contain an \",mdx(\"em\",{parentName:\"li\"},\"ask price\"),\" or a \",mdx(\"em\",{parentName:\"li\"},\"bid price\"))),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"correlationId\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"123\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"askPrice\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"1213.45\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"bidPrice\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"undefined\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"Let\\u2019s create a Typescript interface for this:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"interface\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token class-name\"}),\"Price\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    correlationId`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    askPrice`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"number\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    bidPrice`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"number\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"Is that correct? Certainly not.\\xA0\"),mdx(\"p\",null,\"I have heard several reasons why programmers won\\u2019t fully type nullable values:\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"I\\u2019m lazy, the compiler will complain\")),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"98% of times it\\u2019s not undefined\")),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u201CI have no idea what that does\\u201C\")),mdx(\"p\",null,\"We want to tell the compiler that \",mdx(\"inlineCode\",{parentName:\"p\"},\"askPrice\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"bidPrice\"),\" might be \",mdx(\"inlineCode\",{parentName:\"p\"},\"undefined\"),\". The compiler, as a result, will warn us when we\\u2019re trying to access these properties without checking the type or if they exist beforehand.\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"interface\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token class-name\"}),\"Price\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    correlationId`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    askPrice`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"?\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"number\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    bidPrice`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"?\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"number\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// or\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"interface\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token class-name\"}),\"Price\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    correlationId`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    askPrice`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"number\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"|\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"undefined\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    bidPrice`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"number\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"|\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"undefined\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"That means \",mdx(\"strong\",{parentName:\"p\"},\"the compiler helps us avoid runtime errors\"),\" when that 2% of times do happen.\"),mdx(\"p\",null,\"Honest typing also helps our new coworkers or users of our libraries to fully understand the domain entities of the application.\\xA0\"),mdx(\"p\",null,\"There\\u2019s literally no reason why your client-side entities shouldn\\u2019t fully and strictly be typed as their back-end counterparts.\"),mdx(\"h3\",null,\"no implicit\\xA0any\"),mdx(\"p\",null,\"As we have seen in the previous paragraph, honest and rigorous typing plays a fundamental role in ensuring our code behaves in a correct way.\"),mdx(\"p\",null,\"Honest typing is related to the option \",mdx(\"em\",{parentName:\"p\"},\"noImplicitAny.\")),mdx(\"p\",null,\"Let\\u2019s consider the following snippet:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/1600/1*q5cL6jF2ICpRbWkPKWhpFw.png\",alt:null}))),mdx(\"p\",null,\"The compiler has no idea what \",mdx(\"inlineCode\",{parentName:\"p\"},\"x\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"y\"),\" are, and in some situations, it cannot figure it out on its own.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"Don\\u2019t be lazy, and \",mdx(\"strong\",{parentName:\"p\"},\"type your\\xA0code\"),\".\\xA0\")),mdx(\"p\",null,\"There are situations where the compiler can figure it out without us explicitly adding a type, but in these cases, you need to consider whether adding the type increases or decreases the readability of your code.\"),mdx(\"h2\",null,\"Clean Typescript Code\"),mdx(\"h3\",null,\"Use predictable naming conventions\"),mdx(\"p\",null,\"While linters and formatters make great allies in ensuring consistency across our codebases, there are some things that they still cannot help with: naming.\"),mdx(\"p\",null,\"Use predictable naming conventions your team can understand is fundamental in ensuring cleanliness, consistency, and clarity.\"),mdx(\"p\",null,\"Consider the following snippet, which is a scenario I encounter far too often:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/1600/1*jAvSp7tyXSfZmhe_ZNzE-Q.png\",alt:null}))),mdx(\"p\",null,\"Obviously, \",mdx(\"strong\",{parentName:\"p\"},\"I am not saying naming is easy\"),\". It\\u2019s not.\\xA0\"),mdx(\"p\",null,\"But if you follow the most basic principles, you\\u2019re still ahead of many. Some things I\\u2019d feel suggesting are:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"if your method does not return anything, never prefix it with \",mdx(\"em\",{parentName:\"li\"},\"get\")),mdx(\"li\",{parentName:\"ul\"},\"if your method returns something, never prefix it with \",mdx(\"em\",{parentName:\"li\"},\"set\")),mdx(\"li\",{parentName:\"ul\"},\"ideally, don\\u2019t set and get in the same method\\u2026\"),mdx(\"li\",{parentName:\"ul\"},\"if your method is returning a boolean, consider prefixing it with \",mdx(\"em\",{parentName:\"li\"},\"is\"),\" or \",mdx(\"em\",{parentName:\"li\"},\"should (isThisThingVisible, shouldShowError, etc.)\")),mdx(\"li\",{parentName:\"ul\"},\"don\\u2019t name your variables with their type\"),mdx(\"li\",{parentName:\"ul\"},\"if you\\u2019re using a DSL from a different library or framework, stick with their conventions. For example, if you declare an observable with \",mdx(\"em\",{parentName:\"li\"},\"RxJS\"),\", make sure to suffix it with the dollar symbol ($)\")),mdx(\"h3\",null,\"Use Aliases\"),mdx(\"p\",null,\"Let\\u2019s be honest, no one likes seeing relative imports all over the place in our Typescript code. Using the paths aliases functionality in Typescript is a great way for making the imports nicer and shorter.\"),mdx(\"p\",null,\"How do aliases work?\"),mdx(\"p\",null,\"We define the \",mdx(\"inlineCode\",{parentName:\"p\"},\"paths\"),\" configuration in our \",mdx(\"inlineCode\",{parentName:\"p\"},\"tsconfig.json\"),\"\\xA0. See the below example:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/1600/1*_1zVUzTV4cmAwS_p8Ki9fw.png\",alt:null}))),mdx(\"p\",null,\"And then, I can access all my interfaces from \",mdx(\"inlineCode\",{parentName:\"p\"},\"@core/interfaces\"),\" and (if you prefer even shorter access), all my enums from \",mdx(\"inlineCode\",{parentName:\"p\"},\"enums.\")),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/1600/1*_VwO_1qoi2i1aoU0mTfaVw.png\",alt:null}))),mdx(\"h3\",null,\"Prefer horizontal reading\"),mdx(\"p\",null,\"This is someone not everyone may be on the same page with me, but that I greatly believe impacts the overall readability of your code.\"),mdx(\"p\",null,\"I love to keep my lines code between 80 (perfect) and 120 lines of code, depending on how my team feels about it.\\xA0\"),mdx(\"p\",null,\"Let\\u2019s see the difference with one of my projects\\u2019 snippets. In the following image, the horizontal length is set to 120.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/1600/1*HuZwRELp053NnZV_wWChEA.png\",alt:null}))),mdx(\"p\",null,\"In the image below, it is instead set to 80.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/1600/1*bAg9o5s4LXTRnYLE0zUnjw.png\",alt:null}))),mdx(\"p\",null,\"Which one would you say it is easier to read and modify?\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u{1F4A1}\",mdx(\"strong\",{parentName:\"p\"},\"Pro tip\"),\": Use Prettier to automatically wrap code for you\")),mdx(\"h3\",null,\"Arrow functions are cool but don\\u2019t overuse\\xA0them\"),mdx(\"p\",null,\"I love arrow-functions. And I use them pretty often too. But I see them abused from time to time.\"),mdx(\"p\",null,\"Arrow functions are perfect for small expressions, but for longer and more complex ones, I\\u2019d much rather create a function block.\\xA0\"),mdx(\"p\",null,\"Sometimes I see pretty convoluted expressions just for the sake of using an arrow function.\\xA0\"),mdx(\"p\",null,\"Let\\u2019s see the difference between a long expression with an arrow function:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/1600/1*SX0FtvRe_HRsUAWcMTBs6g.png\",alt:null}))),mdx(\"p\",null,\"And without an arrow function:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/1600/1*EzXx8gQCcuhglxaQl2vAbQ.png\",alt:null}))),mdx(\"p\",null,\"It is totally possible to still use an arrow function and wrap the expression on the next line, but I feel it adds complexity when I happen to refactor the code, for example, if I need to add a variable in the expression.\\xA0\"),mdx(\"p\",null,\"If you wrap it with an arrow function which is perfectly fine, make sure that the piece of code is unlikely to be changed anytime soon.\"),mdx(\"h3\",null,\"Use logical\\xA0spacing\"),mdx(\"p\",null,\"Just like in Medium, white space, although not too much, can impact readability.\\xA0\"),mdx(\"p\",null,\"The same happens with our code: we want to add spacing where it makes sense.\"),mdx(\"p\",null,\"Some code just feels like a wall of text without any logical separation. This is not an easy task, as everyone might just feel different about it, and a lot of it probably depends on everyone\\u2019s preferences.\"),mdx(\"p\",null,\"I\\u2019d say there are two main reasons for adding spaces:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"logical reasons, as it concerns the logic behind our code\"),mdx(\"li\",{parentName:\"ul\"},\"design reasons, as it concerns how easy the code is to read\")),mdx(\"p\",null,\"I won\\u2019t talk about the design reasons behind it as this just feels too subjective. Personally, I just try to follow these simple guidelines:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"group variables declarations logically\"),mdx(\"li\",{parentName:\"ul\"},\"keep one white space between your return statement and the function body\")),mdx(\"p\",null,\"If we are building two different objects with two separate groups of constants, chances are we want to add a space between them. For example:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" name \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"..\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" surname \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"..\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" player \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" name\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" surname \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// logical break\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" teamName \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"..\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" teamId \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"..\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" team \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" teamName\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" teamId \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" player\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" team \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`))),mdx(\"h3\",null,\"Break complex expressions down\"),mdx(\"p\",null,\"It is pretty easy to end up with various long and complex expressions in our code.\\xA0\"),mdx(\"p\",null,\"I\\u2018d recommend to break down long expressions into groups of variables and separate methods.\\xA0\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"If a condition has more than 2 or 3 expressions, you should consider to break it down\"),mdx(\"li\",{parentName:\"ul\"},\"if a condition contains magic strings and numbers, you should consider extracting the expression into a method\")),mdx(\"p\",null,\"Let\\u2019s see a scenario where we have two possibly undefined objects that I am sure you see every day:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"execute\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"price \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"&&\"),\" price\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"canExecute \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"&&\"),\" user \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"&&\"),\" user\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"hasPermissions \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"&&\"),\" service\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"status \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"===\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" priceService\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"execute\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"price\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"Maybe it\\u2019s my poor sight, but I can\\u2019t read that! Let\\u2019s refactor this:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"execute\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token constant\"}),\"STATUS_CODE_UP\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" isServiceDown \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" service\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"status \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"!==\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token constant\"}),\"STATUS_CODE_UP\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"isServiceDown\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"!\"),\"price\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"canExecute \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"||\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"!\"),\"user\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"hasPermissions\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" priceService\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"execute\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"price\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"Ok, I can read this, but now just feels too long. Let\\u2019s refactor again:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token constant\"}),\"STATUS_CODE_UP\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// ideally imported from another file\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"get\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"isServiceUp\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" service\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"status \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"===\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token constant\"}),\"STATUS_CODE_UP\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"get\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"canExecute\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"!\"),\"price \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"||\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"!\"),\"user\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" price\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"canExecute \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"&&\"),\" user\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"hasPermissions\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"execute\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n   `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" canExecute \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"isServiceUp \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"&&\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"canExecute\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n   `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" canExecute \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"&&\"),\" priceService\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"execute\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"price\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"That feels better!\"),mdx(\"h2\",null,\"Takeaways\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Lint and Format your code before it gets pushed\"),mdx(\"li\",{parentName:\"ul\"},\"Be rigorous with your code, enable \",mdx(\"inlineCode\",{parentName:\"li\"},\"strict\"),\" mode\"),mdx(\"li\",{parentName:\"ul\"},\"Type well, and type often. Don\\u2019t use \",mdx(\"em\",{parentName:\"li\"},\"any,\"),\" use generics and \",mdx(\"em\",{parentName:\"li\"},\"unknown\"),\" instead\"),mdx(\"li\",{parentName:\"ul\"},\"Make sure your code is as readable as possible by following industry standards\")))}MDXContent.isMDXComponent=!0;\n","scope":{}},"series":[],"morePosts":[{"live":true,"readingTime":"3 min read","title":"Streamline your code with Typescript assertions","date":"2021-10-30T00:00:00.322Z","slug":"streamline-your-code-with-typescript-assertions","collection":{"name":"Typescript","primaryColor":"#358ef1","primaryColorLight":"#358ef175","contrastColor":"#fff","logo":"/assets/images/collections/typescript.png"}}],"moreArticles":[{"live":true,"readingTime":"2 min read","title":"Better code with Typescript aliases","date":"2020-07-26T00:00:00.322Z","slug":"better-code-with-typescript-aliases","coverImage":"/assets/images/posts/typescript-aliases.webp","collection":{"name":"Typescript","primaryColor":"#358ef1","primaryColorLight":"#358ef175","contrastColor":"#fff","logo":"/assets/images/collections/typescript.png"},"tags":["typescript","programming"]},{"live":true,"readingTime":"2 min read","title":"Build Typescript libraries for the browser with Nx","date":"2020-07-25T00:00:00.322Z","slug":"build-typescript-libraries-for-the-browser-with-nx","coverImage":"/assets/images/posts/typescript-libraries-with-nx.webp","collection":{"name":"Typescript","primaryColor":"#358ef1","primaryColorLight":"#358ef175","contrastColor":"#fff","logo":"/assets/images/collections/typescript.png"},"excerpt":"This article shows how to set up your Webpack configuration to build Typescript libraries with Nx","tags":["typescript","nx"]},{"live":true,"readingTime":"5 min read","title":"Enforce your team coding style with Prettier and TsLint","date":"2019-04-17T00:00:00.322Z","slug":"enforce-your-team-style-with-prettier-and-tslint","coverImage":"/assets/images/posts/enforce-team-coding-style.gif","collection":{"name":"Typescript","primaryColor":"#358ef1","primaryColorLight":"#358ef175","contrastColor":"#fff","logo":"/assets/images/collections/typescript.png"},"excerpt":"Using TsLint to enforce your team coding style","tags":["typescript"]}],"type":1},"__N_SSG":true}