{"pageProps":{"post":{"readingTime":"3 min read","title":"Where to put your Angular models?","date":"2020-08-03T00:00:00.322Z","slug":"2020-03-08-angular-where-to-put-models","content":"<p>Before we go into detail - it's worth understanding what we mean by models:</p>\n<ul>\n<li>entity classes?</li>\n<li>enums?</li>\n<li>interfaces?</li>\n</ul>\n<p>It could be all of them - depending on who you ask.</p>\n<p>I personally like to differentiate between interfaces and models as two distinct things:</p>\n<ul>\n<li><code>interfaces</code> are used to define the shape of my Typescript entities</li>\n<li><code>models</code> are used as to define the actual value of my interfaces</li>\n</ul>\n<h3>How to organize your models in your Angular Project Structure</h3>\n<p>Every module may have a set of entities (models, enums, etc.) that are either private or public to the module itself.</p>\n<p>Let's assume we have a module called <code>UsersModule</code>. We want to define, for every entity, a sensible folder structure:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">- users\n    - components\n    - services\n    - enums\n        - roles.enum.ts\n    - interfaces\n        - user.interface.ts\n    - models</code></pre></div>\n<p>As you may have noticed, enums, interfaces and models all have their own folder, and it's important not to mix them to keep them well-organized.</p>\n<h2>Entities Visibility</h2>\n<p>There are a few rules that I tend to follow to make sure my project is well-organized.</p>\n<h3>Use a shared library for entities used outside of your modules</h3>\n<p>It's important to notice that a module should only contain the entities that are not shared with other modules, and hence that are private to that module.</p>\n<p>But - Why?</p>\n<p>Imagine we have a mono-repo with other applications or libraries written in different technologies (ex. Express, Stencil, React, etc.): you may not want to import your types from a different technology.</p>\n<h4>ðŸ’¡ Solution</h4>\n<p>Create a separate library (for example, called <code>@enterprise/interfaces</code>) that exposes your global entities. This is particularly recommended if you're using <code>Nx</code> to structure your project.</p>\n<p>Otherwise, consider creating a typescript repository to expose your global entities to different repositories.</p>\n<p>Admittedly, this is not great - but if you have a large team of teams using the same interfaces, it could be really important to keep them in sync.</p>\n<h3>Never export an interface from a Service</h3>\n<p>This is a pattern that I quite dislike - and I see used very often.</p>\n<p>Defining an interface within a Service (or a Component) is generally fine - although not something I normally do. It's all good - as long as it is not exported.</p>\n<p>Why is that?</p>\n<ul>\n<li>A component should not import a service simply to get an Interface</li>\n<li>A component may simply use Typescript inference instead of using that Interface</li>\n<li>If the interface is reused and is used in a way that inference could not work, then it should defined in its own file</li>\n</ul>\n<p>Hopefully this answered your questions - but if not, please do send me an <a href=\"mailto:giancarlo@frontend.consulting\">email</a> and I'd love to expand on the subject.</p>\n<p><em>Thank you for reading, I hope you enjoyed this article. If you did, consider follow me on <a href=\"https://twitter.com/gc_psk\">Twitter</a> or sign up to the Newsletter using the form below!</em></p>\n","ogImage":{"url":"/assets/images/posts/where-put-angular-models.png"},"coverImage":"/assets/images/posts/where-put-angular-models.png","collection":"angular"},"morePosts":[{"readingTime":"3 min read","title":"Benchmarking Angular 12 with Webpack 5","date":"2021-05-14T00:00:00.322Z","slug":"2021-14-05-webpack-5-angular12","coverImage":"/assets/images/posts/benchmarking-webpack-5.png","collection":"angular","excerpt":"Angular 12 has been released and with it the much awaited Webpack 5 upgrade. In this post I benchmarked the bundle-size and compilation speed against the previous version"},{"readingTime":"5 min read","title":"Principles for creating libraries with Nx and Angular","date":"2021-02-07T00:00:00.322Z","slug":"2021-07-02-how-to-organize-nx-modules-with-angular","coverImage":"/assets/images/posts/organize-nx-modules-ngrx.png","collection":"angular","excerpt":"Working with Nx may be confusing. This article explains how I create Nx libraries and the principles behind my motivations"},{"readingTime":"5 min read","title":"Using the Intersection Observer API with Angular","date":"2020-08-01T00:00:00.322Z","slug":"2020-08-01-intersection-observer-with-angular","coverImage":"/assets/images/posts/intersection-observer.png","collection":"angular","excerpt":"This article shows how to build a directive with Angular that uses the Intersection Observer API to check when an element becomes visible on the page"},{"readingTime":"3 min read","title":"Setters vs ngOnChanges: which one is better?","date":"2020-07-30T00:00:00.322Z","slug":"2020-07-30-setters-vs-ng-on-changes","coverImage":"/assets/images/posts/setters-vs-on-changes.png","collection":"angular","excerpt":"Listening to Input changes can be done in different ways. But which one should you use?"},{"readingTime":"3 min read","title":"Async Rendering with a single Rx Operator","date":"2020-07-11T00:00:00.322Z","slug":"2020-11-07-async-rendering-with-a-single-rx-operator","coverImage":"/assets/images/posts/async-rendering.png","collection":"angular","excerpt":"Increase your app rendering performance with this simple Rx operator"},{"readingTime":"9 min read","title":"Building Scalable Multi-Platform Projects with Angular andÂ Nx","date":"2019-08-25T00:00:00.322Z","slug":"2019-08-25-building-scalable-multi-platform-projects-with-angular-and-nx","ogImage":{"url":"https://cdn-images-1.medium.com/max/1600/0*erZf_hQ4V3MLHSyf"},"coverImage":"https://cdn-images-1.medium.com/max/1600/0*erZf_hQ4V3MLHSyf","collection":"angular","excerpt":"Building a scalable multi-platform monorepo application with Angular and Nx"}]},"__N_SSG":true}