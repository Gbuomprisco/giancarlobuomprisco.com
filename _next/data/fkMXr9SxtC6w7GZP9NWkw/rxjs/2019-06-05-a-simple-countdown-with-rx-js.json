{"pageProps":{"post":{"readingTime":"5 min read","title":"A simple Countdown with RxJS","date":"2019-06-05T00:00:00.322Z","slug":"2019-06-05-a-simple-countdown-with-rx-js","content":"<h4>In this tutorial, we’re going to build a very simple timer application with only a few lines of code using RxJS.</h4>\n<h3>Preview</h3>\n<p>Before we get started, you can view the result using the awesome Stackblitz. You can see a preview of the final result at <a href=\"https://medium.com/r/?url=https%3A%2F%2Frxjs-rajp6s.stackblitz.io\">this link</a>.</p>\n<p>The timer starts automatically when you land on the page, you can click on the time to stop it, and click again to restart the timer. </p>\n<p>When the time ends, the user will be prompted to take a break! It’s a very simple example, so the timer won’t restart.</p>\n<h3>Constants</h3>\n<p>Let’s first define some of the constants we’re going to use:</p>\n<ul>\n<li>We define <code>K</code> as we’re going to use this a lot, as we will be dealing with milliseconds, so we assign <code>1000</code> as value</li>\n<li>The interval is the amount of time that needs to elapse in order to update the timer. If we set it to <code>5000</code>, the timer would be updated every 5 seconds</li>\n<li>We set the minutes we want our timer to be long and its time in milliseconds</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">K</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">INTERVAL</span> <span class=\"token operator\">=</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MINUTES</span> <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TIME</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MINUTES</span> <span class=\"token operator\">*</span> <span class=\"token constant\">K</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>State variables</h3>\n<p>In order to keep the time’s state when pausing/resuming the timer, we define two variables:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> current<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token constant\">TIME</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ul>\n<li><code>current</code> will be continually updated every second</li>\n<li><code>time</code> will be updated when the timer stops</li>\n</ul>\n<h3>Helper functions</h3>\n<p>We define some helper functions used by our streams. We want to:</p>\n<ul>\n<li>convert remaining time to milliseconds and seconds</li>\n<li>have functions to display remaining minutes and seconds</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toMinutes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ms<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>ms <span class=\"token operator\">/</span> <span class=\"token constant\">K</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toSeconds</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ms<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>ms <span class=\"token operator\">/</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toSecondsString</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ms<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> seconds <span class=\"token operator\">=</span> <span class=\"token function\">toSeconds</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> seconds <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">0</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>seconds<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> seconds<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toMs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> t <span class=\"token operator\">*</span> <span class=\"token constant\">INTERVAL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">currentInterval</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> time <span class=\"token operator\">/</span> <span class=\"token constant\">INTERVAL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toRemainingSeconds</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">currentInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> t<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Defining the Rx streams</h3>\n<p>First, we define the <code>timer$</code> stream: </p>\n<ul>\n<li>we use the observable creator <code>timer</code>, that emits every <code>INTERVAL</code> times, which basically means it will emit every second</li>\n</ul>\n<p>The stream will convert the milliseconds emitted from <code>timer</code> to the remaining seconds.</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> toggle$ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BehaviorSubject</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> remainingSeconds$ <span class=\"token operator\">=</span> toggle$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>running<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> running <span class=\"token operator\">?</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INTERVAL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token constant\">NEVER</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toRemainingSeconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">takeWhile</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Let’s explain detail what this does:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">**toggle$** -&#x26;gt; true...false...true\n\n-----\n\n**switchMap** to:\n\n **if toggle is true -&#x26;gt; timer(0, INTERVAL = 1000)** -&#x26;gt; 0...1000...2000\n **if toggle is false ? -&#x26;gt;** NEVER = do not continue\n\n----\n\n**map(toRemainingSeconds)** -&#x26;gt; ms elapsed mapped to remaining seconds (ex. 1500)\n\n----\n\n**takeWhile(remainingSeconds)** -&#x26;gt; complete once **remainingSeconds$&#x26;#39;s** value  is no more &#x26;gt;= 0</code></pre></div>\n<p>Let’s consider the operators used:</p>\n<ul>\n<li>the mapper <code>toSeconds</code> will convert the milliseconds returned by the observable to the number of seconds that are remaining</li>\n<li>by using the operator <code>takeWhile</code> we’re basically telling the <code>remainingSeconds$</code> observable to keep going until the seconds remaining are greater or equal than 0</li>\n<li>After that, <code>remainingSeconds$</code> will emit its completion callback that we can use to replace the timer with some other content</li>\n</ul>\n<p>Before creating the relative minutes and seconds we will be displaying, we want to be able to stop and resume and timer. </p>\n<p>If <code>toggle$</code> is emitted with <code>true</code> as value, the timer keeps running, while if it gets emitted with <code>false</code> it will stop, as instead of mapping to <code>remainingSeconds$</code> it will emit the observable <code>NEVER</code> .</p>\n<h3>Pausing and resuming the timer</h3>\n<p>By using <code>fromEvent</code> , we can listen to click events and update the behavior subject by toggling its current value.</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> toggleElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.timer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>toggleElement<span class=\"token punctuation\">,</span> ‘click’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    toggle$<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>toggle$<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>But <code>toggle$</code> also does something else: </p>\n<ul>\n<li>every time the timer gets stopped, we want to update the time variable with the current time, so that the next time the timer restarts, it will restart from the current time.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\">toggle$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>toggled<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>toggled<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    time <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Now, we can define the milliseconds observable we’re going to use to display minutes and seconds: </p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> ms$ <span class=\"token operator\">=</span> time$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> current <span class=\"token operator\">=</span> t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Every time <code>ms$</code> emits, we use the <code>tap</code> operator to update the stateful variable <code>current</code>.</p>\n<p>Next, we’re going to define minutes and seconds by reusing the helper methods we defined earlier in the article.</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> minutes$ <span class=\"token operator\">=</span> ms$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toMinutesDisplay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">startWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">toMinutesDisplay</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> seconds$ <span class=\"token operator\">=</span> ms$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toSecondsDisplayString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">startWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">toSecondsDisplayString</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>And that’s it! Our streams are ready and can now update the DOM.</p>\n<h3>Updating the DOM</h3>\n<p>We define a simple function called <code>updateDom</code> that takes an observable as the first argument and an HTML element as the second one. Every time the source emits, it will update the <code>innerHTML</code> of the node.</p>\n<p>HTML:</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>timer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>minutes<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>span</span><span class=\"token punctuation\">></span></span>:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>seconds<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// DOM nodes</span>\n<span class=\"token keyword\">const</span> minutesElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.minutes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> secondsElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.seconds'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">updateDom</span><span class=\"token punctuation\">(</span>minutes$<span class=\"token punctuation\">,</span> minutesElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">updateDom</span><span class=\"token punctuation\">(</span>seconds$<span class=\"token punctuation\">,</span> secondsElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateDom</span><span class=\"token punctuation\">(</span>source$<span class=\"token operator\">:</span> Observable<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> element<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    source$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> element<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Lastly, we want to display a message when the timer stops:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\">timer$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">complete</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">updateDom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Take a break!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> toggleElement<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*viwakc1HIU6SKXtrXgTLPw.gif\" alt=\"\"></p>\n<p>You can find the complete code snippet on <a href=\"https://medium.com/r/?url=https%3A%2F%2Fstackblitz.com%2Fedit%2Frxjs-rajp6s%3Ffile%3Dindex.ts\">Stackblitz</a>.</p>\n<p>Hope you enjoyed the article and leave a message if you agree, disagree, or if you would do anything differently!</p>\n<hr>\n<p><em>If you enjoyed this article, follow me on</em> <a href=\"https://medium.com/@.gc\"><em>Medium</em></a> <em>or</em> <a href=\"https://medium.com/r/?url=https%3A%2F%2Ftwitter.com%2Fhome\"><em>Twitter</em></a> <em>for more articles about Angular, RxJS, Typescript and more!</em></p>\n","ogImage":{"url":"https://cdn-images-1.medium.com/max/1600/1*UqfNSA5wgWcEXphLsBXuUg.gif"},"coverImage":"https://cdn-images-1.medium.com/max/1600/1*UqfNSA5wgWcEXphLsBXuUg.gif","collection":"rxjs"},"morePosts":[]},"__N_SSG":true}