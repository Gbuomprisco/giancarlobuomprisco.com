{"pageProps":{"post":{"live":true,"title":"Better code with Typescript aliases","date":"2020-07-26T00:00:00.322Z","slug":"better-code-with-typescript-aliases","coverImage":"/assets/images/posts/typescript-aliases.webp","collection":"typescript","content":"\nIf you've ever worked with Typescript, you surely know what `type aliases` are for. They helps us create aliases of more complex types, for example arrays of interfaces, union types, etc.\n\nOne less-known way they can be leveraged is by simply describing values of primitive types based on their format.\n\nThis can accelerate the understanding of a codebase, reduce confusion, and deepen the insights gathered from just reading the types of your code.\n\nFor example, we have a DTO with two properties. This is how it would normally be written:\n\n```typescript\nclass MyDto {\n  id: string;\n  lastEdited: number;\n}\n```\n\n### Limitations of simple typing\n\nThe above is OK, and generally understandable, but can be better. Suppose it's your first day on a new codebase, and you know nothing about it.\n\nYou see the above DTO, but you're trying to understand what it is and what actual formats it expects from you:\n\n- you don't know what's the format of `ID`\n- you don't know the format of `lastEdited`. Is it a Unix timestamp, or a Julian day? Or the amount of days since Earth was created? Who knows.\n\nSo why not describe what theses values are with `type aliases`?\n\n### Aliasing primitive types based on their format\n\nWe can define the types in a global typings file, so they can be reused across the project.\n\nLet's assume that the fields above are, as commonly happen to be, a UUID and a Unix timestamp.\n\n```typescript\ntype UUID = string;\ntype UnixTimestamp = number;\n```\n\nAnd then, we can assign them to our DTO:\n\n```typescript\nclass MyDto {\n  id: UUID;\n  lastEdited: UnixTimestamp;\n}\n```\n\nIn my opinion, the above conveys a lot more information than before, and it's certainly more useful to both existing members and newcomers.\n\n### Type Aliases as shortcuts\nType aliases are also useful to shortcut some common type combinations:\n\nConverting inline interfaces to the `Record` alias:\n\n```typescript\nconst myObject: { [key: string]: string } = { property: 'key' };\n\n// can also be written\nconst myObject: Record<string, string> = { property: 'key' };\n```\n\nThe `Record` type aliases can also be aliased into more granular types:\n\n```typescript\ntype StringObject = Record<string, string>;\ntype UnknownObject = Record<string, unknown>;\ntype AnyObject = Record<any, any>;\n\nconst stringObject: StringObject = { property: 'key' };\nconst anyObject: AnyObject = {\n  1: \"3\",\n  hello: \"world\"\n};\n```\n\n\nAliases are great, sometime forgotten feature in  Typescript. Hopefully, this will article will give you some ideas of how you can leverage them in your project!\n***\n\n_If you enjoyed this article, follow me on [Twitter](https://twitter.com/gc_psk)_\n"},"content":{"compiledSource":"var N=Object.defineProperty,l=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var c=(e,n,s)=>n in e?N(e,n,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[n]=s,a=(e,n)=>{for(var s in n||(n={}))o.call(n,s)&&c(e,s,n[s]);if(p)for(var s of p(n))r.call(n,s)&&c(e,s,n[s]);return e},m=(e,n)=>l(e,d(n));var i=(e,n)=>{var s={};for(var t in e)o.call(e,t)&&n.indexOf(t)<0&&(s[t]=e[t]);if(e!=null&&p)for(var t of p(e))n.indexOf(t)<0&&r.call(e,t)&&(s[t]=e[t]);return s};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var t=s,{components:e}=t,n=i(t,[\"components\"]);return mdx(MDXLayout,m(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"If you've ever worked with Typescript, you surely know what \",mdx(\"inlineCode\",{parentName:\"p\"},\"type aliases\"),\" are for. They helps us create aliases of more complex types, for example arrays of interfaces, union types, etc.\"),mdx(\"p\",null,\"One less-known way they can be leveraged is by simply describing values of primitive types based on their format.\"),mdx(\"p\",null,\"This can accelerate the understanding of a codebase, reduce confusion, and deepen the insights gathered from just reading the types of your code.\"),mdx(\"p\",null,\"For example, we have a DTO with two properties. This is how it would normally be written:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"MyDto\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  id`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n  lastEdited`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"number\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"h3\",null,\"Limitations of simple typing\"),mdx(\"p\",null,\"The above is OK, and generally understandable, but can be better. Suppose it's your first day on a new codebase, and you know nothing about it.\"),mdx(\"p\",null,\"You see the above DTO, but you're trying to understand what it is and what actual formats it expects from you:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"you don't know what's the format of \",mdx(\"inlineCode\",{parentName:\"li\"},\"ID\")),mdx(\"li\",{parentName:\"ul\"},\"you don't know the format of \",mdx(\"inlineCode\",{parentName:\"li\"},\"lastEdited\"),\". Is it a Unix timestamp, or a Julian day? Or the amount of days since Earth was created? Who knows.\")),mdx(\"p\",null,\"So why not describe what theses values are with \",mdx(\"inlineCode\",{parentName:\"p\"},\"type aliases\"),\"?\"),mdx(\"h3\",null,\"Aliasing primitive types based on their format\"),mdx(\"p\",null,\"We can define the types in a global typings file, so they can be reused across the project.\"),mdx(\"p\",null,\"Let's assume that the fields above are, as commonly happen to be, a UUID and a Unix timestamp.\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"type\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token constant\"}),\"UUID\")),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"type\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"UnixTimestamp\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"number\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`))),mdx(\"p\",null,\"And then, we can assign them to our DTO:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"MyDto\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  id`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"UUID\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n  lastEdited`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" UnixTimestamp\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"In my opinion, the above conveys a lot more information than before, and it's certainly more useful to both existing members and newcomers.\"),mdx(\"h3\",null,\"Type Aliases as shortcuts\"),mdx(\"p\",null,\"Type aliases are also useful to shortcut some common type combinations:\"),mdx(\"p\",null,\"Converting inline interfaces to the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Record\"),\" alias:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" myObject\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"key\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" property\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'key'\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// can also be written\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" myObject\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" Record\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" property\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'key'\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`))),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"Record\"),\" type aliases can also be aliased into more granular types:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"type\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"StringObject\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" Record\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"type\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"UnknownObject\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" Record\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"unknown\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"type\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"AnyObject\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" Record\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"any\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"any\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" stringObject\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" StringObject \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" property\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'key'\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" anyObject\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" AnyObject \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"3\"'),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n  hello`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"world\"'),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`))),mdx(\"p\",null,\"Aliases are great, sometime forgotten feature in  Typescript. Hopefully, this will article will give you some ideas of how you can leverage them in your project!\"),mdx(\"hr\",null),mdx(\"p\",null,mdx(\"em\",{parentName:\"p\"},\"If you enjoyed this article, follow me on \",mdx(\"a\",a({parentName:\"em\"},{href:\"https://twitter.com/gc_psk\"}),\"Twitter\"))))}MDXContent.isMDXComponent=!0;\n","scope":{}},"series":[],"morePosts":[{"live":true,"title":"Streamline your code with Typescript assertions","date":"2021-10-30T00:00:00.322Z","slug":"streamline-your-code-with-typescript-assertions","readingTime":"3 min read","collection":"typescript"}],"moreArticles":[{"live":true,"title":"Build Typescript libraries for the browser with Nx","date":"2020-07-25T00:00:00.322Z","slug":"build-typescript-libraries-for-the-browser-with-nx","coverImage":"/assets/images/posts/typescript-libraries-with-nx.webp","collection":"typescript","excerpt":"This article shows how to set up your Webpack configuration to build Typescript libraries with Nx","readingTime":"2 min read","tags":["typescript","nx"]},{"live":true,"title":"Enforce your team coding style with Prettier and TsLint","date":"2019-04-17T00:00:00.322Z","slug":"enforce-your-team-style-with-prettier-and-tslint","coverImage":"/assets/images/posts/enforce-team-coding-style.gif","collection":"typescript","excerpt":"Using TsLint to enforce your team coding style","readingTime":"5 min read","tags":["typescript"]},{"live":true,"title":"Writing scalable Typescript","date":"2019-04-05T00:00:00.322Z","slug":"writing-scalabale-typescript","coverImage":"/assets/images/posts/writing-scalable-typescript.jpeg","collection":"typescript","excerpt":"Let’s explore in detail how to write clean, safe, enterprise-grade Typescript code","readingTime":"10 min read","tags":["typescript"]}],"type":1},"__N_SSG":true}