{"pageProps":{"post":{"live":true,"readingTime":"10 min read","title":"Debugging Memory Leaks in Angular","date":"2019-10-29T00:00:00.000Z","slug":"debugging-memory-leaks-in-angular","coverImage":"https://cdn-images-1.medium.com/max/10624/0*Vu4ib4QAqreImyMW","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"The situations where memory leaks are most likely to happen, and how you can deal with them using Chrome DevTools","content":"\nThis post was originally published, by myself, on the [Bit](https://blog.bitsrc.io) blog\n\n## Introduction to Memory Leaks\n\nBuilding large applications entails writing lots of code, complex pages, long lists, and hundreds (if not more) of components. If you’ve worked at least once in a non-trivial web application, you may have found yourself battling a memory leak for hours and hours.\n\nIn this article, I want to introduce you to a number of situations where memory leaks are most likely to happen, and how you can deal with them thanks to the powerful *Chrome DevTools*.\n\n**Preface**: Angular is a framework that does a really great job at memory management: in fact, you almost never have to do something specific to avoid memory leaks! \nNonetheless, I’ve found myself in a number of scenarios that led to mistakes resulting in memory leaks and, as a consequence, a crippled user-experience for my company’s clients.\n\nNot good.\n\n### What’s a Memory Leak?\n\nIn layman’s terms, a memory leak occurs when an application fails to get rid of unused resources.\n\nIf the memory of an application is using more and more memory without being populated with new resources (images, text, objects, etc.), then the application is likely affected by this sort of performance degradation.\n\n**Tip: **Use [**Bit](https://bit.dev/)** ([Github](https://github.com/teambit/bit)) to easily share and reuse Angular components across your projects, suggest updates, sync changes and build faster as a team.\n\nDon’t waste time rewriting mediocre code — build awesome reusable Angular components, test them in isolation using [Bit](https://bit.dev) and share them on [bit.dev](https://bit.dev).\n\n![Components with Bit: Easily share across projects as a team](https://cdn-images-1.medium.com/max/2000/1*ODhvAjHjB8zPErBYhOFePQ.gif)\n\n### Why Memory Leaks are tricky\n\nThe trickiest aspect of memory leaks is that they are pretty hard bugs to spot. Unlike CPU usage issues, where you can see the UI lagging, memory leaks (especially for smaller apps) are **much a more subtle sort of problem**.\n\nIf not also in charge of QA, the way most developers work is to focus on the context of their task, and very rarely they have to switch page dozens of times, create and re-create large lists, or in general perform long-lived actions that are naturally where memory leaks become apparent.\n\nIn fact, your applications may have dozens of memory leaks who have not yet been discovered!\n\nNowadays, users reload pages less and less often. As someone who works in the financial sector, I should know: traders hate reloading! The computers in offices are rarely restarted and so are browser pages.\n\nThis is why **keeping performance optimal for long-lived sessions is essential**: if an application is leaking memory, the user will at some point realize that it is slower, sluggish, and will likely pause very frequently.\n\nAnd we don’t want our users to get frustrated. Right!?\n\n## Debugging Process\n\nIn this section, we will explore some real-world scenarios in Angular applications where it’s most likely to encounter potential mistakes that lead to memory leaks.\n\nThe irony about this article is that I planned on purposefully add mistakes in my code (using my guinea pig project [Cryptofolio](https://github.com/Gbuomprisco/cryptofolio)) to produce a memory leak.\n\n![Cryptofolio shows live crypto prices](https://cdn-images-1.medium.com/max/6712/1*dvMLBySign-rcQHfjl22nA.gif)\n\nAs it turns out, it wasn’t needed! A leak was already there. All I did in order to reproduce it was to initialize the app with 101 pricers — back and forth a couple of times between pages, et voilá — the memory went nuts!\n\n**Notice**: the application I am using is very small, and as a result, the mistakes won’t cause the app to crash, and more importantly, the objects retained in memory won’t be immediately easy to find in the Heap Snapshots.\n\n### Monitoring Memory with the Performance Monitor tool\n\nThe application I built allows me to display prices in two separates views: list and dashboard; these two are two different pages, so the components contained in each of them are supposed to be destroyed and collected when you navigate to another page.\n\nThe first thing to do is to open the Chrome Dev Tools, open the panel on the right and click on *More Tools* > *Performance Monitor. *The memory of our application is displayed in the blue graph.\n\nAs you can see in the image below, whenever I switch page, the memory jumps up almost 20mb!\n\n![Js heap size increasing when switching page](https://cdn-images-1.medium.com/max/2564/1*5AqFfFGibplrZT3H3FDTIw.gif)\n\nI keep switching back and forth, and this is the result below:\n\n![Performance Monitor](https://cdn-images-1.medium.com/max/6694/1*EqGwTm1ieNl0nik6YvzpLw.png)\n\n🔥154MB and 99% CPU? Clearly, something’s wrong🔥\n\n### Starting the debugging process: Memory Snapshots\n\nThe first thing I do when debugging is to record memory snapshots in two stages:\n\n* at initial load, as soon as the app becomes stable and all the elements have been loaded\n\n* a second time once the initial data is replaced by other data. It’s quite important to make sure your app is not actually adding additional resources, unless of course if that is a bug. For example, you could be switching page or forcing some elements to show/hide\n\nThe above will allow me to compare them with the Dev Tools’ Memory Snapshots.\n\n**Tip**: Make sure you also tick “Event Listeners”: it will help understand if the number of event listeners is piling up.\n\nIn order to take a Memory Snapshot, open the Dev Tools->Memory, select “Heap Snapshot” and then click on the button “Take Snapshot”. The profiles are listed on the left-hand side and you can compare them with each other to visualize which objects have been retained in memory.\n\n### Exploring the Snapshot 🧭\n\nAs you can see in the image below, I proceeded by taking 2 heap snapshots, listed on the left.\n\nWhen the initial snapshot is taken, the tools will show you the summary of the current snapshot, but you can compare two snapshots by choosing “Comparison” from the dropdown above the objects.\n\nThe list displayed by the snapshot can look pretty alien, low-level and unfamiliar if you have been a Web Developer all your life like me, but don’t let that scare you off. The most important thing is to be patient and understand the clues that will lead you to the memory leak.\n\nAs soon as I took the snapshot, I started scrolling through the items looking for clues and familiar pieces of code, and one item immediately caught my attention: *MapSubscriber*.\n\nThat’s kind of familiar, isn’t it? As you can see in the comparison table on the right-hand side, the *Delta* suggests that there have been more items added than removed.\n\n![Heap Snapshot](https://cdn-images-1.medium.com/max/6694/1*bfF0fhPeC1PX8QINgTGzOw.png)\n\nBy clicking on an item in the top panel will immediately redirect the panel below to its “retainers”, or the Object Retaining Tree.\n\nI started digging down the Map destination object until we get to project, which is the function we pass to a map *operator* and that leads to a line in one of the project’s files, asser-pricer.component.ts.\n\nLet’s take a look at the context around that line: it is a simple selection from the store that returns me a price and maps it to a String.\n\nAlso, I used shareReplay(1) to multicast the price observable to the get trend value (e.g. if it went up or down since the previous emission).\n\n```typescript\nthis.price$ = this.pricesFacade\n    .getPriceForAsset(this.asset)\n    .pipe(\n    filter<string>(Boolean),\n    map(price => {\n        return parseFloat(price).toFixed(2);\n    }),\n    shareReplay(1)\n    );\n```\n\n### Rx Subscriptions 🦊\n\nLet’s reflect for a moment about the line we just landed on: the issue is clearly an unsubscribed observable that is retaining the components in the memory.\n\nIt doesn’t matter how many times we’ve been told to clean up our Rx subscriptions: in my experience, this is by far **the most common cause of memory leaks** in Angular applications.\n\nMany developers will probably be thinking: is an open subscription **really** going to cause havoc in a real-world application?\n\n**Yes, it can**.\n\nEspecially for large applications, if the leak happens within a repeated component (lists, tables, infinite scrolling components, etc.), even only one open subscription can cause your application to retain in memory the components until the subscription gets cleaned up.\n\nYou would expect the components to be cleaned up when destroyed, for example:\n\n* when the user navigates to another page\n\n* when the user replaces/filters the elements with a different selection\n\nWhile unsubscribing is a fairly simple concept to understand, and unsubscribing itself (especially is using the async pipe) is easy, there are situations when the full knowledge of the operators we’re using is essential, as it happened in my case.\n\n### ShareReplay, what are you? 🤔\n\nLet’s get back to the issue.\n\nWe found out a possible responsible candidate for our memory leak. The first thing I do is to debug shareReplay to understand why the subscription is not being unsubscribed, which lead me to its source code:\n\n![ShareReplay’s source code](https://cdn-images-1.medium.com/max/2266/1*_fdLmFspJ3wLY7j_feJIjQ.png)\n\nThe long condition around the unsubscription was pretty suspect — why? It turns out, despite me reading articles and documentation plenty of times about this, I missed a pretty important detail about this operator.\n\nIn fact, if we don’t specify the property refCount: true, the subscription will never be unsubscribed. To fully understand why I refer you to this [Angular In Depth article: What’s Changed with ShareReplay](https://blog.angularindepth.com/rxjs-whats-changed-with-sharereplay-65c098843e95).\n\nIn order to fix this, I made the following change:\n\n```typescript\nthis.price$ = this.pricesFacade.getPriceForAsset(this.asset).pipe(\n    filter<string>(Boolean),\n    map(price => {\n        return parseFloat(price).toFixed(2);\n    }),\n    shareReplay({\n        bufferSize: 1,\n        refCount: true\n    })\n);\n```\nAnd now the memory leak from my application is gone!\n\nBut let’s see some other common scenarios — some of which appear even in some extremely popular libraries for Angular.\n\n### Event Listeners\n\nAnother common cause of memory leaks is DOM events that are never unregistered. Some folks may think that using Angular’s Renderer may take care of it, but that is only the cause if the events are defined in the template, just as with the async pipe.\n\nLet’s see a quick and common example of a component that registers a scroll listener on the body, without never unregistering the event:\n\n```typescript\n@Component({//...})\nexport class ScrollComponent {\n    constructor(private renderer: Renderer2) {}\n\n    ngOnInit() {\n    this.renderer.listen(document.body, 'scroll', () => {\n        this.updatePosition();\n    });\n    }\n\n    updatePosition() { /* implementation */ }\n}\n```\n\nThis does, indeed, create a memory leak every time we instantiate ScrollComponent — so let’s fix it:\n\n```typescript\n@Component({...})\nexport class ScrollComponent {\n    private listeners = [];\n\n    constructor(private renderer: Renderer2) {}\n\n    ngOnInit() {\n        const listener = this.renderer.listen(\n        document.body, \n        'scroll', \n        () => {\n            this.updatePosition();\n        });\n\n        this.listeners.push(listener);\n    }\n\n    ngOnDestroy() {\n        this.listeners.forEach(listener => listener());\n    }\n\n    updatePosition() { /* implementation */ }\n}\n```\n\nUnregistering all the events prevents the component ScrollComponent to be retained in memory and will be cleaned up once destroyed, along with its children.\n\n### Websocket Connections\n\nVery similarly, WebSocket connections must always be closed when unused. Imagine we have a component PricerComponent that subscribes to a WebSocket and displays incoming cryptocurrency prices.\n\n```typescript\n@Component({\n    selector: 'pricer',\n    template: `\n        <span>{{ id | titlecase }}:</span>\n        <span>{{ ( price$ | async) || 'loading...' }}</span>\n    `\n})\nexport class PricerComponent  {\n    @Input() id: string;\n\n    public price$ = new Subject();\n    private static Endpoint = 'wss://ws.coincap.io/prices/';\n    private webSocket: WebSocket;\n    \n    ngOnInit() {\n        this.webSocket = new WebSocket(\n            this.getEndpoint(this.id)\n        );\n\n        this.webSocket.onmessage = (msg) => {\n            const data = JSON.parse(msg.data);\n            this.price$.next(data[this.id]);\n        };\n    }\n\n    private getEndpoint(id: string) {\n        return PricerComponent.Endpoint + '?assets=' + id;\n    }\n}\n```\n\nLet’s explain the snippet:\n\n* we receive an ID as input and we subscribe to it via WebSocket every time the component is initialized\n\n* when is the WebSocket connection cleared? Never! Once again, we’re missing the good gold ngOnDestroy hook to take care of it when the component gets destroyed\n\n* This creates multiple issues: not only we’re creating multiple WebSocket connections, but we’re also retaining PricerComponent in memory every time it gets re-initialized\n\nLet’s take a snapshot and analyze it!\n\n![Heap Snapshot WebSocket example](https://cdn-images-1.medium.com/max/5030/1*NDLA9UIZD3J1KOADfME6mg.png)\n\nAs per the image above, I start by comparing the initial load (with 1 pricer) with another snapshot taken after a small session.\n\nThe Delta reveals me where additional memory has been allocated, so I start digging in the (closure) tree searching for clues back to my code.\n\nAfter scrolling a little bit, I stumble on this closure, which takes me back exactly to the callback passed to webSocket.onmessage!\n\n![](https://cdn-images-1.medium.com/max/4160/1*Sh-HgR0QZBmp8wlXsxQ6YQ.png)\n\nDebugging this case was admittedly pretty easy, but in some cases, it can be pretty daunting. There is a way we can help facilitate the debugging process by **naming functions** so that they will appear in the Memory Snapshot.\n\nFor example, I could have written:\n\n```typescript\nconst onPriceReceived = (msg: MessageEvent) => {\n    const data = JSON.parse(msg.data);\n    this.price$.next(data[id]);\n};\n\nthis.webSocket.onmessage = onPriceReceived;\n```\n\nThis bug is easily solved by adding the following method:\n\n```typescript\nngOnDestroy() {\n    this.webSocket.close();\n}\n```\n\nYou can see the full example at [this Stackblitz link](https://stackblitz.com/edit/angular-hubedk).\n\n## Takeaways ⭐\n\n* Memory Leaks are quite hard to find and debug — my suggestion is to keep the Performance Monitor open from time to time and see if the memory is stable\n\n* Angular does a great job at managing memory; with that said, we need to watch out for open subscriptions (Observables, Subjects, NgRx Store Selections), DOM events, WebSocket connections, etc.\n\n* Learn how to use well the Chrome Dev Tools! It is essential for debugging performance and memory leaks. Even if it is intimidating to see so much low-level terminology, try to read and learn as much as possible about it\n\n* Name closures! It helps with debuggability and, in my opinion, makes code more readable\n\n### Resources\n\n* [Memory problems](https://developers.google.com/web/tools/chrome-devtools/memory-problems) (Chrome Dev Tools)\n\n* [Record Heap Snapshot](https://developers.google.com/web/tools/chrome-devtools/memory-problems/heap-snapshots)\n\n* [What’s Changed with ShareReplay](https://blog.angularindepth.com/rxjs-whats-changed-with-sharereplay-65c098843e95)\n\n* [Debugging Javascript Like a Pro](https://blog.bitsrc.io/debugging-javascript-like-a-pro-a2e0f6c53c2e)","canonical":"https://blog.bitsrc.io/debugging-memory-leaks-in-angular-4bc7b3eab569","tags":["angular","performance"]},"content":{"compiledSource":"var l=Object.defineProperty,N=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var r=(a,n,t)=>n in a?l(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))o.call(n,t)&&r(a,t,n[t]);if(p)for(var t of p(n))c.call(n,t)&&r(a,t,n[t]);return a},m=(a,n)=>N(a,u(n));var i=(a,n)=>{var t={};for(var s in a)o.call(a,s)&&n.indexOf(s)<0&&(t[s]=a[s]);if(a!=null&&p)for(var s of p(a))n.indexOf(s)<0&&c.call(a,s)&&(t[s]=a[s]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var s=t,{components:a}=s,n=i(s,[\"components\"]);return mdx(MDXLayout,m(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"This post was originally published, by myself, on the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://blog.bitsrc.io\"}),\"Bit\"),\" blog\"),mdx(\"h2\",null,\"Introduction to Memory Leaks\"),mdx(\"p\",null,\"Building large applications entails writing lots of code, complex pages, long lists, and hundreds (if not more) of components. If you\\u2019ve worked at least once in a non-trivial web application, you may have found yourself battling a memory leak for hours and hours.\"),mdx(\"p\",null,\"In this article, I want to introduce you to a number of situations where memory leaks are most likely to happen, and how you can deal with them thanks to the powerful \",mdx(\"em\",{parentName:\"p\"},\"Chrome DevTools\"),\".\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"Preface\"),`: Angular is a framework that does a really great job at memory management: in fact, you almost never have to do something specific to avoid memory leaks!\nNonetheless, I\\u2019ve found myself in a number of scenarios that led to mistakes resulting in memory leaks and, as a consequence, a crippled user-experience for my company\\u2019s clients.`),mdx(\"p\",null,\"Not good.\"),mdx(\"h3\",null,\"What\\u2019s a Memory Leak?\"),mdx(\"p\",null,\"In layman\\u2019s terms, a memory leak occurs when an application fails to get rid of unused resources.\"),mdx(\"p\",null,\"If the memory of an application is using more and more memory without being populated with new resources (images, text, objects, etc.), then the application is likely affected by this sort of performance degradation.\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"Tip: \"),\"Use \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://bit.dev/\"}),\"**Bit\"),\"** (\",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/teambit/bit\"}),\"Github\"),\") to easily share and reuse Angular components across your projects, suggest updates, sync changes and build faster as a team.\"),mdx(\"p\",null,\"Don\\u2019t waste time rewriting mediocre code \\u2014 build awesome reusable Angular components, test them in isolation using \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://bit.dev\"}),\"Bit\"),\" and share them on \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://bit.dev\"}),\"bit.dev\"),\".\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/2000/1*ODhvAjHjB8zPErBYhOFePQ.gif\",alt:\"Components with Bit: Easily share across projects as a team\"}))),mdx(\"h3\",null,\"Why Memory Leaks are tricky\"),mdx(\"p\",null,\"The trickiest aspect of memory leaks is that they are pretty hard bugs to spot. Unlike CPU usage issues, where you can see the UI lagging, memory leaks (especially for smaller apps) are \",mdx(\"strong\",{parentName:\"p\"},\"much a more subtle sort of problem\"),\".\"),mdx(\"p\",null,\"If not also in charge of QA, the way most developers work is to focus on the context of their task, and very rarely they have to switch page dozens of times, create and re-create large lists, or in general perform long-lived actions that are naturally where memory leaks become apparent.\"),mdx(\"p\",null,\"In fact, your applications may have dozens of memory leaks who have not yet been discovered!\"),mdx(\"p\",null,\"Nowadays, users reload pages less and less often. As someone who works in the financial sector, I should know: traders hate reloading! The computers in offices are rarely restarted and so are browser pages.\"),mdx(\"p\",null,\"This is why \",mdx(\"strong\",{parentName:\"p\"},\"keeping performance optimal for long-lived sessions is essential\"),\": if an application is leaking memory, the user will at some point realize that it is slower, sluggish, and will likely pause very frequently.\"),mdx(\"p\",null,\"And we don\\u2019t want our users to get frustrated. Right!?\"),mdx(\"h2\",null,\"Debugging Process\"),mdx(\"p\",null,\"In this section, we will explore some real-world scenarios in Angular applications where it\\u2019s most likely to encounter potential mistakes that lead to memory leaks.\"),mdx(\"p\",null,\"The irony about this article is that I planned on purposefully add mistakes in my code (using my guinea pig project \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/Gbuomprisco/cryptofolio\"}),\"Cryptofolio\"),\") to produce a memory leak.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/6712/1*dvMLBySign-rcQHfjl22nA.gif\",alt:\"Cryptofolio shows live crypto prices\"}))),mdx(\"p\",null,\"As it turns out, it wasn\\u2019t needed! A leak was already there. All I did in order to reproduce it was to initialize the app with 101 pricers \\u2014 back and forth a couple of times between pages, et voil\\xE1 \\u2014 the memory went nuts!\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"Notice\"),\": the application I am using is very small, and as a result, the mistakes won\\u2019t cause the app to crash, and more importantly, the objects retained in memory won\\u2019t be immediately easy to find in the Heap Snapshots.\"),mdx(\"h3\",null,\"Monitoring Memory with the Performance Monitor tool\"),mdx(\"p\",null,\"The application I built allows me to display prices in two separates views: list and dashboard; these two are two different pages, so the components contained in each of them are supposed to be destroyed and collected when you navigate to another page.\"),mdx(\"p\",null,\"The first thing to do is to open the Chrome Dev Tools, open the panel on the right and click on \",mdx(\"em\",{parentName:\"p\"},\"More Tools\"),\" > \",mdx(\"em\",{parentName:\"p\"},\"Performance Monitor. \"),\"The memory of our application is displayed in the blue graph.\"),mdx(\"p\",null,\"As you can see in the image below, whenever I switch page, the memory jumps up almost 20mb!\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/2564/1*5AqFfFGibplrZT3H3FDTIw.gif\",alt:\"Js heap size increasing when switching page\"}))),mdx(\"p\",null,\"I keep switching back and forth, and this is the result below:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/6694/1*EqGwTm1ieNl0nik6YvzpLw.png\",alt:\"Performance Monitor\"}))),mdx(\"p\",null,\"\\u{1F525}154MB and 99% CPU? Clearly, something\\u2019s wrong\\u{1F525}\"),mdx(\"h3\",null,\"Starting the debugging process: Memory Snapshots\"),mdx(\"p\",null,\"The first thing I do when debugging is to record memory snapshots in two stages:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"at initial load, as soon as the app becomes stable and all the elements have been loaded\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"a second time once the initial data is replaced by other data. It\\u2019s quite important to make sure your app is not actually adding additional resources, unless of course if that is a bug. For example, you could be switching page or forcing some elements to show/hide\"))),mdx(\"p\",null,\"The above will allow me to compare them with the Dev Tools\\u2019 Memory Snapshots.\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"Tip\"),\": Make sure you also tick \\u201CEvent Listeners\\u201D: it will help understand if the number of event listeners is piling up.\"),mdx(\"p\",null,\"In order to take a Memory Snapshot, open the Dev Tools->Memory, select \\u201CHeap Snapshot\\u201D and then click on the button \\u201CTake Snapshot\\u201D. The profiles are listed on the left-hand side and you can compare them with each other to visualize which objects have been retained in memory.\"),mdx(\"h3\",null,\"Exploring the Snapshot \\u{1F9ED}\"),mdx(\"p\",null,\"As you can see in the image below, I proceeded by taking 2 heap snapshots, listed on the left.\"),mdx(\"p\",null,\"When the initial snapshot is taken, the tools will show you the summary of the current snapshot, but you can compare two snapshots by choosing \\u201CComparison\\u201D from the dropdown above the objects.\"),mdx(\"p\",null,\"The list displayed by the snapshot can look pretty alien, low-level and unfamiliar if you have been a Web Developer all your life like me, but don\\u2019t let that scare you off. The most important thing is to be patient and understand the clues that will lead you to the memory leak.\"),mdx(\"p\",null,\"As\\xA0soon\\xA0as I\\xA0took\\xA0the\\xA0snapshot, I started scrolling through the items\\xA0looking\\xA0for\\xA0clues\\xA0and\\xA0familiar\\xA0pieces\\xA0of\\xA0code, and one item immediately caught my attention: \",mdx(\"em\",{parentName:\"p\"},\"MapSubscriber\"),\".\"),mdx(\"p\",null,\"That\\u2019s kind of familiar, isn\\u2019t it? As you can see in the comparison table on the right-hand side, the \",mdx(\"em\",{parentName:\"p\"},\"Delta\"),\" suggests that there have been more items added than removed.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/6694/1*bfF0fhPeC1PX8QINgTGzOw.png\",alt:\"Heap Snapshot\"}))),mdx(\"p\",null,\"By clicking on an item in the top panel will immediately redirect the panel below to its \\u201Cretainers\\u201D, or the Object Retaining Tree.\"),mdx(\"p\",null,\"I started digging down the Map destination object until we get to project, which is the function we pass to a map \",mdx(\"em\",{parentName:\"p\"},\"operator\"),\" and that leads to a line in one of the project\\u2019s files, asser-pricer.component.ts.\"),mdx(\"p\",null,\"Let\\u2019s take a look at the context around that line: it is a simple selection from the store that returns me a price and maps it to a String.\"),mdx(\"p\",null,\"Also, I used shareReplay(1) to multicast the price observable to the get trend value (e.g. if it went up or down since the previous emission).\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"price$ \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),`pricesFacade\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"getPriceForAsset\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"asset\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"pipe\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token generic-function\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token function\"}),\"filter\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token generic class-name\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\">\"))),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"Boolean\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"map\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"price \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"parseFloat\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"price\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"toFixed\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"shareReplay\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`))),mdx(\"h3\",null,\"Rx Subscriptions \\u{1F98A}\"),mdx(\"p\",null,\"Let\\u2019s reflect for a moment about the line we just landed on: the issue is clearly an unsubscribed observable that is retaining the components in the memory.\"),mdx(\"p\",null,\"It doesn\\u2019t matter how many times we\\u2019ve been told to clean up our Rx subscriptions: in my experience, this is by far \",mdx(\"strong\",{parentName:\"p\"},\"the most common cause of memory leaks\"),\" in Angular applications.\"),mdx(\"p\",null,\"Many developers will probably be thinking: is an open subscription \",mdx(\"strong\",{parentName:\"p\"},\"really\"),\" going to cause havoc in a real-world application?\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"Yes, it can\"),\".\"),mdx(\"p\",null,\"Especially for large applications, if the leak happens within a repeated component (lists, tables, infinite scrolling components, etc.), even only one open subscription can cause your application to retain in memory the components until the subscription gets cleaned up.\"),mdx(\"p\",null,\"You would expect the components to be cleaned up when destroyed, for example:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"when the user navigates to another page\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"when the user replaces/filters the elements with a different selection\"))),mdx(\"p\",null,\"While unsubscribing is a fairly simple concept to understand, and unsubscribing itself (especially is using the async pipe) is easy, there are situations when the full knowledge of the operators we\\u2019re using is essential, as it happened in my case.\"),mdx(\"h3\",null,\"ShareReplay, what are you? \\u{1F914}\"),mdx(\"p\",null,\"Let\\u2019s get back to the issue.\"),mdx(\"p\",null,\"We found out a possible responsible candidate for our memory leak. The first thing I do is to debug shareReplay to understand why the subscription is not being unsubscribed, which lead me to its source code:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/2266/1*_fdLmFspJ3wLY7j_feJIjQ.png\",alt:\"ShareReplay\\u2019s source code\"}))),mdx(\"p\",null,\"The long condition around the unsubscription was pretty suspect \\u2014 why? It turns out, despite me reading articles and documentation plenty of times about this, I missed a pretty important detail about this operator.\"),mdx(\"p\",null,\"In fact, if we don\\u2019t specify the property refCount: true, the subscription will never be unsubscribed. To fully understand why I refer you to this \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://blog.angularindepth.com/rxjs-whats-changed-with-sharereplay-65c098843e95\"}),\"Angular In Depth article: What\\u2019s Changed with ShareReplay\"),\".\"),mdx(\"p\",null,\"In order to fix this, I made the following change:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"price$ \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"pricesFacade\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"getPriceForAsset\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"asset\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"pipe\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token generic-function\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token function\"}),\"filter\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token generic class-name\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\">\"))),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"Boolean\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"map\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"price \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"parseFloat\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"price\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"toFixed\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"2\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"shareReplay\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        bufferSize`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"1\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        refCount`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`))),mdx(\"p\",null,\"And now the memory leak from my application is gone!\"),mdx(\"p\",null,\"But let\\u2019s see some other common scenarios \\u2014 some of which appear even in some extremely popular libraries for Angular.\"),mdx(\"h3\",null,\"Event Listeners\"),mdx(\"p\",null,\"Another common cause of memory leaks is DOM events that are never unregistered. Some folks may think that using Angular\\u2019s Renderer may take care of it, but that is only the cause if the events are defined in the template, just as with the async pipe.\"),mdx(\"p\",null,\"Let\\u2019s see a quick and common example of a component that registers a scroll listener on the body, without never unregistering the event:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token decorator\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token at operator\"}),\"@\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token function\"}),\"Component\")),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"//...})\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"export\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token class-name\"}),\"ScrollComponent\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"constructor\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" renderer\",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" Renderer2\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"ngOnInit\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"renderer\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"listen\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"document\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"body\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'scroll'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"updatePosition\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"updatePosition\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"/* implementation */\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"This does, indeed, create a memory leak every time we instantiate ScrollComponent \\u2014 so let\\u2019s fix it:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token decorator\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token at operator\"}),\"@\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token function\"}),\"Component\")),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"...\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"export\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token class-name\"}),\"ScrollComponent\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" listeners \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"constructor\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" renderer\",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" Renderer2\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"ngOnInit\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" listener \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"renderer\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"listen\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n        document`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"body\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),` \n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'scroll'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),` \n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n            `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"updatePosition\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"listeners\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"push\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"listener\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"ngOnDestroy\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"listeners\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"forEach\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"listener \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"listener\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"updatePosition\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"/* implementation */\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"Unregistering all the events prevents the component ScrollComponent to be retained in memory and will be cleaned up once destroyed, along with its children.\"),mdx(\"h3\",null,\"Websocket Connections\"),mdx(\"p\",null,\"Very similarly, WebSocket connections must always be closed when unused. Imagine we have a component PricerComponent that subscribes to a WebSocket and displays incoming cryptocurrency prices.\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token decorator\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token at operator\"}),\"@\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token function\"}),\"Component\")),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    selector`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'pricer'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    template`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token template-string\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token template-punctuation string\"}),\"`\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token string\"})),`\n`,mdx(\"span\",e({parentName:\"span\"},{className:\"token string\"}),\"        <span>{{ id | titlecase }}:</span>\"),`\n`,mdx(\"span\",e({parentName:\"span\"},{className:\"token string\"}),\"        <span>{{ ( price$ | async) || 'loading...' }}</span>\"),`\n`,mdx(\"span\",e({parentName:\"span\"},{className:\"token string\"}),\"    \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token template-punctuation string\"}),\"`\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"export\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token class-name\"}),\"PricerComponent\"),\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token decorator\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token at operator\"}),\"@\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token function\"}),\"Input\")),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" id\",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"public\"),\" price$ \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"new\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token class-name\"}),\"Subject\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"static\"),\" Endpoint \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'wss://ws.coincap.io/prices/'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" webSocket\",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" WebSocket\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    \n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"ngOnInit\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"webSocket \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"new\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token class-name\"}),\"WebSocket\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n            `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"getEndpoint\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"id\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"webSocket\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function-variable function\"}),\"onmessage\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"msg\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n            `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" data \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token constant\"}),\"JSON\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"parse\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"msg\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"data\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n            `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"price$\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"next\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"data\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"id\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"getEndpoint\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"id\",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" PricerComponent\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"Endpoint \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'?assets='\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"+\"),\" id\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"Let\\u2019s explain the snippet:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"we receive an ID as input and we subscribe to it via WebSocket every time the component is initialized\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"when is the WebSocket connection cleared? Never! Once again, we\\u2019re missing the good gold ngOnDestroy hook to take care of it when the component gets destroyed\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"This creates multiple issues: not only we\\u2019re creating multiple WebSocket connections, but we\\u2019re also retaining PricerComponent in memory every time it gets re-initialized\"))),mdx(\"p\",null,\"Let\\u2019s take a snapshot and analyze it!\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/5030/1*NDLA9UIZD3J1KOADfME6mg.png\",alt:\"Heap Snapshot WebSocket example\"}))),mdx(\"p\",null,\"As per the image above, I start by comparing the initial load (with 1 pricer) with another snapshot taken after a small session.\"),mdx(\"p\",null,\"The Delta reveals me where additional memory has been allocated, so I start digging in the (closure) tree searching for clues back to my code.\"),mdx(\"p\",null,\"After scrolling a little bit, I stumble on this closure, which takes me back exactly to the callback passed to webSocket.onmessage!\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"https://cdn-images-1.medium.com/max/4160/1*Sh-HgR0QZBmp8wlXsxQ6YQ.png\",alt:null}))),mdx(\"p\",null,\"Debugging this case was admittedly pretty easy, but in some cases, it can be pretty daunting. There is a way we can help facilitate the debugging process by \",mdx(\"strong\",{parentName:\"p\"},\"naming functions\"),\" so that they will appear in the Memory Snapshot.\"),mdx(\"p\",null,\"For example, I could have written:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function-variable function\"}),\"onPriceReceived\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"msg\",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" MessageEvent\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" data \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token constant\"}),\"JSON\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"parse\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"msg\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"data\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"price$\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"next\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"data\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"id\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"webSocket\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"onmessage \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" onPriceReceived\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`))),mdx(\"p\",null,\"This bug is easily solved by adding the following method:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"ngOnDestroy\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"webSocket\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"close\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"You can see the full example at \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://stackblitz.com/edit/angular-hubedk\"}),\"this Stackblitz link\"),\".\"),mdx(\"h2\",null,\"Takeaways \\u2B50\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Memory Leaks are quite hard to find and debug \\u2014 my suggestion is to keep the Performance Monitor open from time to time and see if the memory is stable\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Angular does a great job at managing memory; with that said, we need to watch out for open subscriptions (Observables, Subjects, NgRx Store Selections), DOM events, WebSocket connections, etc.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Learn how to use well the Chrome Dev Tools! It is essential for debugging performance and memory leaks. Even if it is intimidating to see so much low-level terminology, try to read and learn as much as possible about it\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Name closures! It helps with debuggability and, in my opinion, makes code more readable\"))),mdx(\"h3\",null,\"Resources\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},mdx(\"a\",e({parentName:\"p\"},{href:\"https://developers.google.com/web/tools/chrome-devtools/memory-problems\"}),\"Memory problems\"),\" (Chrome Dev Tools)\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},mdx(\"a\",e({parentName:\"p\"},{href:\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/heap-snapshots\"}),\"Record Heap Snapshot\"))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},mdx(\"a\",e({parentName:\"p\"},{href:\"https://blog.angularindepth.com/rxjs-whats-changed-with-sharereplay-65c098843e95\"}),\"What\\u2019s Changed with ShareReplay\"))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},mdx(\"a\",e({parentName:\"p\"},{href:\"https://blog.bitsrc.io/debugging-javascript-like-a-pro-a2e0f6c53c2e\"}),\"Debugging Javascript Like a Pro\")))))}MDXContent.isMDXComponent=!0;\n","scope":{}},"series":[],"morePosts":[],"moreArticles":[{"live":true,"readingTime":"2 min read","title":"Benchmarking Angular 12 with Webpack 5","date":"2021-05-14T00:00:00.322Z","slug":"webpack-5-angular12","coverImage":"/assets/images/posts/benchmarking-webpack-5.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Angular 12 has been released and with it the much awaited Webpack 5 upgrade. In this post I benchmarked the bundle-size and compilation speed against the previous version","tags":["angular"]},{"live":true,"readingTime":"5 min read","title":"Principles for creating libraries with Nx and Angular","date":"2021-02-07T00:00:00.322Z","slug":"how-to-organize-nx-modules-with-angular","coverImage":"/assets/images/posts/organize-nx-modules-ngrx.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Working with Nx may be confusing. This article explains how I create Nx libraries and the principles behind my motivations","tags":["nx","angular"]},{"live":true,"readingTime":"3 min read","title":"Where to put your Angular models?","date":"2020-08-03T00:00:00.322Z","slug":"angular-where-to-put-models","ogImage":{"url":"/assets/images/posts/where-put-angular-models.png"},"coverImage":"/assets/images/posts/where-put-angular-models.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Organizing entities and models in your Angular app may be hard. This article explains where to put your entities and what mistakes to watch out for","tags":["angular","architecture"]},{"live":true,"readingTime":"5 min read","title":"Using the Intersection Observer API with Angular","date":"2020-08-01T00:00:00.322Z","slug":"intersection-observer-with-angular","coverImage":"/assets/images/posts/intersection-observer.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"This article shows how to build a directive with Angular that uses the Intersection Observer API to check when an element becomes visible on the page","tags":["angular","performance"]},{"live":true,"readingTime":"3 min read","title":"Setters vs ngOnChanges: which one is better?","date":"2020-07-30T00:00:00.322Z","slug":"setters-vs-ng-on-changes","coverImage":"/assets/images/posts/setters-vs-on-changes.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Listening to Input changes can be done in different ways. But which one should you use?","tags":["angular"]},{"live":true,"readingTime":"3 min read","title":"Async Rendering with a single Rx Operator","date":"2020-07-11T00:00:00.322Z","slug":"async-rendering-with-a-single-rx-operator","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Increase your app rendering performance with this simple Rx operator","tags":["angular","rxjs"]}],"type":1},"__N_SSG":true}