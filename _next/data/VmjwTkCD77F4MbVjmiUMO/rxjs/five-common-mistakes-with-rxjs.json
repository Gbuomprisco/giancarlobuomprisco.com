{"pageProps":{"post":{"live":true,"readingTime":"6 min read","title":"5 common mistakes with RxJS","date":"2020-08-03T00:00:00.322Z","slug":"five-common-mistakes-with-rxjs","coverImage":"https://miro.medium.com/max/1400/1*SZ7Ubdlu8CbNjvI8-LezVw.jpeg","collection":{"name":"RxJs","primaryColor":"#d81b60","primaryColorLight":"#d81b6085","contrastColor":"#fff","logo":"/assets/images/collections/rxjs.webp"},"excerpt":"A list of common mistakes while using RxJS, and explanations on what to do instead","content":"\nThis post was originally published, by myself, on the [Bit](https://blog.bitsrc.io/5-common-mistakes-with-rxjs-1b09d4c19387) blog\n\nAs a Consultant, I’ve had the privilege to work with many teams and projects in a relatively short amount of time.\n\nThis not only allowed me to learn a lot from the existing codebases and team members but also to understand the biggest mistakes committed by the teams who weren’t very familiar with Rx and Angular.\n\n## 1) Not Unsubscribing\n\nI and many others have talked at length about the subject, but this is still the most common mistake I normally see — i.e. not unsubscribing from a stream at all.\n\nThis has various consequences such as:\n- Causing memory leaks\n- Causing unwanted callbacks being called\n- Potentially, causing serious bugs in your app\n\nThe best and most elegant way to unsubscribe from Observable is using a subject that emits a value when the component is destroyed.\n\nAlternatively, you can maintain a class property on your component with the subscription, and unsubscribe it when the component is destroyed.\n\nIt’s pretty important, don’t forget.\n\n## 2) Omitting an initial value\n\nThis happens pretty commonly with Angular forms. Say you subscribe to a stream expecting to get the value — but you never get one. How is that possible?\n\nWell — sometimes it’s caused by the fact that the stream was not initialized by an initial value, and an event was never dispatched.\n\nHere’s a common scenario with Angular’s forms:\n\n```typescript\nconst name = new FormControl('Giancarlo');\nconst formGroup = new FormGroup({ name });\nconst valueChanges$ = formGroup.valueChanges;\n\nvalueChanges.subscribe((value) => {\n    // do something\n});\n```\n\nUnless the user changes the `name` FormControl in some way, the callback will never be called.\n\nBut — we do want the subscription to emit using the initial value of the `FormGroup` (and many would expect it to do so).\n\nIn this case, we need to push an initial value using the operator `startWith`:\n\n```typescript\nconst valueChanges$ = formGroup.valueChanges.pipe(\n  startWith(formGroup.value)\n);\n\nvalueChanges.subscribe((value) => {\n    // do something\n});\n```\n\nIn this case, we will receive an emission using the initial value of the form, and all the changes emitted after that.\n\n## 3) Using the wrong Operators\n\nThere are a lot of operators out there — and while you certainly don’t need to learn them all, you need to make sure you understand the details of each one that you are using.\n\nSmall differences can have big consequences.\n\n\n### Example: mergeMap vs switchMap\n\nOne of the most commonly used operators is `mergeMap`. This operator allows you to flatten an inner Observable and will maintain many active streams for each event: this is great in some situations, and not very ideal in others.\n\nIn many cases, you may want to instead maintain only 1 active subscription. For example, if you have an event whose events call an HTTP endpoint, you may want to cancel the outgoing requests and only call the very latest one: in this case, you’ll be better off with `switchMap`.\n\nIf you’re not careful, `mergeMap` may cause duplicate and unwanted subscriptions, while `switchMap` can lead to race conditions. Ultimately, both may lead to bugs and your code malfunctioning.\n\nThis is one example of the many, sometimes tiny, differences that make RxJS operators.\n\nAs I said above — you do not need to know every Rx operator. You do need, though, to understand the small peculiarities of the ones you’re using and compare with similar others to understand which one is suitable in your case.\n\nOther notable differences you should be aware of:\n- `zip` vs `forkJoin` vs `combineLatest` vs r`ace\n- `merge` vs `combineLatest`\n- `timer` vs `interval`\n- `never` vs `empty`\n- `of` vs `from`\n- `buffer` vs `window`\n\n## 4) Using the wrong type of Subject\n\nAnother important mistake not to commit is to not choose the wrong type of Subject for your task.\n\nSubjects are a special type of Observables that allow you to push values in the stream and also retrieve them by subscribing to it.\n\nWhile normal `Subject` likely cover most situations, there are slight differences that you should be aware of.\n\n### Late Subscribers\n\nOne common scenario is when your Subject emits events before an observer subscribes to its changes. \n\nIf you’re expecting your subscriber to receive the data, you’re out of luck: it won’t.\nIn this kind of scenario, you should instead opt for a `ReplaySubject`, which is able to replay all the events it received to also late subscribers. \n\nIt is particularly useful also when you only want to keep the latest value in memory which you can do by defining its buffer size.\n\nAnother alternative is the `BehaviorSubject` — which instead requires a value in order to be defined.\n\n## 5) Performing imperative logic inside the Subscription callback\n\nOne of the greatest things about RxJs is that combining operators and reusing their logic is an incredibly nice (and easy) way to build reusable bits of code.\n\nMany of the benefits from writing Rx code ends once we subscribe to an Observable: the logic we write within subscription callbacks is not Rx-land and it’s the beginning of the end of FRP in our code.\n\nI am not saying you should never subscribe, of course, but my recommendation is to keep the logic within the subscription callbacks as small as possible — and wherever you can, avoid subscribing directly (for example, using the Angular async pipe).\n\nWhat are the drawbacks of using logic within subscriptions?\n\n### Limited Reusability\n\nRxJS streams are pipeable, which means they can be combined and extended and therefore reused.\n\nAny time you subscribe and perform logic within the subscription, you take away some logic that instead could have been offloaded to an Rx operator:\n\n```typescript\nconst allItems$ = this.service.items$.pipe(\n  filter(Boolean)\n);\n\nconst doneItems$ = allItems$.pipe(\n   map(items => items.filter(item => item.done)),\n);\n\nconst numberOfRemainingItems$ = combineLatest(\n  [allItems$, doneItems$]\n).pipe(\n   map(([items, doneItems]) => items - doneItems),\n);\n```\n\nAs you can see, creating intermediate streams, or offloading logic to separate operators, is an awesome way of reusing logic across your application.\n\nAs a rule of thumb:\n- do not check whether a value is truthy within your subscription, you can easily handle it with the operator `filter(Boolean)`\n- don’t transform data in your subscription\n- side effects: for example, showing/hiding a loading icon, can be done with the `tap` or/and the `finalize` operators\n\n### Less Declarative\n\nLet’s see an example between an imperative and a declarative snippet:\n\n```typescript\nclass UsersDashboardComponent {\n  users: User[];\n  activeUsers: [];\n  bannedUsers: [];\n\n  constructor(private service: UsersService) {\n     this.service.users$.subscribe(users => {\n        if (users) {\n          this.users = users;\n          this.activeUsers = users.filter(user => user.active);\n          this.bannedUsers = users.filter(user => user.banned);\n        }\n     });\n  }\n}\n```\n\nNow, let’s convert the above declarative streams:\n\n```typescript\nclass UsersDashboardComponent {\n  users$ = this.service.users$.pipe(\n    filter(Boolean)\n  );\n\n  activeUsers$ = this.users$.pipe(\n    map(users => users.filter(user => user.active)),\n  );\n\n  bannedUsers$ = this.users$.pipe(\n    map(users => users.filter(user => user.banned)),\n  );\n\n  constructor(private service: UsersService) {}\n}\n```\n\nWith that said, don’t forget to subscribe either, otherwise, your observables will never emit.\n\n## Final Words\n\nRx is a pretty awesome library and a tool that can help you handle complex asynchronous aspects of your application with ease. It’s also quite big, and most often misunderstood.\n\nMaking sure you follow the recommendations above will at least ensure that you’re taking care of an extremely common cause of mistakes, or bugs that you spend hours trying to fix.\n\nIn summary:\n- Unsubscribe, always\n- Don’t omit an initial value if you expect one\n- Learn well the operators that you’re using. Small differences can lead to big mistakes.\n- Use the right type of `Subject`: they are suited for different use-cases\n- Write as much logic as possible declaratively and within your streams. Also, reuse the logic with custom operators or intermediate streams.","canonical":"https://blog.bitsrc.io/5-common-mistakes-with-rxjs-1b09d4c19387","tags":["rxjs"]},"content":{"compiledSource":"var l=Object.defineProperty,u=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var i=(a,n,s)=>n in a?l(a,n,{enumerable:!0,configurable:!0,writable:!0,value:s}):a[n]=s,e=(a,n)=>{for(var s in n||(n={}))p.call(n,s)&&i(a,s,n[s]);if(o)for(var s of o(n))c.call(n,s)&&i(a,s,n[s]);return a},r=(a,n)=>u(a,N(n));var m=(a,n)=>{var s={};for(var t in a)p.call(a,t)&&n.indexOf(t)<0&&(s[t]=a[t]);if(a!=null&&o)for(var t of o(a))n.indexOf(t)<0&&c.call(a,t)&&(s[t]=a[t]);return s};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var t=s,{components:a}=t,n=m(t,[\"components\"]);return mdx(MDXLayout,r(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"This post was originally published, by myself, on the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://blog.bitsrc.io/5-common-mistakes-with-rxjs-1b09d4c19387\"}),\"Bit\"),\" blog\"),mdx(\"p\",null,\"As a Consultant, I\\u2019ve had the privilege to work with many teams and projects in a relatively short amount of time.\"),mdx(\"p\",null,\"This not only allowed me to learn a lot from the existing codebases and team members but also to understand the biggest mistakes committed by the teams who weren\\u2019t very familiar with Rx and Angular.\"),mdx(\"h2\",null,\"1) Not Unsubscribing\"),mdx(\"p\",null,\"I and many others have talked at length about the subject, but this is still the most common mistake I normally see \\u2014 i.e. not unsubscribing from a stream at all.\"),mdx(\"p\",null,\"This has various consequences such as:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Causing memory leaks\"),mdx(\"li\",{parentName:\"ul\"},\"Causing unwanted callbacks being called\"),mdx(\"li\",{parentName:\"ul\"},\"Potentially, causing serious bugs in your app\")),mdx(\"p\",null,\"The best and most elegant way to unsubscribe from Observable is using a subject that emits a value when the component is destroyed.\"),mdx(\"p\",null,\"Alternatively, you can maintain a class property on your component with the subscription, and unsubscribe it when the component is destroyed.\"),mdx(\"p\",null,\"It\\u2019s pretty important, don\\u2019t forget.\"),mdx(\"h2\",null,\"2) Omitting an initial value\"),mdx(\"p\",null,\"This happens pretty commonly with Angular forms. Say you subscribe to a stream expecting to get the value \\u2014 but you never get one. How is that possible?\"),mdx(\"p\",null,\"Well \\u2014 sometimes it\\u2019s caused by the fact that the stream was not initialized by an initial value, and an event was never dispatched.\"),mdx(\"p\",null,\"Here\\u2019s a common scenario with Angular\\u2019s forms:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" name \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"new\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token class-name\"}),\"FormControl\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'Giancarlo'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" formGroup \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"new\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token class-name\"}),\"FormGroup\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" name \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" valueChanges$ \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" formGroup\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"valueChanges\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\nvalueChanges`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"subscribe\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"value\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// do something\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`))),mdx(\"p\",null,\"Unless the user changes the \",mdx(\"inlineCode\",{parentName:\"p\"},\"name\"),\" FormControl in some way, the callback will never be called.\"),mdx(\"p\",null,\"But \\u2014 we do want the subscription to emit using the initial value of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"FormGroup\"),\" (and many would expect it to do so).\"),mdx(\"p\",null,\"In this case, we need to push an initial value using the operator \",mdx(\"inlineCode\",{parentName:\"p\"},\"startWith\"),\":\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" valueChanges$ \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" formGroup\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"valueChanges\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"pipe\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"startWith\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"formGroup\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"value\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\nvalueChanges`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"subscribe\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"value\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// do something\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`))),mdx(\"p\",null,\"In this case, we will receive an emission using the initial value of the form, and all the changes emitted after that.\"),mdx(\"h2\",null,\"3) Using the wrong Operators\"),mdx(\"p\",null,\"There are a lot of operators out there \\u2014 and while you certainly don\\u2019t need to learn them all, you need to make sure you understand the details of each one that you are using.\"),mdx(\"p\",null,\"Small differences can have big consequences.\"),mdx(\"h3\",null,\"Example: mergeMap vs switchMap\"),mdx(\"p\",null,\"One of the most commonly used operators is \",mdx(\"inlineCode\",{parentName:\"p\"},\"mergeMap\"),\". This operator allows you to flatten an inner Observable and will maintain many active streams for each event: this is great in some situations, and not very ideal in others.\"),mdx(\"p\",null,\"In many cases, you may want to instead maintain only 1 active subscription. For example, if you have an event whose events call an HTTP endpoint, you may want to cancel the outgoing requests and only call the very latest one: in this case, you\\u2019ll be better off with \",mdx(\"inlineCode\",{parentName:\"p\"},\"switchMap\"),\".\"),mdx(\"p\",null,\"If you\\u2019re not careful, \",mdx(\"inlineCode\",{parentName:\"p\"},\"mergeMap\"),\" may cause duplicate and unwanted subscriptions, while \",mdx(\"inlineCode\",{parentName:\"p\"},\"switchMap\"),\" can lead to race conditions. Ultimately, both may lead to bugs and your code malfunctioning.\"),mdx(\"p\",null,\"This is one example of the many, sometimes tiny, differences that make RxJS operators.\"),mdx(\"p\",null,\"As I said above \\u2014 you do not need to know every Rx operator. You do need, though, to understand the small peculiarities of the ones you\\u2019re using and compare with similar others to understand which one is suitable in your case.\"),mdx(\"p\",null,\"Other notable differences you should be aware of:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"zip\"),\" vs \",mdx(\"inlineCode\",{parentName:\"li\"},\"forkJoin\"),\" vs \",mdx(\"inlineCode\",{parentName:\"li\"},\"combineLatest\"),\" vs r`ace\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"merge\"),\" vs \",mdx(\"inlineCode\",{parentName:\"li\"},\"combineLatest\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"timer\"),\" vs \",mdx(\"inlineCode\",{parentName:\"li\"},\"interval\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"never\"),\" vs \",mdx(\"inlineCode\",{parentName:\"li\"},\"empty\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"of\"),\" vs \",mdx(\"inlineCode\",{parentName:\"li\"},\"from\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"buffer\"),\" vs \",mdx(\"inlineCode\",{parentName:\"li\"},\"window\"))),mdx(\"h2\",null,\"4) Using the wrong type of Subject\"),mdx(\"p\",null,\"Another important mistake not to commit is to not choose the wrong type of Subject for your task.\"),mdx(\"p\",null,\"Subjects are a special type of Observables that allow you to push values in the stream and also retrieve them by subscribing to it.\"),mdx(\"p\",null,\"While normal \",mdx(\"inlineCode\",{parentName:\"p\"},\"Subject\"),\" likely cover most situations, there are slight differences that you should be aware of.\"),mdx(\"h3\",null,\"Late Subscribers\"),mdx(\"p\",null,\"One common scenario is when your Subject emits events before an observer subscribes to its changes. \"),mdx(\"p\",null,`If you\\u2019re expecting your subscriber to receive the data, you\\u2019re out of luck: it won\\u2019t.\nIn this kind of scenario, you should instead opt for a `,mdx(\"inlineCode\",{parentName:\"p\"},\"ReplaySubject\"),\", which is able to replay all the events it received to also late subscribers. \"),mdx(\"p\",null,\"It is particularly useful also when you only want to keep the latest value in memory which you can do by defining its buffer size.\"),mdx(\"p\",null,\"Another alternative is the \",mdx(\"inlineCode\",{parentName:\"p\"},\"BehaviorSubject\"),\" \\u2014 which instead requires a value in order to be defined.\"),mdx(\"h2\",null,\"5) Performing imperative logic inside the Subscription callback\"),mdx(\"p\",null,\"One of the greatest things about RxJs is that combining operators and reusing their logic is an incredibly nice (and easy) way to build reusable bits of code.\"),mdx(\"p\",null,\"Many of the benefits from writing Rx code ends once we subscribe to an Observable: the logic we write within subscription callbacks is not Rx-land and it\\u2019s the beginning of the end of FRP in our code.\"),mdx(\"p\",null,\"I am not saying you should never subscribe, of course, but my recommendation is to keep the logic within the subscription callbacks as small as possible \\u2014 and wherever you can, avoid subscribing directly (for example, using the Angular async pipe).\"),mdx(\"p\",null,\"What are the drawbacks of using logic within subscriptions?\"),mdx(\"h3\",null,\"Limited Reusability\"),mdx(\"p\",null,\"RxJS streams are pipeable, which means they can be combined and extended and therefore reused.\"),mdx(\"p\",null,\"Any time you subscribe and perform logic within the subscription, you take away some logic that instead could have been offloaded to an Rx operator:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" allItems$ \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"service\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"items$\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"pipe\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"filter\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"Boolean\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" doneItems$ \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" allItems$\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"pipe\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n   `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"map\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"items \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" items\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"filter\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"item \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" item\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"done\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" numberOfRemainingItems$ \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"combineLatest\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"allItems$\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" doneItems$\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"pipe\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n   `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"map\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"items\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" doneItems\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" items \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"-\"),\" doneItems\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`))),mdx(\"p\",null,\"As you can see, creating intermediate streams, or offloading logic to separate operators, is an awesome way of reusing logic across your application.\"),mdx(\"p\",null,\"As a rule of thumb:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"do not check whether a value is truthy within your subscription, you can easily handle it with the operator \",mdx(\"inlineCode\",{parentName:\"li\"},\"filter(Boolean)\")),mdx(\"li\",{parentName:\"ul\"},\"don\\u2019t transform data in your subscription\"),mdx(\"li\",{parentName:\"ul\"},\"side effects: for example, showing/hiding a loading icon, can be done with the \",mdx(\"inlineCode\",{parentName:\"li\"},\"tap\"),\" or/and the \",mdx(\"inlineCode\",{parentName:\"li\"},\"finalize\"),\" operators\")),mdx(\"h3\",null,\"Less Declarative\"),mdx(\"p\",null,\"Let\\u2019s see an example between an imperative and a declarative snippet:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token class-name\"}),\"UsersDashboardComponent\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  users`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" User\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n  activeUsers`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n  bannedUsers`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"constructor\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" service\",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" UsersService\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n     `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"service\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"users$\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"subscribe\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"users \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"users\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n          `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"users \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" users\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n          `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"activeUsers \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" users\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"filter\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"user \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" user\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"active\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n          `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"bannedUsers \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" users\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"filter\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"user \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" user\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"banned\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n        `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n     `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"Now, let\\u2019s convert the above declarative streams:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token class-name\"}),\"UsersDashboardComponent\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  users$ `,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"service\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"users$\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"pipe\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"filter\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"Boolean\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n  activeUsers$ `,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"users$\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"pipe\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"map\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"users \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" users\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"filter\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"user \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" user\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"active\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n  bannedUsers$ `,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"users$\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"pipe\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"map\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"users \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" users\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"filter\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"user \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" user\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"banned\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"constructor\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" service\",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" UsersService\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"With that said, don\\u2019t forget to subscribe either, otherwise, your observables will never emit.\"),mdx(\"h2\",null,\"Final Words\"),mdx(\"p\",null,\"Rx is a pretty awesome library and a tool that can help you handle complex asynchronous aspects of your application with ease. It\\u2019s also quite big, and most often misunderstood.\"),mdx(\"p\",null,\"Making sure you follow the recommendations above will at least ensure that you\\u2019re taking care of an extremely common cause of mistakes, or bugs that you spend hours trying to fix.\"),mdx(\"p\",null,\"In summary:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Unsubscribe, always\"),mdx(\"li\",{parentName:\"ul\"},\"Don\\u2019t omit an initial value if you expect one\"),mdx(\"li\",{parentName:\"ul\"},\"Learn well the operators that you\\u2019re using. Small differences can lead to big mistakes.\"),mdx(\"li\",{parentName:\"ul\"},\"Use the right type of \",mdx(\"inlineCode\",{parentName:\"li\"},\"Subject\"),\": they are suited for different use-cases\"),mdx(\"li\",{parentName:\"ul\"},\"Write as much logic as possible declaratively and within your streams. Also, reuse the logic with custom operators or intermediate streams.\")))}MDXContent.isMDXComponent=!0;\n","scope":{}},"series":[],"morePosts":[{"live":true,"readingTime":"2 min read","title":"Testing RxJS timers with Jest","date":"2021-11-11T21:49:22.000Z","slug":"testing-rxjs-timers-with-jest","collection":{"name":"RxJs","primaryColor":"#d81b60","primaryColorLight":"#d81b6085","contrastColor":"#fff","logo":"/assets/images/collections/rxjs.webp"}}],"moreArticles":[{"live":true,"readingTime":"5 min read","title":"A Reactive Enum with Typescript and RxJs","date":"2021-11-11T23:00:00.000Z","slug":"reactive-enum-typescript-rxjs","coverImage":"/assets/images/posts/reactive-enum-ts-rxjs.webp","collection":{"name":"RxJs","primaryColor":"#d81b60","primaryColorLight":"#d81b6085","contrastColor":"#fff","logo":"/assets/images/collections/rxjs.webp"},"excerpt":"Typescript's template literals' types allow us to generate dynamic and typed code, together. In this article, I want to show how we can build a dynamic reactive enum with TS and RxJS","series":"","tags":["rxjs","typescript"]},{"live":true,"readingTime":"8 min read","title":"Caching RxJS streams into Web Storage","date":"2021-11-10T23:00:00.000Z","slug":"caching-rxjs-streams-into-web-storage","coverImage":"/assets/caching-rxjs-streams.webp","collection":{"name":"RxJs","primaryColor":"#d81b60","primaryColorLight":"#d81b6085","contrastColor":"#fff","logo":"/assets/images/collections/rxjs.webp"},"excerpt":"In this article I will introduce you to a simple utility that allows you to cache RxJS streams in memory or the browser's storage","series":"","tags":["rxjs"]},{"live":true,"readingTime":"7 min read","title":"RxJS Subjects in Depth","date":"2019-10-15T00:00:00.000Z","slug":"rxjs-subjects-in-depth","coverImage":"https://cdn-images-1.medium.com/max/14720/0*15QkEYFTChBSrv-J","collection":{"name":"RxJs","primaryColor":"#d81b60","primaryColorLight":"#d81b6085","contrastColor":"#fff","logo":"/assets/images/collections/rxjs.webp"},"excerpt":"Learn how RxJS Subjects are used in real-world applications","tags":["rxjs"]},{"live":true,"readingTime":"9 min read","title":"RxJS Patterns: Efficiency and Performance","date":"2019-09-16T00:00:00.000Z","slug":"rxjs-patterns-efficiency-and-performance","coverImage":"https://cdn-images-1.medium.com/max/8120/0*s2vR3V3jI171miko","collection":{"name":"RxJs","primaryColor":"#d81b60","primaryColorLight":"#d81b6085","contrastColor":"#fff","logo":"/assets/images/collections/rxjs.webp"},"excerpt":"A rundown of all RxJS operators and techniques you can leverage to avoid needless computation and make your code snappier and faster","tags":["rxjs","performance"]},{"live":true,"readingTime":"5 min read","title":"A simple Countdown with RxJS","date":"2019-06-05T00:00:00.322Z","slug":"a-simple-countdown-with-rx-js","coverImage":"/assets/images/posts/rxjs-countdown.gif","collection":{"name":"RxJs","primaryColor":"#d81b60","primaryColorLight":"#d81b6085","contrastColor":"#fff","logo":"/assets/images/collections/rxjs.webp"},"excerpt":"In this tutorial, we’re going to build a very simple timer application with only a few lines of code using RxJS","tags":["rxjs"]}],"type":1},"__N_SSG":true}