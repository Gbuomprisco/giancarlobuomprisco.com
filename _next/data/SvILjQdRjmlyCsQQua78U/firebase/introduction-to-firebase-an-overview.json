{"pageProps":{"post":{"readingTime":"6 min read","live":true,"title":"An Overview","date":"2021-10-29T00:00:00.322Z","slug":"introduction-to-firebase-an-overview","content":"<p>This article is the first part of a series about getting started with Firebase.</p>\n<p>I will introduce you to what Firebase is, its strengths, but also shortcomings you should consider if you're planning on writing a new project.</p>\n<h2>What's Firebase?</h2>\n<p>Firebase is Google's owned PaaS, a service that enables developers to build and deploy web and mobile applications.</p>\n<p>We could also label Firebase as a user-friendly skin on top of <strong>Google Cloud Platform</strong> (GCP), a vast suite of Cloud products thought for larger projects.</p>\n<p>Every Firebase project is also a GCP project: it's possible to use the GCP console and other services (more about this ahead).</p>\n<p>Firebase comes with its own set of independent products for increasing the Developer Experience and <strong>making building an application an easier feat than ever before</strong>: DX-friendly SDKs, a fully-local Emulator Suite, Extensions, and more, make Firebase an ideal service for both developers and end-users.</p>\n<p>Pricing-wise, Firebase is likely one of the cheapest options on the market: it comes with a highly generous free-plan and fair pricing after that, which makes the service suitable to developers and teams of any size.</p>\n<h2>Is Firebase for Mobile or Web Applications?</h2>\n<p>Many think Firebase is exclusively for Mobile applications: while there's some truth in that statement, it's not the case.</p>\n<p>Firebase does have many features which can work only on mobile applications, such as Crashlytics, Machine Learning, Dynamic Links, Messaging, and more.</p>\n<p>So, Firebase may be a nice skin on top of GCP leaning towards mobile apps: this does not mean that it's unreasonable, or wrong, to use Firebase for web applications. Not at all.</p>\n<p>There's a lot more to Firebase than the features above. It also allows you to:</p>\n<ul>\n<li>use authentication with many 3rd party providers (such as Google, Facebook, Twitter, etc.)</li>\n<li>use invisible ReCaptcha v3 protection with Firebase AppCheck</li>\n<li>use two types of Databases according to your needs (Firestore and Realtime DB)</li>\n<li>upload any object on Firebase Storage</li>\n<li>host your web pages, scripts, styles, etc., on Firebase Hosting</li>\n<li>execute any back-end code with Firebase Cloud Functions</li>\n<li>have baked-in Google Analytics with advanced segmentation and audiences</li>\n<li>use Remote Config for feature flags, A/B tests, and settings configurable by advanced segmentation</li>\n</ul>\n<p>Any non-trivial (web or mobile) application will end up needing support for the above, and Firebase makes using them a breeze.</p>\n<h2>What shortcomings does Firebase have?</h2>\n<p>Despite being a fully-featured platform, Firebase does lack some features, which makes it unsuitable (by itself) for specific applications.</p>\n<p>If you decided to use Firebase for your next project, you should also consider the following cons.</p>\n<h3>Lack of Full-Text Search</h3>\n<p>One of the most significant gripes with Firebase is the lack of full-search text in both of its databases products.</p>\n<p>It's fair to say that most applications have some full-text search, and Firebase won't help.</p>\n<p>In these cases, it's suggested to index the data using a third-party service, such as <strong>Algolia</strong> (which has a Firebase-built extension), <strong>ElasticSearch</strong>, <strong>TypeSense</strong>, etc. Or, alternatively, to use a different database in the GCP offering that supports it.</p>\n<p>The downside to this is that you will need to manage and copy the data in multiple databases and that the data will only be able to be read by using Cloud Functions' external network requests; that means, your account will have higher billing costs as a result.</p>\n<p>It's weird that THE search company doesn't allow search, but for now, the alternatives above will be your best bet if search is an important part of your project.</p>\n<h3>The inability of setting \"real\" billing budgets</h3>\n<p>Firebase allows to set billing budgets in the GCP Console, but these are limited to sending notifications to the project owner, rather than disabling the project itself, for example.</p>\n<p>This issue affects many developers scared of DDoS attacks (for some reason), but most importantly coding errors that make tons of requests are far more common.</p>\n<p>A simple Google search will show many stories about sky-high invoices due to errors.</p>\n<p>Far too many I've talked to are skeptical about adopting Firebase due to this. However, it's fair to remind you that the company waived large invoices caused by programming mistakes in many situations.</p>\n<h3>Slow Cold starts</h3>\n<p>A cold start affects Cloud Functions, e.g., the product to build fully custom back-ends.</p>\n<p>Whenever your function scales down to 0 instances (for example, during periods of inactivity), the functions wake up from scratch; it's common in serverless and normal, with no real way to entirely remove these from the equation.</p>\n<p>The issue is more accentuated when a cloud function uses Firestore, but it's a well-known issue: cold starts are particularly slow. As slow as 15 seconds, in my experience.</p>\n<p>Slow cold starts can make Functions, not the best product for serving data in customer-facing products.</p>\n<h3>Vendor Lock-in</h3>\n<p>Vendor lock-in is likely the most considerable downside of using a fully-featured PaaS, in this case, Firebase.</p>\n<p>A sizeable part of the developer community is not in love with Google for various reasons, among which:</p>\n<ul>\n<li>its tendency to shut projects down very easily</li>\n<li>the (rare) shut-down of accounts out of the blue</li>\n</ul>\n<p>And with this, I can relate a lot.</p>\n<p>There's a nagging feeling that a Google technician could, out of the blue, decide your app violated a rule, and as a result, suddenly suspend your account.</p>\n<p>This sort of event, while rare, is something I'd encourage everyone to take into account.</p>\n<h2>What are Firebase's greatest strengths?</h2>\n<p>Now that we've talked about the bad parts of Firebase, now let's focus on the good.</p>\n<p>Firebase will be a valid option at any size, but where it shines is being a product for Front-end developers who want to build full-stack applications by themselves.</p>\n<p>As a (primarily) front-end developer, I can relate.</p>\n<p>Building fully-featured full-stack applications was always my dream: nothing made it as easy as Firebase does.</p>\n<h3>Easy Databases Products</h3>\n<p>Databases can be intimidating. Realtime DB and Firestore go out of their way to be as approachable as possible.</p>\n<p>As a very inexperienced database designer when I was starting, having something as simple as Firestore was crucial in overcoming the imposter syndrome and fear of messing up.</p>\n<p>While it is too simple for some people, and the limitations make it unsuitable for some tasks, Firestore is one of the easiest DBs you'll find, making it perfect for beginners.</p>\n<p>One thing to watch out for is that Firestore is a NoSQL DB, and it is not relational. I found designing for NoSQL a bit harder than relational databases, especially for the limited literature about the former.</p>\n<p>It's easy to start but just as easy to make bad decisions with it.</p>\n<h3>Fully Serverless Backend</h3>\n<p>Thanks to both Firestore and Realtime DB, You'll be able to make 90% of your application's data-fetching using the Firestore client SDK (e.g., you don't need to write specific back-end code).</p>\n<p>However, there will be many situations where you will be required to code custom Cloud Functions: for example:</p>\n<ul>\n<li>for fetching data from an external API</li>\n<li>performing heavy DB operations</li>\n<li>sending emails</li>\n<li>etc.</li>\n</ul>\n<p>The good news is that Firebase will take care of the infrastructure for you; no more messing around in complex consoles, working on stuff that doesn't directly contribute to your project's success.</p>\n<p>You focus on the product: for front-end developers, this is a god-send.</p>\n<h2>Final Words</h2>\n<p>Even if not perfect, Firebase is one of the best cloud providers out there.</p>\n<p>Its simplicity, fair-pricing, community, etc., make it a valid option for kick-starting your project and scaling with it.</p>\n<p>Remember: if you ever outgrow the Firebase Platform, graduating to GCP is a seamless process.</p>\n","coverImage":"/assets/images/posts/introduction-to-firebase-overview.webp","collection":"firebase","series":"Introduction to Firebase"},"series":[{"readingTime":"6 min read","live":true,"title":"An Overview","date":"2021-10-29T00:00:00.322Z","slug":"introduction-to-firebase-an-overview","coverImage":"/assets/images/posts/introduction-to-firebase-overview.webp","collection":"firebase","excerpt":"Firebase is Gooogle's PaaS, geared towards mobile apps but perfect for any kinds of applications. This post is a brief introduction to Firebase: what it is, what you can use it for, and how to get started","series":"Introduction to Firebase"}],"morePosts":[]},"__N_SSG":true}