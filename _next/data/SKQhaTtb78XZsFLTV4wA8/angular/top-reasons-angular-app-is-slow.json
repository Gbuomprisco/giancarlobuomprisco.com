{"pageProps":{"post":{"live":true,"readingTime":"8 min read","title":"Top Reasons Why Your Angular App Is Slow","date":"2020-01-21T00:00:00.000Z","slug":"top-reasons-angular-app-is-slow","coverImage":"https://cdn-images-1.medium.com/max/7918/0*d4quzk2cNQJ_O9Fq","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Is your app slow? Learn what to watch out when debugging poor performance in your Angular apps!","content":"\nThis post was originally published, by myself, on the [Bit](https://blog.bitsrc.io) blog\n\n## Introduction\n\nAngular is, by default, a fast and performant framework. While it leaves ample space for improvement by opting out some of its magic, we almost never have to do anything special to write extremely performant code for the average app.\n\nWith that said, some difficulties will eventually arise when we are writing either **performance-critical** apps, apps with **large and complex content**, or apps **updated extremely frequently**.\n\nThere are loads of resources and popular advice out there about improving performance with Angular apps. While most of it is totally good and valid advice, what I have personally found while mitigating performance issues is not often talked about.\n\nIn this article, I want to show some of the most important reasons why Angular apps become slow at scale. What we will see is that it doesn’t really matter the framework used — these tips will be valid for any framework.\n\n## Micro Optimizations: Do they Matter?\n\nIn my experience, this is a very misunderstood topic among developers. Whenever I’ve had to deal with performance issues, many colleagues were pointing out at code that could have been causing these issues, which very often happened to be micro-optimizations that would only save a few milliseconds.\n\nSome examples:\n\n* *“We’re using too much reduce, map and filter, let’s replace them all with for loops!”*\n\n* *“Let’s use a dictionary for accessing data faster!”*\n\n* *“Bitwise Operators!”*\n\nI always thought there was something else going on.\n\n**The ones above are all very valid points** if you are coding performance-critical applications, frameworks or libraries. The first thing people look at when trying to find the reason why they’re experiencing poor performance is to debug every function call:\n\n* *“How much did it take to find an item in this list [of maybe 300 items]?*\n\n* *“How long did it take to sort [800 items]”?*\n\nBut when you’re developing an application, these optimizations may count much less than you think.\n\n**This is not to say it can’t happen**, but I would start questioning two other possible issues first:\n\n* How much is the app actually rendering?\n\n* How often is the framework re-rendering components?\n\nAs we will see, even when following best practices, sometimes they’re not enough to prevent slow performance. And most often it’s not due to the framework we’re using but to our code or architecture.\n\n## Your app is rendering too often\n\nLet’s start with this quite common issue: your application re-renders components unnecessarily, making your application slower than it could be. This is both easy to solve and easy to cause.\n\n### Change Detection\n\nSetting the default change detection to **OnPush** is an almost mandatory step if your application is suffering from slow performance, or if you want to prevent from it happening in the future.\n\nBy setting your components to update only “on push”, you prevent re-rendering components that don’t need to be checked. It’s straightforward and its usage is greatly simplified when using Observables and the Async pipe.\n\n### Async Pipe\n\nEven if you’re using OnPush and the async pipe in your templates, you may still be re-rendering more than it is actually needed.\n\nFor example, in my experience, preventing observables from emitting is a good way to prevent your component from re-rendering. For example, you may use operators such as filter and distinctUntilChanged to skip re-renderings altogether.\n\nAnother issue that I’ve experienced even when using Observables and Async pipe was due to selecting items from a store without selectors. If we write and use granular selectors, **we only receive updates from the state slice affected**.\n\nIf we select the whole object from a Redux state tree, the selectors will emit every time the tree-changed, and as a result, **we will end up triggering updates on components that are virtually unaffected**.\n\nThis is a seemingly subtle improvement that ended up making one of my applications **from barely usable to decently performant on IE11**.\n\nFor more information about improving efficiently with RxJS, check out my article below:\n[**RxJS Patterns: Efficiency and Performance**](https://blog.bitsrc.io/rxjs-patterns-efficiency-and-performance-10bbf272c3fc)\n\n### High-Frequency Updates\n\nThis is a use-case where Angular doesn’t excel at, and it is probably due to Zone.js, which is also the reason behind Angular’s magical change detection.\n\nZone.js will monkey-patch all events and will schedule a change detection when any of these happened. That means that if your application is streaming events at a fast rate (Websocket, or even DOM events), for each event received, Zone will trigger a change detection. There’s definitely room for improvements in similar cases.\n\nI have talked in depth about this at the link below:\n[**Quantum Angular: Maximizing Performance by Removing Zone**](https://blog.bitsrc.io/quantum-angular-maximizing-performance-by-removing-zone-e0eefe85b8d8)\n\nOf course, you don’t need to remove Zone from your app to solve this issue. Here are a few steps you can take instead:\n\n* detach the affected components, then update surgically when your subscriptions get notified\n\n* use ngZone.runOutsideAngular(callback) to run the callback outside of Angular’s change detection\n\n* last resort: exclude the event from being monkey-patched by Zone\n\n## Your app is rendering too much\n\nNo matter how fast your framework is, if you are rendering thousands of complex components in one go, the browser is eventually going to show some amount of lag.\n\nEven if maybe on your Macbook Pro it isn’t very noticeable, slower machines will definitely struggle, and you should think that not everyone is using a powerful machine.\n\nIt’s extremely important to make sure that components rendered many items (eg. within lists) are optimized in a particular way.\n\nHow can you solve this?\n\n### Keying\n\nThis is the simplest and probably most well-known technique which is baked in most libraries. The concept is simple: we assign a key to each item of a list, and the library will re-render it only if the key has changed.\n\nThis works great when adding/removing items or when the amount of items changes is limited but still doesn’t solve a performance issue if we render a vast amount of items at once. For example — if we render a very large list at page load.\n\n### **Virtual Scrolling**\n\nOnly render what the user can see.\n\nWhile this has accessibility/usability implications to be aware of, it is one of the best methods to improve perceived performance and avoid getting the page frozen for an unreasonable amount of time, [which is less than you’d think](https://www.smashingmagazine.com/2015/09/why-performance-matters-the-perception-of-time/).\n\n[It’s pretty easy to implement: the Angular CDK provides a utility for ](https://material.angular.io/cdk/scrolling/overview)this!\n\n### **Async Rendering**\n\nThis is an older technique, to which I’d prefer virtual scrolling, but that can still be better than rendering 1000 items at once and it is very easy to implement without having to write much code.\n\nThe concept is this: start rendering a limited number of items (ex, 50 out of 500), then schedule a subsequent rendering with the next 50 items using **setTimeout(0)** until all items are rendered**. **This is a simple technique, so the results are also simple — but the browser won’t get stuck for 250ms while rendering.\n\n### **Lazy Rendering**\n\nNot everything has to be rendered right away, sometimes we can simply render a component when the user needs to interact with it.\n\nHere’s a similar use-case I worked on: I was working on a page that used many instances of [Quill](https://quilljs.com/), a famous WYSIWYG library.\n\nThis is a great tool, but it’s pretty heavy. Instantiating one of its components took 20–30ms, and I had to render hundreds of them on a page. My Macbook pro crashed.\n\nInstantiating it right away was pretty silly: WYSIWYG can be simple HTML when not interacted with. I could simply instantiate the component when the user needed to, e.g. when hovered or clicked on. All performance issues were gone!\n\n### Lazy Listeners\n\nThis is directly related to the previous points: subscribing and listening to too many events may be quite expensive.\n\nAvoiding subscribing to too many events can be done in different ways:\n\n* If you have a large list of items with DOM handlers, make sure you only subscribe to the items that are visible (virtual scrolling help with this)\n\n* Sometimes you may want to only create one single global event from within a Service, rather than subscribing to the event in each Directive/Component\n\n## Some code… is just slow\n\nIf you’ve done your research and figured out that your app doesn’t render that much and doesn’t render that often, then your code may just simply be quite slow. This is probably due to some heavy scripting and not DOM-related.\n\nCheer up! It’s a good thing, as nowadays we have the tools to resolve this sort of issue.\n\n* Use [WebWorkers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers). The [Angular CLI](https://angular.io/guide/web-worker) also provides a command to generate a WebWorker in a snap. When is this a suitable route? Simple — when your code has nothing to do with rendering and takes a while to execute. This is normally crunching numbers, data-processing, etc. That’s great for Redux, right? [Wait, don’t do that yet.](https://twitter.com/MikeRyanDev/status/954151139968249857)\n\n* Use [WebAssembly](https://webassembly.org/), for example using [AssemblyScript](https://github.com/AssemblyScript/assemblyscript). Read this case study from [Figma](https://www.figma.com/blog/webassembly-cut-figmas-load-time-by-3x/) for more information.\n\nIf the above are not routes you’re comfortable with, or simply don’t solve your use case, then it’s time to try micro-optimizations and see by how much they can improve your runtime performance:\n\n* Use a [Custom Iterable Differ](https://blog.mgechev.com/2017/11/14/angular-iterablediffer-keyvaluediffer-custom-differ-track-by-fn-performance/)\n\n* Turn everything into for-loops, scrap filter, reduce and map. Use break and continue to reduce the number of iterations\n\n* Maintain the shape of your objects. Learn more about how Angular is so fast [watching this video from Misko Hevery](https://www.youtube.com/watch?v=EqSRpkMRyY4)\n\n## Takeaways\n\n* Opt-out of the framework’s magic: make sure you use ChangeDetection.OnPush and TrackBy for arrays\n\n* Render less often by surgically triggering change detections on your components. Run outside Zone when needed.\n\n* Try to render less using a variety of techniques such as virtual scrolling and lazy rendering\n\n* Don’t listen to everything: subscribe to only the items that are visible, and subscribe to only one global event listener\n\n### Resources\n\n* One of the most enlightening talks about Angular-related performance issues: [Performance optimizations in Angular | Mert Değirmenci](https://www.youtube.com/watch?v=Tlmx1PbP8Qw&t=6s)\n\nIf you need any clarifications, or if you think something is unclear or wrong, do please leave a comment!\n","canonical":"https://blog.bitsrc.io/top-reasons-why-your-angular-app-is-slow-c36780a0a289","tags":["angular","performance"]},"content":{"compiledSource":"var h=Object.defineProperty,u=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var p=(e,a,n)=>a in e?h(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,t=(e,a)=>{for(var n in a||(a={}))r.call(a,n)&&p(e,n,a[n]);if(i)for(var n of i(a))s.call(a,n)&&p(e,n,a[n]);return e},l=(e,a)=>u(e,c(a));var m=(e,a)=>{var n={};for(var o in e)r.call(e,o)&&a.indexOf(o)<0&&(n[o]=e[o]);if(e!=null&&i)for(var o of i(e))a.indexOf(o)<0&&s.call(e,o)&&(n[o]=e[o]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var o=n,{components:e}=o,a=m(o,[\"components\"]);return mdx(MDXLayout,l(t(t({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"This post was originally published, by myself, on the \",mdx(\"a\",t({parentName:\"p\"},{href:\"https://blog.bitsrc.io\"}),\"Bit\"),\" blog\"),mdx(\"h2\",null,\"Introduction\"),mdx(\"p\",null,\"Angular is, by default, a fast and performant framework. While it leaves ample space for improvement by opting out some of its magic, we almost never have to do anything special to write extremely performant code for the average app.\"),mdx(\"p\",null,\"With that said, some difficulties will eventually arise when we are writing either \",mdx(\"strong\",{parentName:\"p\"},\"performance-critical\"),\" apps, apps with \",mdx(\"strong\",{parentName:\"p\"},\"large and complex content\"),\", or apps \",mdx(\"strong\",{parentName:\"p\"},\"updated extremely frequently\"),\".\"),mdx(\"p\",null,\"There are loads of resources and popular advice out there about improving performance with Angular apps. While most of it is totally good and valid advice, what I have personally found while mitigating performance issues is not often talked about.\"),mdx(\"p\",null,\"In this article, I want to show some of the most important reasons why Angular apps become slow at scale. What we will see is that it doesn\\u2019t really matter the framework used \\u2014 these tips will be valid for any framework.\"),mdx(\"h2\",null,\"Micro Optimizations: Do they Matter?\"),mdx(\"p\",null,\"In my experience, this is a very misunderstood topic among developers. Whenever I\\u2019ve had to deal with performance issues, many colleagues were pointing out at code that could have been causing these issues, which very often happened to be micro-optimizations that would only save a few milliseconds.\"),mdx(\"p\",null,\"Some examples:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},mdx(\"em\",{parentName:\"p\"},\"\\u201CWe\\u2019re using too much reduce, map and filter, let\\u2019s replace them all with for loops!\\u201D\"))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},mdx(\"em\",{parentName:\"p\"},\"\\u201CLet\\u2019s use a dictionary for accessing data faster!\\u201D\"))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},mdx(\"em\",{parentName:\"p\"},\"\\u201CBitwise Operators!\\u201D\")))),mdx(\"p\",null,\"I always thought there was something else going on.\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"The ones above are all very valid points\"),\" if you are coding performance-critical applications, frameworks or libraries. The first thing people look at when trying to find the reason why they\\u2019re experiencing poor performance is to debug every function call:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},mdx(\"em\",{parentName:\"p\"},\"\\u201CHow much did it take to find an item in this list \",\"[of maybe 300 items]\",\"?\"))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},mdx(\"em\",{parentName:\"p\"},\"\\u201CHow long did it take to sort \",\"[800 items]\",\"\\u201D?\")))),mdx(\"p\",null,\"But when you\\u2019re developing an application, these optimizations may count much less than you think.\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"This is not to say it can\\u2019t happen\"),\", but I would start questioning two other possible issues first:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"How much is the app actually rendering?\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"How often is the framework re-rendering components?\"))),mdx(\"p\",null,\"As we will see, even when following best practices, sometimes they\\u2019re not enough to prevent slow performance. And most often it\\u2019s not due to the framework we\\u2019re using but to our code or architecture.\"),mdx(\"h2\",null,\"Your app is rendering too often\"),mdx(\"p\",null,\"Let\\u2019s start with this quite common issue: your application re-renders components unnecessarily, making your application slower than it could be. This is both easy to solve and easy to cause.\"),mdx(\"h3\",null,\"Change Detection\"),mdx(\"p\",null,\"Setting the default change detection to \",mdx(\"strong\",{parentName:\"p\"},\"OnPush\"),\" is an almost mandatory step if your application is suffering from slow performance, or if you want to prevent from it happening in the future.\"),mdx(\"p\",null,\"By setting your components to update only \\u201Con push\\u201D, you prevent re-rendering components that don\\u2019t need to be checked. It\\u2019s straightforward and its usage is greatly simplified when using Observables and the Async pipe.\"),mdx(\"h3\",null,\"Async Pipe\"),mdx(\"p\",null,\"Even if you\\u2019re using OnPush and the async pipe in your templates, you may still be re-rendering more than it is actually needed.\"),mdx(\"p\",null,\"For example, in my experience, preventing observables from emitting is a good way to prevent your component from re-rendering. For example, you may use operators such as filter and distinctUntilChanged to skip re-renderings altogether.\"),mdx(\"p\",null,\"Another issue that I\\u2019ve experienced even when using Observables and Async pipe was due to selecting items from a store without selectors. If we write and use granular selectors, \",mdx(\"strong\",{parentName:\"p\"},\"we only receive updates from the state slice affected\"),\".\"),mdx(\"p\",null,\"If we select the whole object from a Redux state tree, the selectors will emit every time the tree-changed, and as a result, \",mdx(\"strong\",{parentName:\"p\"},\"we will end up triggering updates on components that are virtually unaffected\"),\".\"),mdx(\"p\",null,\"This is a seemingly subtle improvement that ended up making one of my applications \",mdx(\"strong\",{parentName:\"p\"},\"from barely usable to decently performant on IE11\"),\".\"),mdx(\"p\",null,`For more information about improving efficiently with RxJS, check out my article below:\n`,mdx(\"a\",t({parentName:\"p\"},{href:\"https://blog.bitsrc.io/rxjs-patterns-efficiency-and-performance-10bbf272c3fc\"}),mdx(\"strong\",{parentName:\"a\"},\"RxJS Patterns: Efficiency and Performance\"))),mdx(\"h3\",null,\"High-Frequency Updates\"),mdx(\"p\",null,\"This is a use-case where Angular doesn\\u2019t excel at, and it is probably due to Zone.js, which is also the reason behind Angular\\u2019s magical change detection.\"),mdx(\"p\",null,\"Zone.js will monkey-patch all events and will schedule a change detection when any of these happened. That means that if your application is streaming events at a fast rate (Websocket, or even DOM events), for each event received, Zone will trigger a change detection. There\\u2019s definitely room for improvements in similar cases.\"),mdx(\"p\",null,`I have talked in depth about this at the link below:\n`,mdx(\"a\",t({parentName:\"p\"},{href:\"https://blog.bitsrc.io/quantum-angular-maximizing-performance-by-removing-zone-e0eefe85b8d8\"}),mdx(\"strong\",{parentName:\"a\"},\"Quantum Angular: Maximizing Performance by Removing Zone\"))),mdx(\"p\",null,\"Of course, you don\\u2019t need to remove Zone from your app to solve this issue. Here are a few steps you can take instead:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"detach the affected components, then update surgically when your subscriptions get notified\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"use ngZone.runOutsideAngular(callback) to run the callback outside of Angular\\u2019s change detection\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"last resort: exclude the event from being monkey-patched by Zone\"))),mdx(\"h2\",null,\"Your app is rendering too much\"),mdx(\"p\",null,\"No matter how fast your framework is, if you are rendering thousands of complex components in one go, the browser is eventually going to show some amount of lag.\"),mdx(\"p\",null,\"Even if maybe on your Macbook Pro it isn\\u2019t very noticeable, slower machines will definitely struggle, and you should think that not everyone is using a powerful machine.\"),mdx(\"p\",null,\"It\\u2019s extremely important to make sure that components rendered many items (eg. within lists) are optimized in a particular way.\"),mdx(\"p\",null,\"How can you solve this?\"),mdx(\"h3\",null,\"Keying\"),mdx(\"p\",null,\"This is the simplest and probably most well-known technique which is baked in most libraries. The concept is simple: we assign a key to each item of a list, and the library will re-render it only if the key has changed.\"),mdx(\"p\",null,\"This works great when adding/removing items or when the amount of items changes is limited but still doesn\\u2019t solve a performance issue if we render a vast amount of items at once. For example\\u200A\\u2014\\u200Aif we render a very large list at page load.\"),mdx(\"h3\",null,mdx(\"strong\",{parentName:\"h3\"},\"Virtual Scrolling\")),mdx(\"p\",null,\"Only render what the user can see.\"),mdx(\"p\",null,\"While this has accessibility/usability implications to be aware of, it is one of the best methods to improve perceived performance and avoid getting the page frozen for an unreasonable amount of time, \",mdx(\"a\",t({parentName:\"p\"},{href:\"https://www.smashingmagazine.com/2015/09/why-performance-matters-the-perception-of-time/\"}),\"which is less than you\\u2019d think\"),\".\"),mdx(\"p\",null,mdx(\"a\",t({parentName:\"p\"},{href:\"https://material.angular.io/cdk/scrolling/overview\"}),\"It\\u2019s pretty easy to implement: the Angular CDK provides a utility for \"),\"this!\"),mdx(\"h3\",null,mdx(\"strong\",{parentName:\"h3\"},\"Async Rendering\")),mdx(\"p\",null,\"This is an older technique, to which I\\u2019d prefer virtual scrolling, but that can still be better than rendering 1000 items at once and it is very easy to implement without having to write much code.\"),mdx(\"p\",null,\"The concept is this: start rendering a limited number of items (ex, 50 out of 500), then schedule a subsequent rendering with the next 50 items using \",mdx(\"strong\",{parentName:\"p\"},\"setTimeout(0)\"),\" until all items are rendered\",mdx(\"strong\",{parentName:\"p\"},\". \"),\"This is a simple technique, so the results are also simple \\u2014 but the browser won\\u2019t get stuck for 250ms while rendering.\"),mdx(\"h3\",null,mdx(\"strong\",{parentName:\"h3\"},\"Lazy Rendering\")),mdx(\"p\",null,\"Not everything has to be rendered right away, sometimes we can simply render a component when the user needs to interact with it.\"),mdx(\"p\",null,\"Here\\u2019s a similar use-case I worked on: I was working on a page that used many instances of \",mdx(\"a\",t({parentName:\"p\"},{href:\"https://quilljs.com/\"}),\"Quill\"),\", a famous WYSIWYG library.\"),mdx(\"p\",null,\"This is a great tool, but it\\u2019s pretty heavy. Instantiating one of its components took 20\\u201330ms, and I had to render hundreds of them on a page. My Macbook pro crashed.\"),mdx(\"p\",null,\"Instantiating it right away was pretty silly: WYSIWYG can be simple HTML when not interacted with. I could simply instantiate the component when the user needed to, e.g. when hovered or clicked on. All performance issues were gone!\"),mdx(\"h3\",null,\"Lazy Listeners\"),mdx(\"p\",null,\"This is directly related to the previous points: subscribing and listening to too many events may be quite expensive.\"),mdx(\"p\",null,\"Avoiding subscribing to too many events can be done in different ways:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"If you have a large list of items with DOM handlers, make sure you only subscribe to the items that are visible (virtual scrolling help with this)\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Sometimes you may want to only create one single global event from within a Service, rather than subscribing to the event in each Directive/Component\"))),mdx(\"h2\",null,\"Some code\\u2026 is just slow\"),mdx(\"p\",null,\"If you\\u2019ve done your research and figured out that your app doesn\\u2019t render that much and doesn\\u2019t render that often, then your code may just simply be quite slow. This is probably due to some heavy scripting and not DOM-related.\"),mdx(\"p\",null,\"Cheer up! It\\u2019s a good thing, as nowadays we have the tools to resolve this sort of issue.\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Use \",mdx(\"a\",t({parentName:\"p\"},{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\"}),\"WebWorkers\"),\". The \",mdx(\"a\",t({parentName:\"p\"},{href:\"https://angular.io/guide/web-worker\"}),\"Angular CLI\"),\" also provides a command to generate a WebWorker in a snap. When is this a suitable route? Simple \\u2014 when your code has nothing to do with rendering and takes a while to execute. This is normally crunching numbers, data-processing, etc. That\\u2019s great for Redux, right? \",mdx(\"a\",t({parentName:\"p\"},{href:\"https://twitter.com/MikeRyanDev/status/954151139968249857\"}),\"Wait, don\\u2019t do that yet.\"))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Use \",mdx(\"a\",t({parentName:\"p\"},{href:\"https://webassembly.org/\"}),\"WebAssembly\"),\", for example using \",mdx(\"a\",t({parentName:\"p\"},{href:\"https://github.com/AssemblyScript/assemblyscript\"}),\"AssemblyScript\"),\". Read this case study from \",mdx(\"a\",t({parentName:\"p\"},{href:\"https://www.figma.com/blog/webassembly-cut-figmas-load-time-by-3x/\"}),\"Figma\"),\" for more information.\"))),mdx(\"p\",null,\"If the above are not routes you\\u2019re comfortable with, or simply don\\u2019t solve your use case, then it\\u2019s time to try micro-optimizations and see by how much they can improve your runtime performance:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Use a \",mdx(\"a\",t({parentName:\"p\"},{href:\"https://blog.mgechev.com/2017/11/14/angular-iterablediffer-keyvaluediffer-custom-differ-track-by-fn-performance/\"}),\"Custom Iterable Differ\"))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Turn everything into for-loops, scrap filter, reduce and map. Use break and continue to reduce the number of iterations\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Maintain the shape of your objects. Learn more about how Angular is so fast \",mdx(\"a\",t({parentName:\"p\"},{href:\"https://www.youtube.com/watch?v=EqSRpkMRyY4\"}),\"watching this video from Misko Hevery\")))),mdx(\"h2\",null,\"Takeaways\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Opt-out of the framework\\u2019s magic: make sure you use ChangeDetection.OnPush and TrackBy for arrays\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Render less often by surgically triggering change detections on your components. Run outside Zone when needed.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Try to render less using a variety of techniques such as virtual scrolling and lazy rendering\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Don\\u2019t listen to everything: subscribe to only the items that are visible, and subscribe to only one global event listener\"))),mdx(\"h3\",null,\"Resources\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"One of the most enlightening talks about Angular-related performance issues: \",mdx(\"a\",t({parentName:\"li\"},{href:\"https://www.youtube.com/watch?v=Tlmx1PbP8Qw&t=6s\"}),\"Performance optimizations in Angular | Mert De\\u011Firmenci\"))),mdx(\"p\",null,\"If you need any clarifications, or if you think something is unclear or wrong, do please leave a comment!\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"series":[],"morePosts":[],"moreArticles":[{"live":true,"readingTime":"2 min read","title":"Benchmarking Angular 12 with Webpack 5","date":"2021-05-14T00:00:00.322Z","slug":"webpack-5-angular12","coverImage":"/assets/images/posts/benchmarking-webpack-5.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Angular 12 has been released and with it the much awaited Webpack 5 upgrade. In this post I benchmarked the bundle-size and compilation speed against the previous version","tags":["angular"]},{"live":true,"readingTime":"5 min read","title":"Principles for creating libraries with Nx and Angular","date":"2021-02-07T00:00:00.322Z","slug":"how-to-organize-nx-modules-with-angular","coverImage":"/assets/images/posts/organize-nx-modules-ngrx.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Working with Nx may be confusing. This article explains how I create Nx libraries and the principles behind my motivations","tags":["nx","angular"]},{"live":true,"readingTime":"3 min read","title":"Where to put your Angular models?","date":"2020-08-03T00:00:00.322Z","slug":"angular-where-to-put-models","ogImage":{"url":"/assets/images/posts/where-put-angular-models.png"},"coverImage":"/assets/images/posts/where-put-angular-models.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Organizing entities and models in your Angular app may be hard. This article explains where to put your entities and what mistakes to watch out for","tags":["angular","architecture"]},{"live":true,"readingTime":"5 min read","title":"Using the Intersection Observer API with Angular","date":"2020-08-01T00:00:00.322Z","slug":"intersection-observer-with-angular","coverImage":"/assets/images/posts/intersection-observer.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"This article shows how to build a directive with Angular that uses the Intersection Observer API to check when an element becomes visible on the page","tags":["angular","performance"]},{"live":true,"readingTime":"3 min read","title":"Setters vs ngOnChanges: which one is better?","date":"2020-07-30T00:00:00.322Z","slug":"setters-vs-ng-on-changes","coverImage":"/assets/images/posts/setters-vs-on-changes.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Listening to Input changes can be done in different ways. But which one should you use?","tags":["angular"]},{"live":true,"readingTime":"3 min read","title":"Async Rendering with a single Rx Operator","date":"2020-07-11T00:00:00.322Z","slug":"async-rendering-with-a-single-rx-operator","coverImage":"/assets/images/posts/async-rendering.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Increase your app rendering performance with this simple Rx operator","tags":["angular","rxjs"]}],"type":1},"__N_SSG":true}