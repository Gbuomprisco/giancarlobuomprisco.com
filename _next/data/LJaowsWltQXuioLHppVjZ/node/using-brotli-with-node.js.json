{"pageProps":{"post":{"live":true,"readingTime":"2 min read","title":"Using Brotli with Node.js","date":"2021-11-01T21:53:02.000Z","slug":"using-brotli-with-node.js","collection":{"name":"Node","primaryColor":"#84BA64","primaryColorLight":"#84ba6491","contrastColor":"#212121","logo":"/assets/images/collections/node.webp","slug":"node"},"content":"\nBrotli is a compression algorithm developed by Google, able to compress data even smaller than gzip can.\n\nCompressing can be helpful in many scenarios; the most notable being serving your website assets in a much smaller format.\n\nBut there are times when we may want to use _brotli_ programmatically, such as NodeJS.\n\nFor example, I needed to store large strings into **Redis**; Redis is an in-memory database, and of course, space is limited, and every byte counts.\n\nI was willing to pay a small CPU-related price for saving space and network transfer payloads (which Firebase, of course, bills me for).\n\nTherefore, I started researching for the most effective way of compressing the data before writing to Redis, so that:\n\n* the string would occupy less space\n* the network cost and speed would be lower\n\nBrotli, which is built-in into Node, seemed like a good choice. Let's see how to use it.\n\n### Compressing\n\nNodeJS comes with utilities for compressing/decompressing Brotli since versions v11.7.0, v10.16.0.\n\nLike many other APIs, Node comes with async and sync versions. For simplicity, we'll show the sync versions.\n\nWe need to turn the input data structure into a string when compressing. \n\n```typescript\nimport { brotliCompressSync } from 'zlib';\n\n// let's assume this is an object or \n// string you want to store\n// such as a JSON object\nconst data = [];\n\nconst compressed = brotliCompressSync(\n  JSON.stringify(data)\n).toString('base64');\n\n// do something with \"compressed\"\n```\n\nThe above can become a small utility function:\n\n```typescript\nexport function compressWithBrotli(data: unknown) {\n  return brotliCompressSync(\n    JSON.stringify(data)\n  ).toString('base64');\n}\n```\n\n### Decompressing\n\nFor decompressing a Brotli base64 string and turning it back into its JSON representation we will need a few more steps:\n\n* First, we turn the compressed string into a `Buffer`\n* We then decompress using the built-in utility `brotliDecompressSync`\n* We check if the value is truthy, and if so, parse the string using `JSON.parse`\n\n```typescript\nimport { brotliDecompressSync } from 'zlib';\n\nexport function decompressWithBrotli(data: string) {\n  const buffer = Buffer.from(data, 'base64');\n\n  const value = \n    brotliDecompressSync(buffer).toString('utf-8');\n\n  return value ? JSON.parse(value) : undefined;\n}\n```\n\nWe can now use the utility functions `compressWithBrotli` and `decompressWithBrotli` to compress our text on the fly.\n\nIf you want to use the async versions of the API, use the variants `brotliCompress` and `brotliDecompress`.","tags":["node"],"excerpt":"This post shows how to compress large strings with Brotli using Node.js.","ogImage":{"url":"/assets/images/posts/using-brotli-with-node.js.webp"}},"content":{"compiledSource":"var N=Object.defineProperty,l=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var r=(a,n,s)=>n in a?N(a,n,{enumerable:!0,configurable:!0,writable:!0,value:s}):a[n]=s,e=(a,n)=>{for(var s in n||(n={}))o.call(n,s)&&r(a,s,n[s]);if(p)for(var s of p(n))c.call(n,s)&&r(a,s,n[s]);return a},m=(a,n)=>l(a,d(n));var i=(a,n)=>{var s={};for(var t in a)o.call(a,t)&&n.indexOf(t)<0&&(s[t]=a[t]);if(a!=null&&p)for(var t of p(a))n.indexOf(t)<0&&c.call(a,t)&&(s[t]=a[t]);return s};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var t=s,{components:a}=t,n=i(t,[\"components\"]);return mdx(MDXLayout,m(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Brotli is a compression algorithm developed by Google, able to compress data even smaller than gzip can.\"),mdx(\"p\",null,\"Compressing can be helpful in many scenarios; the most notable being serving your website assets in a much smaller format.\"),mdx(\"p\",null,\"But there are times when we may want to use \",mdx(\"em\",{parentName:\"p\"},\"brotli\"),\" programmatically, such as NodeJS.\"),mdx(\"p\",null,\"For example, I needed to store large strings into \",mdx(\"strong\",{parentName:\"p\"},\"Redis\"),\"; Redis is an in-memory database, and of course, space is limited, and every byte counts.\"),mdx(\"p\",null,\"I was willing to pay a small CPU-related price for saving space and network transfer payloads (which Firebase, of course, bills me for).\"),mdx(\"p\",null,\"Therefore, I started researching for the most effective way of compressing the data before writing to Redis, so that:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"the string would occupy less space\"),mdx(\"li\",{parentName:\"ul\"},\"the network cost and speed would be lower\")),mdx(\"p\",null,\"Brotli, which is built-in into Node, seemed like a good choice. Let's see how to use it.\"),mdx(\"h3\",null,\"Compressing\"),mdx(\"p\",null,\"NodeJS comes with utilities for compressing/decompressing Brotli since versions v11.7.0, v10.16.0.\"),mdx(\"p\",null,\"Like many other APIs, Node comes with async and sync versions. For simplicity, we'll show the sync versions.\"),mdx(\"p\",null,\"We need to turn the input data structure into a string when compressing. \"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" brotliCompressSync \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"from\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'zlib'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// let's assume this is an object or \"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// string you want to store\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// such as a JSON object\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" data \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" compressed \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"brotliCompressSync\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token constant\"}),\"JSON\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"stringify\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"data\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"toString\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'base64'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),'// do something with \"compressed\"'),`\n`))),mdx(\"p\",null,\"The above can become a small utility function:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"export\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"function\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"compressWithBrotli\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"data\",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"unknown\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"brotliCompressSync\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token constant\"}),\"JSON\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"stringify\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"data\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"toString\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'base64'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"h3\",null,\"Decompressing\"),mdx(\"p\",null,\"For decompressing a Brotli base64 string and turning it back into its JSON representation we will need a few more steps:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"First, we turn the compressed string into a \",mdx(\"inlineCode\",{parentName:\"li\"},\"Buffer\")),mdx(\"li\",{parentName:\"ul\"},\"We then decompress using the built-in utility \",mdx(\"inlineCode\",{parentName:\"li\"},\"brotliDecompressSync\")),mdx(\"li\",{parentName:\"ul\"},\"We check if the value is truthy, and if so, parse the string using \",mdx(\"inlineCode\",{parentName:\"li\"},\"JSON.parse\"))),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" brotliDecompressSync \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"from\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'zlib'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"export\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"function\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"decompressWithBrotli\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"data\",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" buffer \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" Buffer\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"from\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"data\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'base64'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" value \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),` \n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"brotliDecompressSync\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"buffer\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"toString\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'utf-8'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n  `,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" value \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"?\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token constant\"}),\"JSON\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"parse\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"value\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"undefined\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"We can now use the utility functions \",mdx(\"inlineCode\",{parentName:\"p\"},\"compressWithBrotli\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"decompressWithBrotli\"),\" to compress our text on the fly.\"),mdx(\"p\",null,\"If you want to use the async versions of the API, use the variants \",mdx(\"inlineCode\",{parentName:\"p\"},\"brotliCompress\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"brotliDecompress\"),\".\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"series":[],"morePosts":[],"moreArticles":[],"type":0},"__N_SSG":true}