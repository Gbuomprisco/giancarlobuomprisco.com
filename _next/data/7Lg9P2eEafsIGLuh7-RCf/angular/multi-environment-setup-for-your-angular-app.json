{"pageProps":{"post":{"live":true,"readingTime":"5 min read","title":"Multi-environment setup for your Angular¬†app","date":"2019-04-19T00:00:00.322Z","slug":"multi-environment-setup-for-your-angular-app","coverImage":"/assets/images/posts/multi-environment-angular.png","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Setting up multiple environment setups with the Angular CLI","content":"\nOne of the most welcome additions to our tooling as Angular developers is certainly the Angular CLI. The CLI allows us to bootstrap an Angular app and also manage it through all its lifecycle.¬†\n\nOne of the best features I enjoyed using is setting up multiple environments for my projects. Most applications will probably use at the very least two environments: production and development. Most likely, larger applications will be running several environments, such as QA, RC, pre-prod, and so on.\n\n## Configurations\n\nThe Angular CLI bootstraps a new project with two files within the folder `environments`: `environments.ts` and `environments.prod.ts.`¬†.¬†\n\n*   _environment.prod.ts_ is the configuration file that the CLI injects for us when the app is built using the production configuration\n*   _environment.ts_ is the configuration file we reference in our application, and the CLI will take care of getting the correct configuration at build time\n\nWhat do these files look like? They‚Äôre just a simple constant object exported as ‚Äúenvironment‚Äù, which initially looks like this:\n\n```\n// environment.ts\nexport const environment = {\n  production: false\n};\n\n----------------------------\n\n// environment.prod.ts\nexport const environment = {\n  production: true\n};\n```\n\n> ‚ö†Ô∏è As you may have guessed, these values are injected into the client at build time. So be aware‚Ää‚Äî‚Äädon‚Äôt pass sensitive values to this object.\n\nThe CLI allows us to define multiple custom configurations which we will align with our infrastructure‚Äôs environments. So, for example, we can define two more environments‚Ää‚Äî‚Ää_dev_ and _qa_.\n\nLet‚Äôs go ahead and create two more files in the same folder which we will call _environment.dev.ts_ and _environment.qa.ts._\n\nIn order to set up the environments correctly, we also need to let Angular know by adding these to the configuration file _angular.json._ We will do this by extending the _configurations_ object:\n\n```\n... // angular.json\nconfigurations\": {\n    \"production\" {...} // leave as it is,\n\n    \"qa\": {\n        \"fileReplacements\": [\n            {\n                \"replace\": \"src/environments/environment.ts\",\n                \"with\": \"src/environments/environment.qa.ts\"\n            }\n        ]\n    },\n    \"dev\": {\n        \"fileReplacements\": [\n            {\n                \"replace\": \"src/environments/environment.ts\",\n                \"with\": \"src/environments/environment.dev.ts\"\n            }\n        ]\n    }\n}\n```\n\nAnd finally, we update the _serve_ object:\n```\n\"serve\": {\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": {\n        \"browserTarget\": \"<appname>:build\"\n    },\n    \"configurations\": {\n        \"production\": ... // leave as it is\n        \"dev\": {\n            \"browserTarget\": \"<appname>:build:dev\"\n        },\n        \"qa\": {\n            \"browserTarget\": \"<appname>:build:qa\"\n        }\n    }\n},\n```\n\n## Default Values\n\nWhen dealing with multiple environments, it‚Äôs common to have the same value for some of the environments. Something I normally do is to have defaults values for all environments, and I do that by creating a file called _enviroment.defaults.ts_ and adding to it the values I want an environment to have by default:\n\n```typescript\n// environment.defaults.ts\nexport const environmment = {\n   production: false,\n   log: true,\n   flags: {\n      useNewHeader: true\n   }\n}\n```\n\nAll other environments (except e_nvironment.ts_) will need to be merged with the object _defaultEnvironment:_\n\n```typescript\n// environment.dev.ts\nimport { defaultEnvironment } from './environment.defaults.ts';\n\nexport const environment = {\n    ...defaultEnvironment,\n}\n```\n\n```typescript\n// environment.qa.ts\nimport { defaultEnvironment } from './environment.defaults.ts';\n\nexport const environment = {\n    ...defaultEnvironment,\n    production: true\n}\n```\n\nObviously, I don‚Äôt want logging or an untested component in production! So we overwrite the production environment configuration:\n\n```typescript\n// environment.prod.ts\nimport { defaultEnvironment } from './environment.defaults.ts';\n\nexport const environment = {\n    ...defaultEnvironment,\n\n    production: true,\n    log: false,\n    flags: {\n      useNewHeader: false\n   }\n}\n```\n\n> üí° As this is a naive approach for merging objects, you may want to use a better way to merge deeply nested objects so you won‚Äôt have to repeat the same values.\n\n## Adding Npm scripts for each environment\n\nNow that we defined our custom environments, it‚Äôs time to set up an NPM script for serving our app with a custom environment.¬†\n\nThe parameter we‚Äôre interested in is `-c` or `‚Äî-configuration`¬†. Let‚Äôs extend our npm scripts with two parameters:\n\n*   `-c` which will be used to define the environment used\n*   `‚Äî-port` which will be used to assign a different port for each environment, so we can run them in parallel\n\n```\n// package.json\n\n{\n... // more stuff\n\"scripts\": {\n   \"start:dev\": \"ng serve -c=dev --port=4201\"\n   \"start:qa\": \"ng serve -c=qa --port=4202\"\n   ...\n   }\n}\n```\n\nIn order to start one of the environments, simply run its relative command:\n```\nnpm run start:dev\nnpm run start:qa --aot // will run qa configuration using AOT mode\n```\n\n## Importing using an alias¬†ü§ì\n\nAs the environments file is located in the root folder, it can become cumbersome having to import it using its relative path. Something I‚Äôd suggest is to create an alias path using thanks to Typescript.¬†\n\nIn order to do that, locate and open the _tsconfig.json_ in your root folder and add to the object _compilerOptions_ the following object:\n\n```\n\"paths\": {\n    \"@environment\": \\[\"./src/environments/environment.ts\"\\]\n}\n```\n\nAnd now, we will import the environment object by simply referencing ‚Äú@environment‚Äù as path:\n\n```typescript\nimport { Component } from '@angular/core';\nimport { environment } from '@environment'; // nice!\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n})\nexport class AppComponent {\n    environment = environment;\n}\n```\n\n> üí° It is possible your IDE will mark ‚Äò@environment‚Äô as not found, which is likely due to the file not being indexed by the IDE. If you‚Äôre using Webstorm, simply restart and invalidate the cache\n\n## Using a proxy for every environment¬†\n\nLast but not least, we need to take into account our remote environments will be running at different addresses, which means we want to define the correct address for each environment. The CLI helps us by letting us pass the correct proxy configuration at build time.\n\nMy suggestion is to create a folder named `proxy` in the root, and then proceed by adding files named`<env>-proxy.conf.json` which looks like this:\n\n```\n{\n  \"/api\": {\n    \"target\": \"http://my.dev.env.com\",\n    \"secure\": false,\n    \"pathRewrite\": {\n      \"^/api\": \"\"\n    }\n  }\n}\n```\n\nIn the previous file, we‚Äôre telling Angular to redirect calls prefix with `api`to target specified in the configuration.\n\nNow, we proceed by adding the correct proxy config to the configurations we created previously.\n\n```\n// package.json\n\n{\n... // more stuff\n\"scripts\": {\n   \"start:dev\": \"ng serve -c=dev --port=4201 --proxy-config=proxy/dev-proxy.conf.json\"\n   \"start:qa\": \"ng serve -c=qa --port=4202 --proxy-config=proxy/qa-proxy.conf.json\"\n   ...\n   }\n}\n```\n\n> üí° You could also do the same by changing it in the angular.json file, but it‚Äôs up to you.\n\nI find this solution particularly important as many codebases still reference endpoints paths using code logic, which in my opinion is not as safe and clean.¬†\n\n## Takeaways ‚≠ê\n\n*   Setting up multi-environments with the Angular CLI is pretty easy and powerful, add as many as you need\n*   Adding configuration objects at build-time is powerful, but don‚Äôt add sensitive information\n*   Adding proxies to our environments helps us avoid logic living in the code which also results in added security and simplicity\n","tags":["angular"]},"content":{"compiledSource":"var l=Object.defineProperty,u=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var i=(a,n,t)=>n in a?l(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))p.call(n,t)&&i(a,t,n[t]);if(s)for(var t of s(n))r.call(n,t)&&i(a,t,n[t]);return a},m=(a,n)=>u(a,d(n));var c=(a,n)=>{var t={};for(var o in a)p.call(a,o)&&n.indexOf(o)<0&&(t[o]=a[o]);if(a!=null&&s)for(var o of s(a))n.indexOf(o)<0&&r.call(a,o)&&(t[o]=a[o]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var o=t,{components:a}=o,n=c(o,[\"components\"]);return mdx(MDXLayout,m(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"One of the most welcome additions to our tooling as Angular developers is certainly the Angular CLI. The CLI allows us to bootstrap an Angular app and also manage it through all its lifecycle.\\xA0\"),mdx(\"p\",null,\"One of the best features I enjoyed using is setting up multiple environments for my projects. Most applications will probably use at the very least two environments: production and development. Most likely, larger applications will be running several environments, such as QA, RC, pre-prod, and so on.\"),mdx(\"h2\",null,\"Configurations\"),mdx(\"p\",null,\"The Angular CLI bootstraps a new project with two files within the folder \",mdx(\"inlineCode\",{parentName:\"p\"},\"environments\"),\": \",mdx(\"inlineCode\",{parentName:\"p\"},\"environments.ts\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"environments.prod.ts.\"),\"\\xA0.\\xA0\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"em\",{parentName:\"li\"},\"environment.prod.ts\"),\" is the configuration file that the CLI injects for us when the app is built using the production configuration\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"em\",{parentName:\"li\"},\"environment.ts\"),\" is the configuration file we reference in our application, and the CLI will take care of getting the correct configuration at build time\")),mdx(\"p\",null,\"What do these files look like? They\\u2019re just a simple constant object exported as \\u201Cenvironment\\u201D, which initially looks like this:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-unknown\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-unknown\"}),`// environment.ts\nexport const environment = {\n  production: false\n};\n\n----------------------------\n\n// environment.prod.ts\nexport const environment = {\n  production: true\n};`))),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u26A0\\uFE0F As you may have guessed, these values are injected into the client at build time. So be aware\\u200A\\u2014\\u200Adon\\u2019t pass sensitive values to this object.\")),mdx(\"p\",null,\"The CLI allows us to define multiple custom configurations which we will align with our infrastructure\\u2019s environments. So, for example, we can define two more environments\\u200A\\u2014\\u200A\",mdx(\"em\",{parentName:\"p\"},\"dev\"),\" and \",mdx(\"em\",{parentName:\"p\"},\"qa\"),\".\"),mdx(\"p\",null,\"Let\\u2019s go ahead and create two more files in the same folder which we will call \",mdx(\"em\",{parentName:\"p\"},\"environment.dev.ts\"),\" and \",mdx(\"em\",{parentName:\"p\"},\"environment.qa.ts.\")),mdx(\"p\",null,\"In order to set up the environments correctly, we also need to let Angular know by adding these to the configuration file \",mdx(\"em\",{parentName:\"p\"},\"angular.json.\"),\" We will do this by extending the \",mdx(\"em\",{parentName:\"p\"},\"configurations\"),\" object:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-unknown\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-unknown\"}),`... // angular.json\nconfigurations&quot;: {\n    &quot;production&quot; {...} // leave as it is,\n\n    &quot;qa&quot;: {\n        &quot;fileReplacements&quot;: [\n            {\n                &quot;replace&quot;: &quot;src/environments/environment.ts&quot;,\n                &quot;with&quot;: &quot;src/environments/environment.qa.ts&quot;\n            }\n        ]\n    },\n    &quot;dev&quot;: {\n        &quot;fileReplacements&quot;: [\n            {\n                &quot;replace&quot;: &quot;src/environments/environment.ts&quot;,\n                &quot;with&quot;: &quot;src/environments/environment.dev.ts&quot;\n            }\n        ]\n    }\n}`))),mdx(\"p\",null,\"And finally, we update the \",mdx(\"em\",{parentName:\"p\"},\"serve\"),\" object:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-unknown\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-unknown\"}),`&quot;serve&quot;: {\n    &quot;builder&quot;: &quot;@angular-devkit/build-angular:dev-server&quot;,\n    &quot;options&quot;: {\n        &quot;browserTarget&quot;: &quot;&lt;appname&gt;:build&quot;\n    },\n    &quot;configurations&quot;: {\n        &quot;production&quot;: ... // leave as it is\n        &quot;dev&quot;: {\n            &quot;browserTarget&quot;: &quot;&lt;appname&gt;:build:dev&quot;\n        },\n        &quot;qa&quot;: {\n            &quot;browserTarget&quot;: &quot;&lt;appname&gt;:build:qa&quot;\n        }\n    }\n},`))),mdx(\"h2\",null,\"Default Values\"),mdx(\"p\",null,\"When dealing with multiple environments, it\\u2019s common to have the same value for some of the environments. Something I normally do is to have defaults values for all environments, and I do that by creating a file called \",mdx(\"em\",{parentName:\"p\"},\"enviroment.defaults.ts\"),\" and adding to it the values I want an environment to have by default:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// environment.defaults.ts\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"export\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" environmment \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n   production`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"false\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n   log`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n   flags`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n      useNewHeader`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),`\n   `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"All other environments (except e\",mdx(\"em\",{parentName:\"p\"},\"nvironment.ts\"),\") will need to be merged with the object \",mdx(\"em\",{parentName:\"p\"},\"defaultEnvironment:\")),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// environment.dev.ts\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" defaultEnvironment \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"from\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'./environment.defaults.ts'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"export\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" environment \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"...\"),\"defaultEnvironment\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// environment.qa.ts\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" defaultEnvironment \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"from\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'./environment.defaults.ts'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"export\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" environment \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"...\"),\"defaultEnvironment\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    production`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"Obviously, I don\\u2019t want logging or an untested component in production! So we overwrite the production environment configuration:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// environment.prod.ts\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" defaultEnvironment \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"from\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'./environment.defaults.ts'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"export\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" environment \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"...\"),\"defaultEnvironment\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n\n    production`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    log`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"false\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    flags`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n      useNewHeader`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"false\"),`\n   `,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u{1F4A1} As this is a naive approach for merging objects, you may want to use a better way to merge deeply nested objects so you won\\u2019t have to repeat the same values.\")),mdx(\"h2\",null,\"Adding Npm scripts for each environment\"),mdx(\"p\",null,\"Now that we defined our custom environments, it\\u2019s time to set up an NPM script for serving our app with a custom environment.\\xA0\"),mdx(\"p\",null,\"The parameter we\\u2019re interested in is \",mdx(\"inlineCode\",{parentName:\"p\"},\"-c\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"\\u2014-configuration\"),\"\\xA0. Let\\u2019s extend our npm scripts with two parameters:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"-c\"),\" which will be used to define the environment used\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"\\u2014-port\"),\" which will be used to assign a different port for each environment, so we can run them in parallel\")),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-unknown\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-unknown\"}),`// package.json\n\n{\n... // more stuff\n&quot;scripts&quot;: {\n   &quot;start:dev&quot;: &quot;ng serve -c=dev --port=4201&quot;\n   &quot;start:qa&quot;: &quot;ng serve -c=qa --port=4202&quot;\n   ...\n   }\n}`))),mdx(\"p\",null,\"In order to start one of the environments, simply run its relative command:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-unknown\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-unknown\"}),`npm run start:dev\nnpm run start:qa --aot // will run qa configuration using AOT mode`))),mdx(\"h2\",null,\"Importing using an alias\\xA0\\u{1F913}\"),mdx(\"p\",null,\"As the environments file is located in the root folder, it can become cumbersome having to import it using its relative path. Something I\\u2019d suggest is to create an alias path using thanks to Typescript.\\xA0\"),mdx(\"p\",null,\"In order to do that, locate and open the \",mdx(\"em\",{parentName:\"p\"},\"tsconfig.json\"),\" in your root folder and add to the object \",mdx(\"em\",{parentName:\"p\"},\"compilerOptions\"),\" the following object:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-unknown\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-unknown\"}),`&quot;paths&quot;: {\n    &quot;@environment&quot;: \\\\[&quot;./src/environments/environment.ts&quot;\\\\]\n}`))),mdx(\"p\",null,\"And now, we will import the environment object by simply referencing \\u201C@environment\\u201D as path:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" Component \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"from\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'@angular/core'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" environment \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"from\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'@environment'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"// nice!\"),`\n\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token decorator\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token at operator\"}),\"@\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token function\"}),\"Component\")),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    selector`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'app-root'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    templateUrl`,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'./app.component.html'\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"export\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token class-name\"}),\"AppComponent\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    environment `,mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" environment\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u{1F4A1} It is possible your IDE will mark \\u2018@environment\\u2019 as not found, which is likely due to the file not being indexed by the IDE. If you\\u2019re using Webstorm, simply restart and invalidate the cache\")),mdx(\"h2\",null,\"Using a proxy for every environment\\xA0\"),mdx(\"p\",null,\"Last but not least, we need to take into account our remote environments will be running at different addresses, which means we want to define the correct address for each environment. The CLI helps us by letting us pass the correct proxy configuration at build time.\"),mdx(\"p\",null,\"My suggestion is to create a folder named \",mdx(\"inlineCode\",{parentName:\"p\"},\"proxy\"),\" in the root, and then proceed by adding files named\",mdx(\"inlineCode\",{parentName:\"p\"},\"<env>-proxy.conf.json\"),\" which looks like this:\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-unknown\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-unknown\"}),`{\n  &quot;/api&quot;: {\n    &quot;target&quot;: &quot;http://my.dev.env.com&quot;,\n    &quot;secure&quot;: false,\n    &quot;pathRewrite&quot;: {\n      &quot;^/api&quot;: &quot;&quot;\n    }\n  }\n}`))),mdx(\"p\",null,\"In the previous file, we\\u2019re telling Angular to redirect calls prefix with \",mdx(\"inlineCode\",{parentName:\"p\"},\"api\"),\"to target specified in the configuration.\"),mdx(\"p\",null,\"Now, we proceed by adding the correct proxy config to the configurations we created previously.\"),mdx(\"div\",e({},{className:\"remark-highlight\"}),mdx(\"pre\",e({parentName:\"div\"},{className:\"language-unknown\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-unknown\"}),`// package.json\n\n{\n... // more stuff\n&quot;scripts&quot;: {\n   &quot;start:dev&quot;: &quot;ng serve -c=dev --port=4201 --proxy-config=proxy/dev-proxy.conf.json&quot;\n   &quot;start:qa&quot;: &quot;ng serve -c=qa --port=4202 --proxy-config=proxy/qa-proxy.conf.json&quot;\n   ...\n   }\n}`))),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},\"\\u{1F4A1} You could also do the same by changing it in the angular.json file, but it\\u2019s up to you.\")),mdx(\"p\",null,\"I find this solution particularly important as many codebases still reference endpoints paths using code logic, which in my opinion is not as safe and clean.\\xA0\"),mdx(\"h2\",null,\"Takeaways \\u2B50\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Setting up multi-environments with the Angular CLI is pretty easy and powerful, add as many as you need\"),mdx(\"li\",{parentName:\"ul\"},\"Adding configuration objects at build-time is powerful, but don\\u2019t add sensitive information\"),mdx(\"li\",{parentName:\"ul\"},\"Adding proxies to our environments helps us avoid logic living in the code which also results in added security and simplicity\")))}MDXContent.isMDXComponent=!0;\n","scope":{}},"series":[],"morePosts":[],"moreArticles":[{"live":true,"readingTime":"2 min read","title":"Benchmarking Angular 12 with Webpack 5","date":"2021-05-14T00:00:00.322Z","slug":"webpack-5-angular12","coverImage":"/assets/images/posts/benchmarking-webpack-5.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Angular 12 has been released and with it the much awaited Webpack 5 upgrade. In this post I benchmarked the bundle-size and compilation speed against the previous version","tags":["angular"]},{"live":true,"readingTime":"5 min read","title":"Principles for creating libraries with Nx and Angular","date":"2021-02-07T00:00:00.322Z","slug":"how-to-organize-nx-modules-with-angular","coverImage":"/assets/images/posts/organize-nx-modules-ngrx.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Working with Nx may be confusing. This article explains how I create Nx libraries and the principles behind my motivations","tags":["nx","angular"]},{"live":true,"readingTime":"3 min read","title":"Where to put your Angular models?","date":"2020-08-03T00:00:00.322Z","slug":"angular-where-to-put-models","ogImage":{"url":"/assets/images/posts/where-put-angular-models.png"},"coverImage":"/assets/images/posts/where-put-angular-models.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Organizing entities and models in your Angular app may be hard. This article explains where to put your entities and what mistakes to watch out for","tags":["angular","architecture"]},{"live":true,"readingTime":"5 min read","title":"Using the Intersection Observer API with Angular","date":"2020-08-01T00:00:00.322Z","slug":"intersection-observer-with-angular","coverImage":"/assets/images/posts/intersection-observer.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"This article shows how to build a directive with Angular that uses the Intersection Observer API to check when an element becomes visible on the page","tags":["angular","performance"]},{"live":true,"readingTime":"3 min read","title":"Setters vs ngOnChanges: which one is better?","date":"2020-07-30T00:00:00.322Z","slug":"setters-vs-ng-on-changes","coverImage":"/assets/images/posts/setters-vs-on-changes.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Listening to Input changes can be done in different ways. But which one should you use?","tags":["angular"]},{"live":true,"readingTime":"3 min read","title":"Async Rendering with a single Rx Operator","date":"2020-07-11T00:00:00.322Z","slug":"async-rendering-with-a-single-rx-operator","coverImage":"/assets/images/posts/async-rendering.webp","collection":{"name":"Angular","primaryColor":"#e23236","primaryColorLight":"#dd00316e","contrastColor":"#ffffff","logo":"/assets/images/collections/angular.webp"},"excerpt":"Increase your app rendering performance with this simple Rx operator","tags":["angular","rxjs"]}],"type":1},"__N_SSG":true}