{"pageProps":{"post":{"live":true,"readingTime":"5 min read","title":"A Reactive Enum with Typescript and RxJs","date":"2021-11-11T23:00:00.000Z","slug":"reactive-enum-typescript-rxjs","coverImage":"/assets/images/posts/reactive-enum-ts-rxjs.webp","collection":{"name":"RxJs","primaryColor":"#d81b60","primaryColorLight":"#d81b6085","contrastColor":"#fff","logo":"/assets/images/collections/rxjs.webp","slug":"rxjs"},"excerpt":"Typescript's template literals' types allow us to generate dynamic and typed code, together. In this article, I want to show how we can build a dynamic reactive enum with TS and RxJS","series":"","content":"\nTemplate Literal Types are one of the best things to happen to TS in a long time. They allow us to generate dynamic code - and also provide the correct types to the consumers. \n\nThis new ability is particularly handy to library creators: imagine automatically creating typed Redux actions based on the prefix of the entity of a reducer, for example.\n\n## Subjects and State\n\nI like RxJs' Behavior Subjects for storing state - it's easy and quick. \n\nThough there is a ton of repetition - I've always tried to find a way to reduce the boilerplate needed.\n\nLet's see a quick example with an Angular component (the code below is very meta-codey, don't take it too literally):\n\n```typescript\nenum State {\n    Initial,\n    Loading,\n    Success,\n    Error\n}\n\nclass MyComponent {\n    readonly state$ = \n        new BehaviorSubject<State>(State.Initial);\n\n    readonly states = State;\n\n    requestData() {\n        this.state.next(State.Loading);\n\n        return this.http.pipe(\n            tap(() => \n                this.state.next(State.Success);\n            ),\n            catchError((e) => {\n                this.state.next(State.Error);\n                console.error(e);\n\n                return of([]);\n            })\n        )\n    }\n}\n````\n\n```html\n<ng-container [ngSwitch]=\"state$ | async\">\n    <ng-container *ngSwitchCase=\"state.Initial\">\n        <button (click)=\"requestData()\">\n            Request Data\n        </button> \n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"state.Success\">\n        All good!\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"state.Error\">\n        Ooops!\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"state.Loading\">\n        Loading...\n    </ng-container>\n</ng-container>\n```\n\nTemplate Literal Types finally allow us to do so. Enter Reactive Enum. Even if you're not interested in using it, learning what's possible with using Template Literal Types is eye-opening.\n\n## Reactive Enum\n\nOur goal is: given a TS enum, generate an Rx `Observable` for each key, so that we can subscribe to each key's value changes.\n\nHere is an example:\n\n```typescript\n// declare an enum\nenum Status {\n  Initial,\n  Pending,\n  Success,\n  Error\n}\n\n// pass your enum to \"reactiveEnum\"\nconst status = reactiveEnum(Status);\n\n// \"status\" has now autmatically generated a method for each value of the enum\nstatus.initial$.subscribe(); // false ...  // true\nstatus.pending$.subscribe(); // false      // ^\nstatus.success$.subscribe(); // false      // |\nstatus.error$.subscribe();   // false      // |\n                                           // |\nstatus.set(Status.Initial);                // |\nstatus.value$(); // Observable<Status.Initial>\n```\n\nI happen to simplyfing my templates by writing lots of methods that check if the current state is a certain value of the enum. That is, lots of mapping `enum === EnumValue`.\n\nLet's compare the above with the same code if we were to use a `BehaviorSubject`:\n\n```typescript\nimport { BehaviorSubject } from 'rxjs';\n\nclass MyComponent {\n  private readonly status$ =\n    new BehaviorSubject<Status>(Status.Initial);\n  \n  private readonly initial$ =\n     this.status$.pipe(map(status => status === Status.Initial));\n  \n  private readonly pending$ = \n    this.status$.pipe(map(status => status === Status.Pending));\n\n  // and so on\n}\n```\n\nWhen we use the `reactiveEnum` utility, these methods are already there!\n\n### Building it from scratch\n\nOkay! Let's see how we can build the above.\n\nFirst, let's define the types which we can assign to each key of a reactive enum.\n\nOur reactive enum will contain the following methods:\n\n- all the keys generated using the enum, appended with the dollar sign `$`\n- a few utility methods to set the current value, reset to the original value, unsubscribe, etc.\n\n```typescript\nimport { BehaviorSubject, Observable, map } from 'rxjs';\n\ninterface CurrentState<S> {\n  value$: Observable<S[keyof S]>;\n\n  value(): S[keyof S];\n}\n\ninterface Settable<S> {\n  set(value: S[keyof S]): void;\n}\n\ninterface Resettable {\n  reset(): void;\n}\n\ninterface Releasable {\n  release(): void;\n}\n\ntype KeysToObservableMapper<State> = {\n  readonly [K in Extract<keyof State,\n    string> as `${Lowercase<K>}$`]: Observable<boolean>;\n};\n\nexport type ReactiveEnum<S> = KeysToObservableMapper<S> &\n  Settable<S> &\n  CurrentState<S> &\n  Resettable &\n  Releasable;\n\ntype Enum<E> = Record<keyof E, E[keyof E]>;\n\ninterface Transition<State> {\n  when: Observable<unknown>;\n  become: State[keyof State];\n}\n\ninterface Config<State> {\n  initialValue?: State[keyof State];\n}\n\ntype ConfigParam<State> = State[keyof State] | Config<State>;\n```\n\nThe magic happens here:\n\n```typescript\ntype KeysToObservableMapper<State> = {\n  readonly [K in Extract<keyof State,\n    string> as `${Lowercase<K>}$`]: Observable<boolean>;\n};\n```\n\nWhat's going on here? Let's see:\n\n- we create a Type named `KeysToObservableMapper` which takes an argument `State`, and has the shape of an object\n- we iterate the keys of the argument `State` by using `K in {}`, but we use `Extract` to only get the strings of this type\n- we then map K using the `as` syntax, transform `K` to its lowercase value, and append `$` at the end of the literal type\n- the value of each key is indeed `Observable<boolean>`\n\n### Code generation\n\nNow that our types are in check - we need to write the code that generates the methods dynamically.\n\nOur `reactiveEnum` will accept the enum, and we will use the second parameter for setting the initial value. We leave the interface flexible by allowing a full configuration objec.\n\n```typescript\nfunction reactiveEnum<State extends Enum<State>>(\n  state: State,\n  config: ConfigParam<State> = {},\n): ReactiveEnum<State> {\n  const initialValue = isConfigObject<State>(config)\n    ? (config as Config<State>).initialValue\n    : config;\n\n  const state$ = \n    new BehaviorSubject<State | undefined>(initialValue);\n\n  const container: Partial<ReactiveEnum<State>>\n     = {};\n\n  for (const key in state) {\n    const property = `${key.toLowerCase()}$`;\n\n    const value$ = state$.pipe(\n        map((value) => {\n            return value === state[key];\n        }),\n    );\n\n    Object.assign(container, {\n      [property]: value$,\n    });\n  }\n\n  Object.assign(container, {\n    set: (value: State) => state$.next(value),\n    reset: () => state$.next(initialValue),\n    release: () => state$.unsubscribe(),\n    value$: state$.asObservable(),\n    value: () => state$.getValue(),\n  });\n\n  return container as ReactiveEnum<State>;\n}\n\nfunction isConfigObject<T>(\n    config: ConfigParam<T>\n): config is Config<T> {\n  return Object(config) === config;\n}\n```\n\nWhat happens here?\n\n- First, we create a subject with an initial value\n- For each property, we define a set of methods attached to an object `container`\n- Each key of the property needs to match the type of our literal type defined in the interface, hence will be `${key.toLowerCase()}$`\n- Once we set the utility methods (release, reset, set, etc.), we return the object to the consumer\n\n## Tests\n\nLet's write a simple test to check the initial value is set up correctly:\n\n```typescript\nenum Status {\n  Initial,\n  Loading,\n}\n\ndescribe(`reactiveEnum`, () => {\n    it('should start with a default value', (done) => {\n        const status = reactiveEnum(Status, {\n            initialValue: Status.Initial,\n        });\n\n        const streams$ = combineLatest([\n            status.loading$,\n            status.initial$,\n        ]);\n\n        streams$.subscribe(([loading, initial]) => {\n            expect(loading).toBe(false);\n            expect(initial).toBe(true);\n\n            done();\n        });\n    });\n});\n```\n\n## Limitations\n\nThis library has some limitations:\n\n- all enum values are converted to its lowercase particularly\n- no current way of setting a value without using an enum. This can be very useful in Angular's templates, if we set a value directly from the template - because we would not need to store a public property with the `Enum`\n\n## Using the library\n\nIf you're interested in using this library, you can also install it from NPM\n\nInstall the library from NPM:\n\n```\nnpm i @ngbites/reactive-enum\n```\n\n## Final Words\n\nThis is a very quick example of what TS's template literal types can do, but hopefully can inspire you to do some magic stuff and save you tons of keystrokes.\n\nCiao!","canonical":"","tags":["rxjs","typescript"]},"content":{"compiledSource":"var l=Object.defineProperty,u=Object.defineProperties;var i=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var m=(e,n,s)=>n in e?l(e,n,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[n]=s,a=(e,n)=>{for(var s in n||(n={}))o.call(n,s)&&m(e,s,n[s]);if(p)for(var s of p(n))c.call(n,s)&&m(e,s,n[s]);return e},N=(e,n)=>u(e,i(n));var r=(e,n)=>{var s={};for(var t in e)o.call(e,t)&&n.indexOf(t)<0&&(s[t]=e[t]);if(e!=null&&p)for(var t of p(e))n.indexOf(t)<0&&c.call(e,t)&&(s[t]=e[t]);return s};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var t=s,{components:e}=t,n=r(t,[\"components\"]);return mdx(MDXLayout,N(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Template Literal Types are one of the best things to happen to TS in a long time. They allow us to generate dynamic code - and also provide the correct types to the consumers. \"),mdx(\"p\",null,\"This new ability is particularly handy to library creators: imagine automatically creating typed Redux actions based on the prefix of the entity of a reducer, for example.\"),mdx(\"h2\",null,\"Subjects and State\"),mdx(\"p\",null,\"I like RxJs' Behavior Subjects for storing state - it's easy and quick. \"),mdx(\"p\",null,\"Though there is a ton of repetition - I've always tried to find a way to reduce the boilerplate needed.\"),mdx(\"p\",null,\"Let's see a quick example with an Angular component (the code below is very meta-codey, don't take it too literally):\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"enum\"),\" State \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    Initial`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    Loading`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    Success`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    Error\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"MyComponent\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"readonly\"),\" state$ \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),` \n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"new\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"BehaviorSubject\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),\"State\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\")),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"Initial\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"readonly\"),\" states \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"requestData\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"state\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"next\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"Loading\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"http\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"pipe\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"tap\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),` \n                `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"state\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"next\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"Success\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"catchError\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"e\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n                `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"state\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"next\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"Error\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n                `,mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"console\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"error\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"e\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n                `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"of\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-html\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-html\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"<\"),\"ng-container\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token attr-name\"}),\"[ngSwitch]\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token attr-value\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation attr-equals\"}),\"=\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),'\"'),\"state$ | async\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),'\"')),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\">\")),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"<\"),\"ng-container\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token attr-name\"}),\"*ngSwitchCase\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token attr-value\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation attr-equals\"}),\"=\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),'\"'),\"state.Initial\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),'\"')),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\">\")),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"<\"),\"button\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token attr-name\"}),\"(click)\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token attr-value\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation attr-equals\"}),\"=\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),'\"'),\"requestData()\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),'\"')),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\">\")),`\n            Request Data\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"</\"),\"button\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\">\")),` \n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"</\"),\"ng-container\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\">\")),`\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"<\"),\"ng-container\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token attr-name\"}),\"*ngSwitchCase\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token attr-value\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation attr-equals\"}),\"=\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),'\"'),\"state.Success\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),'\"')),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\">\")),`\n        All good!\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"</\"),\"ng-container\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\">\")),`\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"<\"),\"ng-container\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token attr-name\"}),\"*ngSwitchCase\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token attr-value\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation attr-equals\"}),\"=\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),'\"'),\"state.Error\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),'\"')),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\">\")),`\n        Ooops!\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"</\"),\"ng-container\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\">\")),`\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"<\"),\"ng-container\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token attr-name\"}),\"*ngSwitchCase\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token attr-value\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation attr-equals\"}),\"=\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),'\"'),\"state.Loading\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),'\"')),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\">\")),`\n        Loading...\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"</\"),\"ng-container\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\">\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token tag\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"</\"),\"ng-container\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\">\")),`\n`))),mdx(\"p\",null,\"Template Literal Types finally allow us to do so. Enter Reactive Enum. Even if you're not interested in using it, learning what's possible with using Template Literal Types is eye-opening.\"),mdx(\"h2\",null,\"Reactive Enum\"),mdx(\"p\",null,\"Our goal is: given a TS enum, generate an Rx \",mdx(\"inlineCode\",{parentName:\"p\"},\"Observable\"),\" for each key, so that we can subscribe to each key's value changes.\"),mdx(\"p\",null,\"Here is an example:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// declare an enum\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"enum\"),\" Status \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  Initial`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n  Pending`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n  Success`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n  Error\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),'// pass your enum to \"reactiveEnum\"'),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" status \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"reactiveEnum\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"Status\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),'// \"status\" has now autmatically generated a method for each value of the enum'),`\nstatus`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"initial$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"subscribe\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// false ...  // true\"),`\nstatus`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"pending$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"subscribe\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// false      // ^\"),`\nstatus`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"success$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"subscribe\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// false      // |\"),`\nstatus`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"error$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"subscribe\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\"   \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// false      // |\"),`\n                                           `,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// |\"),`\nstatus`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"set\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"Status\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"Initial\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\"                \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// |\"),`\nstatus`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"value$\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// Observable<Status.Initial>\"),`\n`))),mdx(\"p\",null,\"I happen to simplyfing my templates by writing lots of methods that check if the current state is a certain value of the enum. That is, lots of mapping \",mdx(\"inlineCode\",{parentName:\"p\"},\"enum === EnumValue\"),\".\"),mdx(\"p\",null,\"Let's compare the above with the same code if we were to use a \",mdx(\"inlineCode\",{parentName:\"p\"},\"BehaviorSubject\"),\":\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" BehaviorSubject \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"from\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'rxjs'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"class\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"MyComponent\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"readonly\"),\" status$ \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"new\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"BehaviorSubject\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),\"Status\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\")),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"Status\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"Initial\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n  \n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"readonly\"),\" initial$ \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),`\n     `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"status$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"pipe\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"map\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"status \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" status \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"===\"),\" Status\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"Initial\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n  \n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"private\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"readonly\"),\" pending$ \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),` \n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"this\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"status$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"pipe\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"map\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"status \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" status \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"===\"),\" Status\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"Pending\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token comment\"}),\"// and so on\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"When we use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"reactiveEnum\"),\" utility, these methods are already there!\"),mdx(\"h3\",null,\"Building it from scratch\"),mdx(\"p\",null,\"Okay! Let's see how we can build the above.\"),mdx(\"p\",null,\"First, let's define the types which we can assign to each key of a reactive enum.\"),mdx(\"p\",null,\"Our reactive enum will contain the following methods:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"all the keys generated using the enum, appended with the dollar sign \",mdx(\"inlineCode\",{parentName:\"li\"},\"$\")),mdx(\"li\",{parentName:\"ul\"},\"a few utility methods to set the current value, reset to the original value, unsubscribe, etc.\")),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"import\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" BehaviorSubject\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" Observable\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" map \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"from\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'rxjs'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"interface\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"CurrentState\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token constant\"}),\"S\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\")),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  value$`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" Observable\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"S\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"keyof\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"S\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"value\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"S\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"keyof\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"S\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"interface\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"Settable\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token constant\"}),\"S\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\")),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"set\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"value\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"S\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"keyof\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"S\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"interface\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"Resettable\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"reset\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"interface\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"Releasable\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"release\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"void\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"type\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"KeysToObservableMapper\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),\"State\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\")),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"readonly\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"K\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" Extract\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"keyof\"),\" State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"as\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token template-string\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token template-punctuation string\"}),\"`\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token interpolation\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token interpolation-punctuation punctuation\"}),\"${\"),\"Lowercase\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token constant\"}),\"K\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token interpolation-punctuation punctuation\"}),\"}\")),mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"$\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token template-punctuation string\"}),\"`\")),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" Observable\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"boolean\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"export\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"type\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"ReactiveEnum\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token constant\"}),\"S\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\")),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" KeysToObservableMapper\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"S\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"&\"),`\n  Settable`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"S\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"&\"),`\n  CurrentState`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"S\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"&\"),`\n  Resettable `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"&\"),`\n  Releasable`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"type\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"Enum\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token constant\"}),\"E\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\")),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" Record\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"keyof\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"E\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"E\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"keyof\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"E\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"interface\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"Transition\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),\"State\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\")),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  when`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" Observable\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"unknown\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n  become`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"keyof\"),\" State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"interface\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"Config\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),\"State\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\")),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  initialValue`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"?\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"keyof\"),\" State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"type\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"ConfigParam\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),\"State\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\")),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"keyof\"),\" State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"|\"),\" Config\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\"State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`))),mdx(\"p\",null,\"The magic happens here:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"type\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"KeysToObservableMapper\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),\"State\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\")),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"readonly\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"K\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" Extract\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"keyof\"),\" State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"string\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"as\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token template-string\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token template-punctuation string\"}),\"`\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token interpolation\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token interpolation-punctuation punctuation\"}),\"${\"),\"Lowercase\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token constant\"}),\"K\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token interpolation-punctuation punctuation\"}),\"}\")),mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"$\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token template-punctuation string\"}),\"`\")),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" Observable\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin\"}),\"boolean\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`))),mdx(\"p\",null,\"What's going on here? Let's see:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"we create a Type named \",mdx(\"inlineCode\",{parentName:\"li\"},\"KeysToObservableMapper\"),\" which takes an argument \",mdx(\"inlineCode\",{parentName:\"li\"},\"State\"),\", and has the shape of an object\"),mdx(\"li\",{parentName:\"ul\"},\"we iterate the keys of the argument \",mdx(\"inlineCode\",{parentName:\"li\"},\"State\"),\" by using \",mdx(\"inlineCode\",{parentName:\"li\"},\"K in {}\"),\", but we use \",mdx(\"inlineCode\",{parentName:\"li\"},\"Extract\"),\" to only get the strings of this type\"),mdx(\"li\",{parentName:\"ul\"},\"we then map K using the \",mdx(\"inlineCode\",{parentName:\"li\"},\"as\"),\" syntax, transform \",mdx(\"inlineCode\",{parentName:\"li\"},\"K\"),\" to its lowercase value, and append \",mdx(\"inlineCode\",{parentName:\"li\"},\"$\"),\" at the end of the literal type\"),mdx(\"li\",{parentName:\"ul\"},\"the value of each key is indeed \",mdx(\"inlineCode\",{parentName:\"li\"},\"Observable<boolean>\"))),mdx(\"h3\",null,\"Code generation\"),mdx(\"p\",null,\"Now that our types are in check - we need to write the code that generates the methods dynamically.\"),mdx(\"p\",null,\"Our \",mdx(\"inlineCode\",{parentName:\"p\"},\"reactiveEnum\"),\" will accept the enum, and we will use the second parameter for setting the initial value. We leave the interface flexible by allowing a full configuration objec.\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"function\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token generic-function\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token function\"}),\"reactiveEnum\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token generic class-name\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),\"State \",mdx(\"span\",a({parentName:\"span\"},{className:\"token keyword\"}),\"extends\"),\" Enum\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),\"State\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">>\"))),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n  state`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n  config`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" ConfigParam\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\"State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" ReactiveEnum\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\"State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" initialValue \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token generic-function\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token function\"}),\"isConfigObject\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token generic class-name\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),\"State\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\"))),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"config\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"?\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"config \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"as\"),\" Config\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\"State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),`initialValue\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" config\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" state$ \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),` \n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"new\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token class-name\"}),\"BehaviorSubject\",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),\"State \",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"|\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token keyword\"}),\"undefined\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\")),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"initialValue\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" container\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" Partial\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\"ReactiveEnum\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\"State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">>\"),`\n     `,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" key \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" state\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" property \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token template-string\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token template-punctuation string\"}),\"`\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token interpolation\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token interpolation-punctuation punctuation\"}),\"${\"),\"key\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token function\"}),\"toLowerCase\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token interpolation-punctuation punctuation\"}),\"}\")),mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"$\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token template-punctuation string\"}),\"`\")),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" value$ \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" state$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"pipe\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"map\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"value\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" value \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"===\"),\" state\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"key\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n    Object`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"assign\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"container\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n      `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"property\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" value$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n  Object`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"assign\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"container\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function-variable function\"}),\"set\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"value\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" state$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"next\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"value\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function-variable function\"}),\"reset\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" state$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"next\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"initialValue\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function-variable function\"}),\"release\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" state$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"unsubscribe\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    value$`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" state$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"asObservable\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function-variable function\"}),\"value\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" state$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"getValue\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" container \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"as\"),\" ReactiveEnum\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),\"State\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"function\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token generic-function\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token function\"}),\"isConfigObject\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token generic class-name\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token constant\"}),\"T\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\">\"))),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),`\n    config`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" ConfigParam\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"T\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" config \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"is\"),\" Config\",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"<\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"T\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"return\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"Object\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"config\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"===\"),\" config\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"p\",null,\"What happens here?\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"First, we create a subject with an initial value\"),mdx(\"li\",{parentName:\"ul\"},\"For each property, we define a set of methods attached to an object \",mdx(\"inlineCode\",{parentName:\"li\"},\"container\")),mdx(\"li\",{parentName:\"ul\"},\"Each key of the property needs to match the type of our literal type defined in the interface, hence will be \",mdx(\"inlineCode\",{parentName:\"li\"},\"${key.toLowerCase()}$\")),mdx(\"li\",{parentName:\"ul\"},\"Once we set the utility methods (release, reset, set, etc.), we return the object to the consumer\")),mdx(\"h2\",null,\"Tests\"),mdx(\"p\",null,\"Let's write a simple test to check the initial value is set up correctly:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-typescript\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"enum\"),\" Status \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  Initial`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n  Loading`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"describe\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token template-string\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token template-punctuation string\"}),\"`\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"reactiveEnum\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token template-punctuation string\"}),\"`\")),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"it\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'should start with a default value'\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"done\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" status \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"reactiveEnum\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"Status\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n            initialValue`,mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" Status\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"Initial\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"const\"),\" streams$ \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"combineLatest\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n            status`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"loading$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n            status`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),\"initial$\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n        streams$`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"subscribe\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\"loading\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" initial\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=>\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"expect\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"loading\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"toBe\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"false\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"expect\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),\"initial\",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"toBe\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n\n            `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"done\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n        `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`))),mdx(\"h2\",null,\"Limitations\"),mdx(\"p\",null,\"This library has some limitations:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"all enum values are converted to its lowercase particularly\"),mdx(\"li\",{parentName:\"ul\"},\"no current way of setting a value without using an enum. This can be very useful in Angular's templates, if we set a value directly from the template - because we would not need to store a public property with the \",mdx(\"inlineCode\",{parentName:\"li\"},\"Enum\"))),mdx(\"h2\",null,\"Using the library\"),mdx(\"p\",null,\"If you're interested in using this library, you can also install it from NPM\"),mdx(\"p\",null,\"Install the library from NPM:\"),mdx(\"div\",a({},{className:\"remark-highlight\"}),mdx(\"pre\",a({parentName:\"div\"},{className:\"language-unknown\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-unknown\"}),\"npm i @ngbites/reactive-enum\"))),mdx(\"h2\",null,\"Final Words\"),mdx(\"p\",null,\"This is a very quick example of what TS's template literal types can do, but hopefully can inspire you to do some magic stuff and save you tons of keystrokes.\"),mdx(\"p\",null,\"Ciao!\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"series":[],"morePosts":[{"live":true,"readingTime":"2 min read","title":"Testing RxJS timers with Jest","date":"2021-11-11T21:49:22.000Z","slug":"testing-rxjs-timers-with-jest","collection":{"name":"RxJs","primaryColor":"#d81b60","primaryColorLight":"#d81b6085","contrastColor":"#fff","logo":"/assets/images/collections/rxjs.webp","slug":"rxjs"}}],"moreArticles":[{"live":true,"readingTime":"8 min read","title":"Caching RxJS streams into Web Storage","date":"2021-11-10T23:00:00.000Z","slug":"caching-rxjs-streams-into-web-storage","coverImage":"/assets/caching-rxjs-streams.webp","collection":{"name":"RxJs","primaryColor":"#d81b60","primaryColorLight":"#d81b6085","contrastColor":"#fff","logo":"/assets/images/collections/rxjs.webp","slug":"rxjs"},"excerpt":"In this article I will introduce you to a simple utility that allows you to cache RxJS streams in memory or the browser's storage","series":"","tags":["rxjs"]},{"live":true,"readingTime":"6 min read","title":"5 common mistakes with RxJS","date":"2020-08-03T00:00:00.322Z","slug":"five-common-mistakes-with-rxjs","coverImage":"https://miro.medium.com/max/1400/1*SZ7Ubdlu8CbNjvI8-LezVw.jpeg","collection":{"name":"RxJs","primaryColor":"#d81b60","primaryColorLight":"#d81b6085","contrastColor":"#fff","logo":"/assets/images/collections/rxjs.webp","slug":"rxjs"},"excerpt":"A list of common mistakes while using RxJS, and explanations on what to do instead","tags":["rxjs"]},{"live":true,"readingTime":"7 min read","title":"RxJS Subjects in Depth","date":"2019-10-15T00:00:00.000Z","slug":"rxjs-subjects-in-depth","coverImage":"https://cdn-images-1.medium.com/max/14720/0*15QkEYFTChBSrv-J","collection":{"name":"RxJs","primaryColor":"#d81b60","primaryColorLight":"#d81b6085","contrastColor":"#fff","logo":"/assets/images/collections/rxjs.webp","slug":"rxjs"},"excerpt":"Learn how RxJS Subjects are used in real-world applications","tags":["rxjs"]},{"live":true,"readingTime":"9 min read","title":"RxJS Patterns: Efficiency and Performance","date":"2019-09-16T00:00:00.000Z","slug":"rxjs-patterns-efficiency-and-performance","coverImage":"https://cdn-images-1.medium.com/max/8120/0*s2vR3V3jI171miko","collection":{"name":"RxJs","primaryColor":"#d81b60","primaryColorLight":"#d81b6085","contrastColor":"#fff","logo":"/assets/images/collections/rxjs.webp","slug":"rxjs"},"excerpt":"A rundown of all RxJS operators and techniques you can leverage to avoid needless computation and make your code snappier and faster","tags":["rxjs","performance"]},{"live":true,"readingTime":"5 min read","title":"A simple Countdown with RxJS","date":"2019-06-05T00:00:00.322Z","slug":"a-simple-countdown-with-rx-js","coverImage":"/assets/images/posts/rxjs-countdown.gif","collection":{"name":"RxJs","primaryColor":"#d81b60","primaryColorLight":"#d81b6085","contrastColor":"#fff","logo":"/assets/images/collections/rxjs.webp","slug":"rxjs"},"excerpt":"In this tutorial, we’re going to build a very simple timer application with only a few lines of code using RxJS","tags":["rxjs"]}],"type":1},"__N_SSG":true}